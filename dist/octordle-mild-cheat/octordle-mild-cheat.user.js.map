{
  "version": 3,
  "sources": ["../../src/main/octordle-mild-cheat/octordle-mild-cheat.user.ts"],
  "sourcesContent": ["// ==UserScript==\n// @name         Octordle Mild Cheat\n// @namespace    bricemciver\n// @version      0.1\n// @description  Give you hints for each game board based on valid remaining words\n// @author       bricemciver\n// @match        https://www.britannica.com/games/octordle*\n// @icon         https://www.google.com/s2/favicons?sz=64&domain=britannica.com\n// @grant        GM.xmlHttpRequest\n// @grant        GM_xmlhttpRequest\n// @run-at       document-start\n// ==/UserScript==\n\nenum State {\n  correct,\n  diff,\n  none,\n}\n\ntype ProcessedCell = {\n  letter: string;\n  position: number;\n  status: State;\n};\n\nconst wordBankRegEx = /\"([^\"]*\\bsonic\\b[^\"]*)\"/;\nconst allowedRegEx = /\"([^\"]*\\bcorky\\b[^\"]*)\"/;\nconst wordBankWords: string[] = [];\nconst allowedWords: string[] = [];\n\n/**\n * Set an item into storage\n * @param key key to set\n * @param value value to set\n */\nconst setItem = (key: string, value: any) => {\n  window.sessionStorage.setItem(key, JSON.stringify(value));\n};\n\n/**\n * Get an item from session storage\n * @param key key to get\n * @param defaultVal value to return if key doesn't exist\n */\nconst getItem = (key: string, defaultVal: any) => {\n  const val = window.sessionStorage.getItem(key);\n  if (!val || val === 'undefined') return defaultVal;\n  try {\n    return JSON.parse(val);\n  } catch (e) {\n    return val;\n  }\n};\n\nconst callback: MutationCallback = (mutationList, mutationObserver) => {\n  for (const mutation of mutationList) {\n    if (\n      mutation.addedNodes.length > 0 &&\n      mutation.addedNodes[0].nodeType === Node.ELEMENT_NODE &&\n      mutation.addedNodes[0].nodeName === 'SCRIPT'\n    ) {\n      const element = mutation.addedNodes[0] as HTMLScriptElement;\n      if (element.type === 'module') {\n        // Get the script\n        GM.xmlHttpRequest({\n          method: 'GET',\n          url: element.src,\n          onload(response) {\n            const text = response.responseText;\n            // get wordBank words\n            const wordBankMatches = RegExp(wordBankRegEx).exec(text);\n            if (wordBankMatches && wordBankMatches.length > 1) {\n              wordBankWords.push(...wordBankMatches[1].split(' ').map(word => word.toUpperCase()));\n            }\n            // get allowed words\n            const allowedMatches = RegExp(allowedRegEx).exec(text);\n            if (allowedMatches && allowedMatches.length > 1) {\n              allowedWords.push(...allowedMatches[1].split(' ').map(word => word.toUpperCase()));\n            }\n            // store in session so we don't retrieve every time\n            setItem('wordBank', wordBankWords);\n            setItem('allowed', allowedWords);\n          },\n        });\n        mutationObserver.disconnect();\n        break;\n      }\n    }\n  }\n};\n\nconst findAllowedWords = () => {\n  // see if we need to retrieve\n  wordBankWords.push(...getItem('wordBank', []));\n  allowedWords.push(...getItem('allowed', []));\n  if (!wordBankWords.length || !allowedWords.length) {\n    // create a new instance of `MutationObserver` named `observer`,\n    // passing it a callback function\n    const observer = new MutationObserver(callback);\n\n    // call `observe()` on that MutationObserver instance,\n    // passing it the element to observe, and the options object\n    observer.observe(document, { subtree: true, childList: true });\n  }\n};\n\nconst createWordlistDialog = () => {\n  const wordlist = document.createElement('dialog');\n  wordlist.classList.add('dialog');\n  wordlist.id = 'dialog';\n  const header = document.createElement('h2');\n  header.textContent = 'Word List';\n  wordlist.appendChild(header);\n  const listContainer = document.createElement('div');\n  listContainer.id = 'wordList';\n  wordlist.appendChild(listContainer);\n  return wordlist;\n};\n\nconst createBoardList = (wordList: HTMLElement, board: string[], title: string) => {\n  const boardHeader = document.createElement('h2');\n  boardHeader.textContent = title;\n  wordList.appendChild(boardHeader);\n  const list = document.createElement('ul');\n  board.forEach(word => {\n    const listItem = document.createElement('li');\n    listItem.textContent = word;\n    if (wordBankWords.some(item => item === word)) {\n      listItem.attributeStyleMap.set('font-weight', 700);\n    }\n    list.appendChild(listItem);\n  });\n  wordList.appendChild(list);\n};\n\nconst showWordlist = (...boards: string[][]) => {\n  let wordList = document.getElementById('wordList');\n  if (!wordList) {\n    // load new styles\n    const head = document.getElementsByTagName('head')[0];\n    const style = document.createElement('style');\n    head.appendChild(style);\n    style.setAttribute('type', 'text/css');\n    if (style.sheet) {\n      style.sheet.insertRule(`.dialog li {\n            display: block;\n            padding: 2px 0px;\n        }`);\n      style.sheet.insertRule(`.dialog ul {\n            list-style: none;\n            margin: 4px 0px;\n            position: relative;\n            padding: 0px;\n        }`);\n      style.sheet.insertRule(`.dialog h2 {\n            font-size: 0.6875rem;\n            line-height: 1.5;\n            letter-spacing: 0.08rem;\n            font-family: \"IBM Plex Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            font-weight: 700;\n            display: flex;\n            align-items: center;\n            border-radius: 5px;\n            outline: 0px;\n            width: 100%;\n            justify-content: flex-start;\n            transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n            text-decoration: none;\n            color: rgb(111, 126, 140);\n            margin-top: 8px;\n            text-transform: uppercase;\n        }`);\n      style.sheet.insertRule(`.dialog {\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 300px;\n            padding: 20px;\n            background-color: #f2f2f2;\n            border: 1px solid #ccc;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n            font-family: Arial, sans-serif;\n            color: #333;\n            margin: 0 auto;\n        }`);\n    }\n\n    // create wordlist div\n    const helpDiv = createWordlistDialog();\n\n    // attach to body\n    document.body.appendChild(helpDiv);\n    wordList = document.getElementById('wordList');\n  }\n\n  if (wordList) {\n    wordList.innerHTML = '';\n  }\n\n  // add boards\n  boards.forEach((board, index) => {\n    if (wordList) {\n      createBoardList(wordList, board, `Board ${index + 1}`);\n    }\n  });\n\n  const dialog = document.querySelector<HTMLDialogElement>('dialog#dialog');\n  if (dialog) {\n    dialog.showModal();\n  }\n};\n\nconst hideWordlist = () => {\n  const dialog = document.querySelector<HTMLDialogElement>('dialog#dialog');\n  if (dialog) {\n    dialog.close();\n  }\n};\n\nconst processCell = (pos: number, element: HTMLDivElement): ProcessedCell | null => {\n  const letter = element.children[0].textContent ?? '';\n  if (element.classList.contains('exact-match')) {\n    // letter is in correct spot\n    return {\n      letter: letter.trim(),\n      position: pos,\n      status: State.correct,\n    };\n  }\n  if (element.classList.contains('word-match')) {\n    // letter is in word, not in that place\n    return {\n      letter: letter.trim(),\n      position: pos,\n      status: State.diff,\n    };\n  }\n  if (letter.length > 0 && letter === letter.toUpperCase() && letter !== letter.toLowerCase()) {\n    // if we have a letter, it doesn't belong\n    return {\n      letter: letter.trim(),\n      position: pos,\n      status: State.none,\n    };\n  }\n  return null;\n};\n\nconst extractGameBoard = (boardNum: number) => {\n  const boardState: ProcessedCell[] = [];\n  const board = document.getElementById(`board-${boardNum}`);\n  // get rows\n  if (board) {\n    const rows = board.querySelectorAll<HTMLDivElement>(\"div[class~='board-row']\");\n    rows.forEach(row => {\n      // get all cells in a row\n      const cells = row.querySelectorAll<HTMLDivElement>(\"div[class~='letter']\");\n      let index = 0;\n      cells.forEach(cell => {\n        // get the letter, position, and status\n        const processedCell = processCell(index, cell);\n        if (processedCell !== null) {\n          boardState.push(processedCell);\n        }\n        index++;\n      });\n    });\n  }\n  return boardState;\n};\n\nconst addListeners = () => {\n  document.addEventListener(\n    'keydown',\n    function (event) {\n      if (event.defaultPrevented) {\n        return; // Do nothing if the event was already processed\n      }\n      if (event.key === '?') {\n        event.preventDefault();\n        const boardArray = [];\n        for (let i = 1; i < 9; i++) {\n          boardArray.push(processGameBoard(extractGameBoard(i)));\n        }\n        showWordlist(...boardArray);\n      }\n      if (event.key === 'Escape') {\n        event.preventDefault();\n        hideWordlist();\n      }\n    },\n    true,\n  );\n};\n\nconst sortProcessedCells = (cells: ProcessedCell[]): ProcessedCell[] => {\n  return cells.sort((a, b) => a.status - b.status);\n};\n\nconst processGameBoard = (boardState: ProcessedCell[]) => {\n  let tempWordList = [...wordBankWords, ...allowedWords];\n\n  // sort boardState so all correct answers are handled first, then diff, then none\n  sortProcessedCells(boardState);\n\n  boardState.forEach(item => {\n    if (item.status === State.correct) {\n      // process all the correct answers first to shrink word list\n      tempWordList = tempWordList.filter(word => word.charAt(item.position).toUpperCase() === item.letter.toUpperCase());\n    } else if (item.status === State.diff) {\n      // now eliminate words where 'diff' items appear in that spot\n      // and where 'diff' item doesn't appear at all\n      tempWordList = tempWordList.filter(\n        word => word.charAt(item.position).toUpperCase() !== item.letter.toUpperCase() && word.indexOf(item.letter.toUpperCase()) !== -1,\n      );\n    } else if (\n      item.status === State.none &&\n      !boardState.some(({ letter, status }) => (status === State.correct || status === State.diff) && letter === item.letter)\n    ) {\n      // need to be careful here, only remove 'none' if it wasn't previously 'correct' or 'diff' (since it could be a second occurance)\n      tempWordList = tempWordList.filter(word => word.indexOf(item.letter.toUpperCase()) === -1);\n    } else if (\n      item.status === State.none &&\n      boardState.some(({ letter, status }) => (status === State.correct || status === State.diff) && letter === item.letter)\n    ) {\n      // edge case; remove words with duplicate letters if status is none but other status of diff or correct exists\n      // this will not handle words with 3 of the same letter correctly\n      tempWordList = tempWordList.filter(word => word.indexOf(item.letter.toUpperCase()) === word.lastIndexOf(item.letter.toUpperCase()));\n    }\n  });\n\n  return tempWordList;\n};\n\n// Retrieve (locally or from site) the word lists\nfindAllowedWords();\n\n// add listeners\naddListeners();\n"],
  "mappings": "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",
  "names": []
}
