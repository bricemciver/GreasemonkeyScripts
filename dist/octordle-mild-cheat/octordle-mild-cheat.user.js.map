{
  "version": 3,
  "sources": ["../../src/main/octordle-mild-cheat/octordle-mild-cheat.user.ts"],
  "sourcesContent": ["(() => {\n  enum State {\n    correct,\n    diff,\n    none,\n  }\n\n  type ProcessedCell = {\n    letter: string;\n    position: number;\n    status: State;\n  };\n\n  const wordBankRegEx = /\"([^\"]*\\bsonic\\b[^\"]*)\"/;\n  const allowedRegEx = /\"([^\"]*\\bcorky\\b[^\"]*)\"/;\n  const wordBankWords: string[] = [];\n  const allowedWords: string[] = [];\n\n  /**\n   * Set an item into storage\n   * @param key key to set\n   * @param value value to set\n   */\n  const setItem = (key: string, value: any) => {\n    window.sessionStorage.setItem(key, JSON.stringify(value));\n  };\n\n  /**\n   * Get an item from session storage\n   * @param key key to get\n   * @param defaultVal value to return if key doesn't exist\n   */\n  const getItem = (key: string, defaultVal: any) => {\n    const val = window.sessionStorage.getItem(key);\n    if (!val || val === 'undefined') return defaultVal;\n    try {\n      return JSON.parse(val);\n    } catch (e) {\n      return val;\n    }\n  };\n\n  const callback: MutationCallback = (mutationList, mutationObserver) => {\n    for (const mutation of mutationList) {\n      if (\n        mutation.addedNodes.length > 0 &&\n        mutation.addedNodes[0].nodeType === Node.ELEMENT_NODE &&\n        mutation.addedNodes[0].nodeName === 'SCRIPT'\n      ) {\n        const element = mutation.addedNodes[0] as HTMLScriptElement;\n        if (element.type === 'module') {\n          // Get the script\n          GM.xmlHttpRequest({\n            method: 'GET',\n            url: element.src,\n            onload(response) {\n              const text = response.responseText;\n              // get wordBank words\n              const wordBankMatches = RegExp(wordBankRegEx).exec(text);\n              if (wordBankMatches && wordBankMatches.length > 1) {\n                wordBankWords.push(...wordBankMatches[1].split(' ').map(word => word.toUpperCase()));\n              }\n              // get allowed words\n              const allowedMatches = RegExp(allowedRegEx).exec(text);\n              if (allowedMatches && allowedMatches.length > 1) {\n                allowedWords.push(...allowedMatches[1].split(' ').map(word => word.toUpperCase()));\n              }\n              // store in session so we don't retrieve every time\n              setItem('wordBank', wordBankWords);\n              setItem('allowed', allowedWords);\n            },\n          });\n          mutationObserver.disconnect();\n          break;\n        }\n      }\n    }\n  };\n\n  const findAllowedWords = () => {\n    // see if we need to retrieve\n    wordBankWords.push(...getItem('wordBank', []));\n    allowedWords.push(...getItem('allowed', []));\n    if (!wordBankWords.length || !allowedWords.length) {\n      // create a new instance of `MutationObserver` named `observer`,\n      // passing it a callback function\n      const observer = new MutationObserver(callback);\n\n      // call `observe()` on that MutationObserver instance,\n      // passing it the element to observe, and the options object\n      observer.observe(document, { subtree: true, childList: true });\n    }\n  };\n\n  const createWordlistDialog = () => {\n    const wordlist = document.createElement('dialog');\n    wordlist.classList.add('dialog');\n    wordlist.id = 'dialog';\n    const header = document.createElement('h2');\n    header.textContent = 'Word List';\n    wordlist.appendChild(header);\n    const listContainer = document.createElement('div');\n    listContainer.id = 'wordList';\n    wordlist.appendChild(listContainer);\n    return wordlist;\n  };\n\n  const createBoardList = (wordList: HTMLElement, board: string[], title: string) => {\n    const boardHeader = document.createElement('h2');\n    boardHeader.textContent = title;\n    wordList.appendChild(boardHeader);\n    const list = document.createElement('ul');\n    board.forEach(word => {\n      const listItem = document.createElement('li');\n      listItem.textContent = word;\n      if (wordBankWords.some(item => item === word)) {\n        listItem.attributeStyleMap.set('font-weight', 700);\n      }\n      list.appendChild(listItem);\n    });\n    wordList.appendChild(list);\n  };\n\n  const showWordlist = (...boards: string[][]) => {\n    let wordList = document.getElementById('wordList');\n    if (!wordList) {\n      // load new styles\n      const head = document.getElementsByTagName('head')[0];\n      const style = document.createElement('style');\n      head.appendChild(style);\n      style.setAttribute('type', 'text/css');\n      if (style.sheet) {\n        style.sheet.insertRule(`.dialog li {\n            display: block;\n            padding: 2px 0px;\n        }`);\n        style.sheet.insertRule(`.dialog ul {\n            list-style: none;\n            margin: 4px 0px;\n            position: relative;\n            padding: 0px;\n        }`);\n        style.sheet.insertRule(`.dialog h2 {\n            font-size: 0.6875rem;\n            line-height: 1.5;\n            letter-spacing: 0.08rem;\n            font-family: \"IBM Plex Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            font-weight: 700;\n            display: flex;\n            align-items: center;\n            border-radius: 5px;\n            outline: 0px;\n            width: 100%;\n            justify-content: flex-start;\n            transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n            text-decoration: none;\n            color: rgb(111, 126, 140);\n            margin-top: 8px;\n            text-transform: uppercase;\n        }`);\n        style.sheet.insertRule(`.dialog {\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            width: 300px;\n            padding: 20px;\n            background-color: #f2f2f2;\n            border: 1px solid #ccc;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n            font-family: Arial, sans-serif;\n            color: #333;\n            margin: 0 auto;\n        }`);\n      }\n\n      // create wordlist div\n      const helpDiv = createWordlistDialog();\n\n      // attach to body\n      document.body.appendChild(helpDiv);\n      wordList = document.getElementById('wordList');\n    }\n\n    if (wordList) {\n      wordList.innerHTML = '';\n    }\n\n    // add boards\n    boards.forEach((board, index) => {\n      if (wordList) {\n        createBoardList(wordList, board, `Board ${index + 1}`);\n      }\n    });\n\n    const dialog = document.querySelector<HTMLDialogElement>('dialog#dialog');\n    if (dialog) {\n      dialog.showModal();\n    }\n  };\n\n  const hideWordlist = () => {\n    const dialog = document.querySelector<HTMLDialogElement>('dialog#dialog');\n    if (dialog) {\n      dialog.close();\n    }\n  };\n\n  const processCell = (pos: number, element: HTMLDivElement): ProcessedCell | null => {\n    const letter = element.children[0].textContent ?? '';\n    if (element.classList.contains('exact-match')) {\n      // letter is in correct spot\n      return {\n        letter: letter.trim(),\n        position: pos,\n        status: State.correct,\n      };\n    }\n    if (element.classList.contains('word-match')) {\n      // letter is in word, not in that place\n      return {\n        letter: letter.trim(),\n        position: pos,\n        status: State.diff,\n      };\n    }\n    if (letter.length > 0 && letter === letter.toUpperCase() && letter !== letter.toLowerCase()) {\n      // if we have a letter, it doesn't belong\n      return {\n        letter: letter.trim(),\n        position: pos,\n        status: State.none,\n      };\n    }\n    return null;\n  };\n\n  const extractGameBoard = (boardNum: number) => {\n    const boardState: ProcessedCell[] = [];\n    const board = document.getElementById(`board-${boardNum}`);\n    // get rows\n    if (board) {\n      const rows = board.querySelectorAll<HTMLDivElement>(\"div[class~='board-row']\");\n      rows.forEach(row => {\n        // get all cells in a row\n        const cells = row.querySelectorAll<HTMLDivElement>(\"div[class~='letter']\");\n        let index = 0;\n        cells.forEach(cell => {\n          // get the letter, position, and status\n          const processedCell = processCell(index, cell);\n          if (processedCell !== null) {\n            boardState.push(processedCell);\n          }\n          index++;\n        });\n      });\n    }\n    return boardState;\n  };\n\n  const addListeners = () => {\n    document.addEventListener(\n      'keydown',\n      function (event) {\n        if (event.defaultPrevented) {\n          return; // Do nothing if the event was already processed\n        }\n        if (event.key === '?') {\n          event.preventDefault();\n          const boardArray = [];\n          for (let i = 1; i < 9; i++) {\n            boardArray.push(processGameBoard(extractGameBoard(i)));\n          }\n          showWordlist(...boardArray);\n        }\n        if (event.key === 'Escape') {\n          event.preventDefault();\n          hideWordlist();\n        }\n      },\n      true,\n    );\n  };\n\n  const sortProcessedCells = (cells: ProcessedCell[]): ProcessedCell[] => {\n    return cells.sort((a, b) => a.status - b.status);\n  };\n\n  const processGameBoard = (boardState: ProcessedCell[]) => {\n    let tempWordList = [...wordBankWords, ...allowedWords];\n\n    // sort boardState so all correct answers are handled first, then diff, then none\n    sortProcessedCells(boardState);\n\n    boardState.forEach(item => {\n      if (item.status === State.correct) {\n        // process all the correct answers first to shrink word list\n        tempWordList = tempWordList.filter(word => word.charAt(item.position).toUpperCase() === item.letter.toUpperCase());\n      } else if (item.status === State.diff) {\n        // now eliminate words where 'diff' items appear in that spot\n        // and where 'diff' item doesn't appear at all\n        tempWordList = tempWordList.filter(\n          word => word.charAt(item.position).toUpperCase() !== item.letter.toUpperCase() && word.indexOf(item.letter.toUpperCase()) !== -1,\n        );\n      } else if (\n        item.status === State.none &&\n        !boardState.some(({ letter, status }) => (status === State.correct || status === State.diff) && letter === item.letter)\n      ) {\n        // need to be careful here, only remove 'none' if it wasn't previously 'correct' or 'diff' (since it could be a second occurance)\n        tempWordList = tempWordList.filter(word => word.indexOf(item.letter.toUpperCase()) === -1);\n      } else if (\n        item.status === State.none &&\n        boardState.some(({ letter, status }) => (status === State.correct || status === State.diff) && letter === item.letter)\n      ) {\n        // edge case; remove words with duplicate letters if status is none but other status of diff or correct exists\n        // this will not handle words with 3 of the same letter correctly\n        tempWordList = tempWordList.filter(word => word.indexOf(item.letter.toUpperCase()) === word.lastIndexOf(item.letter.toUpperCase()));\n      }\n    });\n\n    return tempWordList;\n  };\n\n  // Retrieve (locally or from site) the word lists\n  findAllowedWords();\n\n  // add listeners\n  addListeners();\n})();\n"],
  "mappings": "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",
  "names": ["State"]
}
