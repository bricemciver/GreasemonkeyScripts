{
  "version": 3,
  "sources": ["../../src/main/amazon-goodreads-meta/amazon-goodreads-meta.user.ts"],
  "sourcesContent": ["namespace AmazonGoodreadsMeta {\n\n  const asinRegex = /^[A-Z0-9]{10}$/\n  const goodreadsRegex = /\"aggregateRating\":({\"@type\":\"AggregateRating\",\"ratingValue\":.*?,\"ratingCount\":.*?,\"reviewCount\":.*?})/\n\n  interface GoodreadsData {\n    rating: string;\n    ratingCount: string;\n    reviewCount: string;\n    bookUrl: string;\n  }\n\n  // Extract ASIN from Amazon URL or page\n  const extractASINs = () => {\n    const asins: string[] = [];\n    // Check if a multi-book page\n    for (const item of document.querySelectorAll<any>(\"bds-unified-book-faceout\")) {\n      if (item.__asin && asinRegex.test(item.__asin)) {\n        asins.push(item.__asin);\n      }\n    }\n\n    // Try to extract from page meta data\n    const asinMeta = document.querySelector<HTMLDivElement>('div[data-asin]');\n    if (asinMeta) {\n      const asin = asinMeta.getAttribute('data-asin');\n      if (asin && asinRegex.test(asin)) {\n        asins.push(asin);\n      }\n    }\n\n    return asins;\n  }\n\n  const fetchGoodreadsDataForASIN = (asin: string) => {\n    return GM.xmlHttpRequest({\n      method: 'GET',\n      url: `https://www.goodreads.com/book/isbn/${asin}`,\n    })\n  }\n\n  // Insert Goodreads data into the Amazon page\n  const insertGoodreadsData = (asin: string, goodreadsData: GoodreadsData) => {\n    // Create a styled container for Goodreads data\n    const container = document.createElement('div');\n    container.style.padding = '6px';\n    container.style.margin = '5px 0';\n    container.style.backgroundColor = '#f8f8f8';\n    container.style.border = '1px solid #ddd';\n    container.style.borderRadius = '3px';\n\n    // Create content\n    let content = `<div style=\"display: flex; flex-direction: column; gap: 4px; margin-bottom: 2px;\">\n          <span><img src=\"https://www.goodreads.com/favicon.ico\" style=\"width: 16px; height: 16px; margin-right: 3px;\" alt=\"Goodreads\" />\n          <a href=\"${goodreadsData.bookUrl}\" target=\"_blank\" style=\"font-weight: bold;\">Goodreads</a></span>`;\n\n    if (goodreadsData.rating) {\n      content += `<span style=\"color: #000\">${goodreadsData.rating} stars</span>`;\n    }\n\n    if (goodreadsData.ratingCount) {\n      content += `<span style=\"white-space: nowrap;\">${goodreadsData.ratingCount} ratings</span>`;\n    }\n\n    if (goodreadsData.reviewCount) {\n      content += `<span style=\"white-space: nowrap;\">${goodreadsData.reviewCount} reviews</span>`;\n    }\n\n    content += `</div>`;\n\n    container.innerHTML = content;\n\n    // Find insertion point on Amazon page\n    // Check if the page is a multi-book page\n    const currentBooks = document.querySelectorAll('bds-unified-book-faceout')\n    for (const book of currentBooks) {\n      // Book info is in the shadow root, so we need to access it\n      const bookInfoDiv = book.shadowRoot?.querySelector('div[data-csa-c-item-id]')\n      if (bookInfoDiv) {\n        const bookAsin = bookInfoDiv.getAttribute('data-csa-c-item-id');\n        if (bookAsin && bookAsin === asin) {\n          // insert as a multi-book\n          const ratings = book.shadowRoot?.querySelector('div.star-rating');\n          if (ratings) {\n            ratings.parentNode?.insertBefore(container, ratings.nextSibling);\n            break;\n          }\n        }\n      }\n    }\n    // insert as a single book\n    const reviewElement = document.getElementById('reviewFeatureGroup')\n    if (reviewElement) {\n        reviewElement.parentNode?.insertBefore(container, reviewElement.nextSibling);\n    }\n  }\n\n  const processAsins = async (asins: string[]) => {\n    for (const asin of asins) {\n      try {\n        const goodreadsData = await fetchGoodreadsDataForASIN(asin);\n        const url = goodreadsData.finalUrl;\n        const aggregateMatch = goodreadsRegex.exec(goodreadsData.responseText)\n        if (aggregateMatch && aggregateMatch.length > 1) {\n          const aggregateData = JSON.parse(aggregateMatch[1]);\n          const goodreadsData: GoodreadsData = {\n            rating: aggregateData.ratingValue,\n            ratingCount: aggregateData.ratingCount,\n            reviewCount: aggregateData.reviewCount,\n            bookUrl: url\n          };\n          insertGoodreadsData(asin, goodreadsData);\n        }\n      } catch (error) {\n        console.error('Error fetching Goodreads data:', error);\n      }\n    }\n  }\n\n  // Main function to initialize the script\n  export const init = async () => {\n    const asins = extractASINs();\n    if (!asins || asins.length == 0) return;\n\n    try {\n      await processAsins(asins);\n    } catch (error) {\n      console.error('Error in Goodreads script:', error);\n    }\n  }\n}\n\nAmazonGoodreadsMeta.init();\n"],
  "mappings": "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",
  "names": ["AmazonGoodreadsMeta", "goodreadsData"]
}
