{
  "version": 3,
  "sources": ["../../src/main/amazon-goodreads-meta/amazon-goodreads-meta.user.ts"],
  "sourcesContent": ["const asinRegex = /\\/([A-Z0-9]{10})/;\n\nconst findASIN = (): string[] => {\n  const asinArray = [];\n  const array = asinRegex.exec(document.location.pathname);\n  const asin = array && array.length > 1 ? array[1] : '';\n  // eslint-disable-next-line no-console\n  console.log(`ASIN in pathname: ${asin}`);\n  // determine if book\n  const dp = document.getElementById('dp');\n  if (dp?.className.includes('book')) {\n    asinArray.push(asin);\n  } else {\n    // see if we are on a page with multiple books\n    const images = document.getElementsByTagName('img');\n\n    const coverImages = Array.from(images).filter(item => item.classList.contains('cover-image'));\n    coverImages.forEach(image => {\n      const parentElem = image.parentElement;\n      if (parentElem instanceof HTMLAnchorElement) {\n        const link = parentElem.href;\n        const ciArray = asinRegex.exec(link);\n        const ciAsin = ciArray && ciArray.length > 1 ? ciArray[1] : '';\n        // eslint-disable-next-line no-console\n        console.log(`ASIN on book image: ${ciAsin}`);\n        asinArray.push(ciAsin);\n      }\n    });\n  }\n\n  return asinArray;\n};\n\nconst findInsertPoint = (): Element[] => {\n  // on book page\n  const insertPoint: Element[] = [];\n  const reviewElement = document.getElementById('averageCustomerReviews');\n  if (reviewElement) {\n    insertPoint.push(reviewElement);\n  } else {\n    // check for SHOP NOW button with review stars above. Return array\n    const reviewArray = document.getElementsByClassName('pf-image-w');\n    insertPoint.push(...Array.from(reviewArray));\n  }\n  return insertPoint;\n};\n\nconst insertElement = (isbn: string, insertPoint: Element): void => {\n  GM.xmlHttpRequest({\n    method: 'GET',\n    url: `https://www.goodreads.com/book/isbn/${isbn}`,\n    onload(response) {\n      const node = new DOMParser().parseFromString(response.responseText, 'text/html');\n      // get styles we need\n      const head = document.getElementsByTagName('head')[0];\n      const styles = Array.from(node.getElementsByTagName('link')).filter(item => item.rel === 'stylesheet');\n      styles.forEach(item => {\n        // add goodreads to links\n        item.href = item.href.replace('amazon', 'goodreads');\n        head.appendChild(item);\n      });\n      const meta = node.getElementById('ReviewsSection');\n      if (meta) {\n        // find our div\n        const rating = meta.querySelector('div.RatingStatistics');\n        if (rating) {\n          // replace links\n          Array.from(rating.getElementsByTagName('a')).forEach(item => {\n            item.href = response.finalUrl + item.href.replace(item.baseURI, '');\n            return item;\n          });\n          // replace styles\n          Array.from(rating.getElementsByTagName('span')).forEach(item => {\n            item.classList.replace('RatingStar--medium', 'RatingStar--small');\n            item.classList.replace('RatingStars__medium', 'RatingStars__small');\n          });\n          Array.from(rating.getElementsByTagName('div'))\n            .filter(item => item.classList.contains('RatingStatistics__rating'))\n            .forEach(item => {\n              item.style.marginBottom = '-0.8rem';\n              item.style.fontSize = '2.2rem';\n            });\n          // create label div\n          const labelCol = document.createElement('div');\n          labelCol.classList.add('a-column', 'a-span12', 'a-spacing-top-small');\n          const labelRow = document.createElement('div');\n          labelRow.classList.add('a-row', 'a-spacing-small');\n          labelRow.textContent = 'Goodreads';\n          const lineBreak = document.createElement('br');\n          labelCol.appendChild(labelRow);\n          labelRow.appendChild(lineBreak);\n          labelRow.appendChild(rating);\n          insertPoint.appendChild(labelCol);\n        }\n      }\n    },\n  });\n};\n\nconst main = (): void => {\n  const ASIN = findASIN();\n  const insertPoint = findInsertPoint();\n  for (let i = 0; i < ASIN.length && i < insertPoint.length; i++) {\n    const insertPointElement = insertPoint[i].parentElement;\n    if (insertPointElement) {\n      insertElement(ASIN[i], insertPointElement);\n    }\n  }\n};\n\nmain();\n"],
  "mappings": "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",
  "names": []
}
