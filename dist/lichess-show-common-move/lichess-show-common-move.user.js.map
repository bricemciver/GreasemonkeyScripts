{
  "version": 3,
  "sources": ["../../node_modules/chessops/src/types.ts", "../../node_modules/chessops/src/util.ts", "../../node_modules/chessops/src/squareSet.ts", "../../node_modules/chessops/src/attacks.ts", "../../node_modules/chessops/src/board.ts", "../../node_modules/chessops/src/setup.ts", "../../node_modules/@badrap/result/src/index.ts", "../../node_modules/chessops/src/chess.ts", "../../node_modules/chessops/src/fen.ts", "../../node_modules/chessops/src/san.ts", "../../node_modules/chessops/src/variant.ts", "../../node_modules/chessops/src/pgn.ts", "../../node_modules/chessops/src/index.ts", "../../src/main/lichess-show-common-move/lichess-show-common-move.user.ts"],
<<<<<<< HEAD
  "sourcesContent": ["export const FILE_NAMES = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] as const;\n\nexport type FileName = (typeof FILE_NAMES)[number];\n\nexport const RANK_NAMES = ['1', '2', '3', '4', '5', '6', '7', '8'] as const;\n\nexport type RankName = (typeof RANK_NAMES)[number];\n\nexport type Square = number;\n\nexport type SquareName = `${FileName}${RankName}`;\n\n/**\n * Indexable by square indices.\n */\nexport type BySquare<T> = T[];\n\nexport const COLORS = ['white', 'black'] as const;\n\nexport type Color = (typeof COLORS)[number];\n\n/**\n * Indexable by `white` and `black`.\n */\nexport type ByColor<T> = {\n  [color in Color]: T;\n};\n\nexport const ROLES = ['pawn', 'knight', 'bishop', 'rook', 'queen', 'king'] as const;\n\nexport type Role = (typeof ROLES)[number];\n\n/**\n * Indexable by `pawn`, `knight`, `bishop`, `rook`, `queen`, and `king`.\n */\nexport type ByRole<T> = {\n  [role in Role]: T;\n};\n\nexport const CASTLING_SIDES = ['a', 'h'] as const;\n\nexport type CastlingSide = (typeof CASTLING_SIDES)[number];\n\n/**\n * Indexable by `a` and `h`.\n */\nexport type ByCastlingSide<T> = {\n  [side in CastlingSide]: T;\n};\n\nexport interface Piece {\n  role: Role;\n  color: Color;\n  promoted?: boolean;\n}\n\nexport interface NormalMove {\n  from: Square;\n  to: Square;\n  promotion?: Role;\n}\n\nexport interface DropMove {\n  role: Role;\n  to: Square;\n}\n\nexport type Move = NormalMove | DropMove;\n\nexport const isDrop = (v: Move): v is DropMove => 'role' in v;\n\nexport const isNormal = (v: Move): v is NormalMove => 'from' in v;\n\nexport const RULES = [\n  'chess',\n  'antichess',\n  'kingofthehill',\n  '3check',\n  'atomic',\n  'horde',\n  'racingkings',\n  'crazyhouse',\n] as const;\n\nexport type Rules = (typeof RULES)[number];\n\nexport interface Outcome {\n  winner: Color | undefined;\n}\n", "import {\n  CastlingSide,\n  Color,\n  FILE_NAMES,\n  isDrop,\n  isNormal,\n  Move,\n  RANK_NAMES,\n  Role,\n  Square,\n  SquareName,\n} from './types.js';\n\nexport const defined = <A>(v: A | undefined): v is A => v !== undefined;\n\nexport const opposite = (color: Color): Color => (color === 'white' ? 'black' : 'white');\n\nexport const squareRank = (square: Square): number => square >> 3;\n\nexport const squareFile = (square: Square): number => square & 0x7;\n\nexport const squareFromCoords = (file: number, rank: number): Square | undefined =>\n  0 <= file && file < 8 && 0 <= rank && rank < 8 ? file + 8 * rank : undefined;\n\nexport const roleToChar = (role: Role): string => {\n  switch (role) {\n    case 'pawn':\n      return 'p';\n    case 'knight':\n      return 'n';\n    case 'bishop':\n      return 'b';\n    case 'rook':\n      return 'r';\n    case 'queen':\n      return 'q';\n    case 'king':\n      return 'k';\n  }\n};\n\nexport function charToRole(ch: 'p' | 'n' | 'b' | 'r' | 'q' | 'k' | 'P' | 'N' | 'B' | 'R' | 'Q' | 'K'): Role;\nexport function charToRole(ch: string): Role | undefined;\nexport function charToRole(ch: string): Role | undefined {\n  switch (ch.toLowerCase()) {\n    case 'p':\n      return 'pawn';\n    case 'n':\n      return 'knight';\n    case 'b':\n      return 'bishop';\n    case 'r':\n      return 'rook';\n    case 'q':\n      return 'queen';\n    case 'k':\n      return 'king';\n    default:\n      return;\n  }\n}\n\nexport function parseSquare(str: SquareName): Square;\nexport function parseSquare(str: string): Square | undefined;\nexport function parseSquare(str: string): Square | undefined {\n  if (str.length !== 2) return;\n  return squareFromCoords(str.charCodeAt(0) - 'a'.charCodeAt(0), str.charCodeAt(1) - '1'.charCodeAt(0));\n}\n\nexport const makeSquare = (square: Square): SquareName =>\n  (FILE_NAMES[squareFile(square)] + RANK_NAMES[squareRank(square)]) as SquareName;\n\nexport const parseUci = (str: string): Move | undefined => {\n  if (str[1] === '@' && str.length === 4) {\n    const role = charToRole(str[0]);\n    const to = parseSquare(str.slice(2));\n    if (role && defined(to)) return { role, to };\n  } else if (str.length === 4 || str.length === 5) {\n    const from = parseSquare(str.slice(0, 2));\n    const to = parseSquare(str.slice(2, 4));\n    let promotion: Role | undefined;\n    if (str.length === 5) {\n      promotion = charToRole(str[4]);\n      if (!promotion) return;\n    }\n    if (defined(from) && defined(to)) return { from, to, promotion };\n  }\n  return;\n};\n\nexport const moveEquals = (left: Move, right: Move): boolean => {\n  if (left.to !== right.to) return false;\n  if (isDrop(left)) return isDrop(right) && left.role === right.role;\n  else return isNormal(right) && left.from === right.from && left.promotion === right.promotion;\n};\n\n/**\n * Converts a move to UCI notation, like `g1f3` for a normal move,\n * `a7a8q` for promotion to a queen, and `Q@f7` for a Crazyhouse drop.\n */\nexport const makeUci = (move: Move): string =>\n  isDrop(move)\n    ? `${roleToChar(move.role).toUpperCase()}@${makeSquare(move.to)}`\n    : makeSquare(move.from) + makeSquare(move.to) + (move.promotion ? roleToChar(move.promotion) : '');\n\nexport const kingCastlesTo = (color: Color, side: CastlingSide): Square =>\n  color === 'white' ? (side === 'a' ? 2 : 6) : side === 'a' ? 58 : 62;\n\nexport const rookCastlesTo = (color: Color, side: CastlingSide): Square =>\n  color === 'white' ? (side === 'a' ? 3 : 5) : side === 'a' ? 59 : 61;\n", "import { Color, Square } from './types.js';\n\nconst popcnt32 = (n: number): number => {\n  n = n - ((n >>> 1) & 0x5555_5555);\n  n = (n & 0x3333_3333) + ((n >>> 2) & 0x3333_3333);\n  return Math.imul((n + (n >>> 4)) & 0x0f0f_0f0f, 0x0101_0101) >> 24;\n};\n\nconst bswap32 = (n: number): number => {\n  n = ((n >>> 8) & 0x00ff_00ff) | ((n & 0x00ff_00ff) << 8);\n  return ((n >>> 16) & 0xffff) | ((n & 0xffff) << 16);\n};\n\nconst rbit32 = (n: number): number => {\n  n = ((n >>> 1) & 0x5555_5555) | ((n & 0x5555_5555) << 1);\n  n = ((n >>> 2) & 0x3333_3333) | ((n & 0x3333_3333) << 2);\n  n = ((n >>> 4) & 0x0f0f_0f0f) | ((n & 0x0f0f_0f0f) << 4);\n  return bswap32(n);\n};\n\n/**\n * An immutable set of squares, implemented as a bitboard.\n */\nexport class SquareSet implements Iterable<Square> {\n  readonly lo: number;\n  readonly hi: number;\n\n  constructor(lo: number, hi: number) {\n    this.lo = lo | 0;\n    this.hi = hi | 0;\n  }\n\n  static fromSquare(square: Square): SquareSet {\n    return square >= 32 ? new SquareSet(0, 1 << (square - 32)) : new SquareSet(1 << square, 0);\n  }\n\n  static fromRank(rank: number): SquareSet {\n    return new SquareSet(0xff, 0).shl64(8 * rank);\n  }\n\n  static fromFile(file: number): SquareSet {\n    return new SquareSet(0x0101_0101 << file, 0x0101_0101 << file);\n  }\n\n  static empty(): SquareSet {\n    return new SquareSet(0, 0);\n  }\n\n  static full(): SquareSet {\n    return new SquareSet(0xffff_ffff, 0xffff_ffff);\n  }\n\n  static corners(): SquareSet {\n    return new SquareSet(0x81, 0x8100_0000);\n  }\n\n  static center(): SquareSet {\n    return new SquareSet(0x1800_0000, 0x18);\n  }\n\n  static backranks(): SquareSet {\n    return new SquareSet(0xff, 0xff00_0000);\n  }\n\n  static backrank(color: Color): SquareSet {\n    return color === 'white' ? new SquareSet(0xff, 0) : new SquareSet(0, 0xff00_0000);\n  }\n\n  static lightSquares(): SquareSet {\n    return new SquareSet(0x55aa_55aa, 0x55aa_55aa);\n  }\n\n  static darkSquares(): SquareSet {\n    return new SquareSet(0xaa55_aa55, 0xaa55_aa55);\n  }\n\n  complement(): SquareSet {\n    return new SquareSet(~this.lo, ~this.hi);\n  }\n\n  xor(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo ^ other.lo, this.hi ^ other.hi);\n  }\n\n  union(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo | other.lo, this.hi | other.hi);\n  }\n\n  intersect(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo & other.lo, this.hi & other.hi);\n  }\n\n  diff(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo & ~other.lo, this.hi & ~other.hi);\n  }\n\n  intersects(other: SquareSet): boolean {\n    return this.intersect(other).nonEmpty();\n  }\n\n  isDisjoint(other: SquareSet): boolean {\n    return this.intersect(other).isEmpty();\n  }\n\n  supersetOf(other: SquareSet): boolean {\n    return other.diff(this).isEmpty();\n  }\n\n  subsetOf(other: SquareSet): boolean {\n    return this.diff(other).isEmpty();\n  }\n\n  shr64(shift: number): SquareSet {\n    if (shift >= 64) return SquareSet.empty();\n    if (shift >= 32) return new SquareSet(this.hi >>> (shift - 32), 0);\n    if (shift > 0) return new SquareSet((this.lo >>> shift) ^ (this.hi << (32 - shift)), this.hi >>> shift);\n    return this;\n  }\n\n  shl64(shift: number): SquareSet {\n    if (shift >= 64) return SquareSet.empty();\n    if (shift >= 32) return new SquareSet(0, this.lo << (shift - 32));\n    if (shift > 0) return new SquareSet(this.lo << shift, (this.hi << shift) ^ (this.lo >>> (32 - shift)));\n    return this;\n  }\n\n  bswap64(): SquareSet {\n    return new SquareSet(bswap32(this.hi), bswap32(this.lo));\n  }\n\n  rbit64(): SquareSet {\n    return new SquareSet(rbit32(this.hi), rbit32(this.lo));\n  }\n\n  minus64(other: SquareSet): SquareSet {\n    const lo = this.lo - other.lo;\n    const c = ((lo & other.lo & 1) + (other.lo >>> 1) + (lo >>> 1)) >>> 31;\n    return new SquareSet(lo, this.hi - (other.hi + c));\n  }\n\n  equals(other: SquareSet): boolean {\n    return this.lo === other.lo && this.hi === other.hi;\n  }\n\n  size(): number {\n    return popcnt32(this.lo) + popcnt32(this.hi);\n  }\n\n  isEmpty(): boolean {\n    return this.lo === 0 && this.hi === 0;\n  }\n\n  nonEmpty(): boolean {\n    return this.lo !== 0 || this.hi !== 0;\n  }\n\n  has(square: Square): boolean {\n    return (square >= 32 ? this.hi & (1 << (square - 32)) : this.lo & (1 << square)) !== 0;\n  }\n\n  set(square: Square, on: boolean): SquareSet {\n    return on ? this.with(square) : this.without(square);\n  }\n\n  with(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi | (1 << (square - 32)))\n      : new SquareSet(this.lo | (1 << square), this.hi);\n  }\n\n  without(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi & ~(1 << (square - 32)))\n      : new SquareSet(this.lo & ~(1 << square), this.hi);\n  }\n\n  toggle(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi ^ (1 << (square - 32)))\n      : new SquareSet(this.lo ^ (1 << square), this.hi);\n  }\n\n  last(): Square | undefined {\n    if (this.hi !== 0) return 63 - Math.clz32(this.hi);\n    if (this.lo !== 0) return 31 - Math.clz32(this.lo);\n    return;\n  }\n\n  first(): Square | undefined {\n    if (this.lo !== 0) return 31 - Math.clz32(this.lo & -this.lo);\n    if (this.hi !== 0) return 63 - Math.clz32(this.hi & -this.hi);\n    return;\n  }\n\n  withoutFirst(): SquareSet {\n    if (this.lo !== 0) return new SquareSet(this.lo & (this.lo - 1), this.hi);\n    return new SquareSet(0, this.hi & (this.hi - 1));\n  }\n\n  moreThanOne(): boolean {\n    return (this.hi !== 0 && this.lo !== 0) || (this.lo & (this.lo - 1)) !== 0 || (this.hi & (this.hi - 1)) !== 0;\n  }\n\n  singleSquare(): Square | undefined {\n    return this.moreThanOne() ? undefined : this.last();\n  }\n\n  *[Symbol.iterator](): Iterator<Square> {\n    let lo = this.lo;\n    let hi = this.hi;\n    while (lo !== 0) {\n      const idx = 31 - Math.clz32(lo & -lo);\n      lo ^= 1 << idx;\n      yield idx;\n    }\n    while (hi !== 0) {\n      const idx = 31 - Math.clz32(hi & -hi);\n      hi ^= 1 << idx;\n      yield 32 + idx;\n    }\n  }\n\n  *reversed(): Iterable<Square> {\n    let lo = this.lo;\n    let hi = this.hi;\n    while (hi !== 0) {\n      const idx = 31 - Math.clz32(hi);\n      hi ^= 1 << idx;\n      yield 32 + idx;\n    }\n    while (lo !== 0) {\n      const idx = 31 - Math.clz32(lo);\n      lo ^= 1 << idx;\n      yield idx;\n    }\n  }\n}\n", "/**\n * Compute attacks and rays.\n *\n * These are low-level functions that can be used to implement chess rules.\n *\n * Implementation notes: Sliding attacks are computed using\n * [Hyperbola Quintessence](https://www.chessprogramming.org/Hyperbola_Quintessence).\n * Magic Bitboards would deliver slightly faster lookups, but also require\n * initializing considerably larger attack tables. On the web, initialization\n * time is important, so the chosen method may strike a better balance.\n *\n * @packageDocumentation\n */\n\nimport { SquareSet } from './squareSet.js';\nimport { BySquare, Color, Piece, Square } from './types.js';\nimport { squareFile, squareRank } from './util.js';\n\nconst computeRange = (square: Square, deltas: number[]): SquareSet => {\n  let range = SquareSet.empty();\n  for (const delta of deltas) {\n    const sq = square + delta;\n    if (0 <= sq && sq < 64 && Math.abs(squareFile(square) - squareFile(sq)) <= 2) {\n      range = range.with(sq);\n    }\n  }\n  return range;\n};\n\nconst tabulate = <T>(f: (square: Square) => T): BySquare<T> => {\n  const table = [];\n  for (let square = 0; square < 64; square++) table[square] = f(square);\n  return table;\n};\n\nconst KING_ATTACKS = tabulate(sq => computeRange(sq, [-9, -8, -7, -1, 1, 7, 8, 9]));\nconst KNIGHT_ATTACKS = tabulate(sq => computeRange(sq, [-17, -15, -10, -6, 6, 10, 15, 17]));\nconst PAWN_ATTACKS = {\n  white: tabulate(sq => computeRange(sq, [7, 9])),\n  black: tabulate(sq => computeRange(sq, [-7, -9])),\n};\n\n/**\n * Gets squares attacked or defended by a king on `square`.\n */\nexport const kingAttacks = (square: Square): SquareSet => KING_ATTACKS[square];\n\n/**\n * Gets squares attacked or defended by a knight on `square`.\n */\nexport const knightAttacks = (square: Square): SquareSet => KNIGHT_ATTACKS[square];\n\n/**\n * Gets squares attacked or defended by a pawn of the given `color`\n * on `square`.\n */\nexport const pawnAttacks = (color: Color, square: Square): SquareSet => PAWN_ATTACKS[color][square];\n\nconst FILE_RANGE = tabulate(sq => SquareSet.fromFile(squareFile(sq)).without(sq));\nconst RANK_RANGE = tabulate(sq => SquareSet.fromRank(squareRank(sq)).without(sq));\n\nconst DIAG_RANGE = tabulate(sq => {\n  const diag = new SquareSet(0x0804_0201, 0x8040_2010);\n  const shift = 8 * (squareRank(sq) - squareFile(sq));\n  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);\n});\n\nconst ANTI_DIAG_RANGE = tabulate(sq => {\n  const diag = new SquareSet(0x1020_4080, 0x0102_0408);\n  const shift = 8 * (squareRank(sq) + squareFile(sq) - 7);\n  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);\n});\n\nconst hyperbola = (bit: SquareSet, range: SquareSet, occupied: SquareSet): SquareSet => {\n  let forward = occupied.intersect(range);\n  let reverse = forward.bswap64(); // Assumes no more than 1 bit per rank\n  forward = forward.minus64(bit);\n  reverse = reverse.minus64(bit.bswap64());\n  return forward.xor(reverse.bswap64()).intersect(range);\n};\n\nconst fileAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  hyperbola(SquareSet.fromSquare(square), FILE_RANGE[square], occupied);\n\nconst rankAttacks = (square: Square, occupied: SquareSet): SquareSet => {\n  const range = RANK_RANGE[square];\n  let forward = occupied.intersect(range);\n  let reverse = forward.rbit64();\n  forward = forward.minus64(SquareSet.fromSquare(square));\n  reverse = reverse.minus64(SquareSet.fromSquare(63 - square));\n  return forward.xor(reverse.rbit64()).intersect(range);\n};\n\n/**\n * Gets squares attacked or defended by a bishop on `square`, given `occupied`\n * squares.\n */\nexport const bishopAttacks = (square: Square, occupied: SquareSet): SquareSet => {\n  const bit = SquareSet.fromSquare(square);\n  return hyperbola(bit, DIAG_RANGE[square], occupied).xor(hyperbola(bit, ANTI_DIAG_RANGE[square], occupied));\n};\n\n/**\n * Gets squares attacked or defended by a rook on `square`, given `occupied`\n * squares.\n */\nexport const rookAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  fileAttacks(square, occupied).xor(rankAttacks(square, occupied));\n\n/**\n * Gets squares attacked or defended by a queen on `square`, given `occupied`\n * squares.\n */\nexport const queenAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  bishopAttacks(square, occupied).xor(rookAttacks(square, occupied));\n\n/**\n * Gets squares attacked or defended by a `piece` on `square`, given\n * `occupied` squares.\n */\nexport const attacks = (piece: Piece, square: Square, occupied: SquareSet): SquareSet => {\n  switch (piece.role) {\n    case 'pawn':\n      return pawnAttacks(piece.color, square);\n    case 'knight':\n      return knightAttacks(square);\n    case 'bishop':\n      return bishopAttacks(square, occupied);\n    case 'rook':\n      return rookAttacks(square, occupied);\n    case 'queen':\n      return queenAttacks(square, occupied);\n    case 'king':\n      return kingAttacks(square);\n  }\n};\n\n/**\n * Gets all squares of the rank, file or diagonal with the two squares\n * `a` and `b`, or an empty set if they are not aligned.\n */\nexport const ray = (a: Square, b: Square): SquareSet => {\n  const other = SquareSet.fromSquare(b);\n  if (RANK_RANGE[a].intersects(other)) return RANK_RANGE[a].with(a);\n  if (ANTI_DIAG_RANGE[a].intersects(other)) return ANTI_DIAG_RANGE[a].with(a);\n  if (DIAG_RANGE[a].intersects(other)) return DIAG_RANGE[a].with(a);\n  if (FILE_RANGE[a].intersects(other)) return FILE_RANGE[a].with(a);\n  return SquareSet.empty();\n};\n\n/**\n * Gets all squares between `a` and `b` (bounds not included), or an empty set\n * if they are not on the same rank, file or diagonal.\n */\nexport const between = (a: Square, b: Square): SquareSet =>\n  ray(a, b)\n    .intersect(SquareSet.full().shl64(a).xor(SquareSet.full().shl64(b)))\n    .withoutFirst();\n", "import { SquareSet } from './squareSet.js';\nimport { ByColor, ByRole, Color, COLORS, Piece, Role, ROLES, Square } from './types.js';\n\n/**\n * Piece positions on a board.\n *\n * Properties are sets of squares, like `board.occupied` for all occupied\n * squares, `board[color]` for all pieces of that color, and `board[role]`\n * for all pieces of that role. When modifying the properties directly, take\n * care to keep them consistent.\n */\nexport class Board implements Iterable<[Square, Piece]>, ByRole<SquareSet>, ByColor<SquareSet> {\n  /**\n   * All occupied squares.\n   */\n  occupied: SquareSet;\n  /**\n   * All squares occupied by pieces known to be promoted. This information is\n   * relevant in chess variants like Crazyhouse.\n   */\n  promoted: SquareSet;\n\n  white: SquareSet;\n  black: SquareSet;\n\n  pawn: SquareSet;\n  knight: SquareSet;\n  bishop: SquareSet;\n  rook: SquareSet;\n  queen: SquareSet;\n  king: SquareSet;\n\n  private constructor() {}\n\n  static default(): Board {\n    const board = new Board();\n    board.reset();\n    return board;\n  }\n\n  /**\n   * Resets all pieces to the default starting position for standard chess.\n   */\n  reset(): void {\n    this.occupied = new SquareSet(0xffff, 0xffff_0000);\n    this.promoted = SquareSet.empty();\n    this.white = new SquareSet(0xffff, 0);\n    this.black = new SquareSet(0, 0xffff_0000);\n    this.pawn = new SquareSet(0xff00, 0x00ff_0000);\n    this.knight = new SquareSet(0x42, 0x4200_0000);\n    this.bishop = new SquareSet(0x24, 0x2400_0000);\n    this.rook = new SquareSet(0x81, 0x8100_0000);\n    this.queen = new SquareSet(0x8, 0x0800_0000);\n    this.king = new SquareSet(0x10, 0x1000_0000);\n  }\n\n  static empty(): Board {\n    const board = new Board();\n    board.clear();\n    return board;\n  }\n\n  clear(): void {\n    this.occupied = SquareSet.empty();\n    this.promoted = SquareSet.empty();\n    for (const color of COLORS) this[color] = SquareSet.empty();\n    for (const role of ROLES) this[role] = SquareSet.empty();\n  }\n\n  clone(): Board {\n    const board = new Board();\n    board.occupied = this.occupied;\n    board.promoted = this.promoted;\n    for (const color of COLORS) board[color] = this[color];\n    for (const role of ROLES) board[role] = this[role];\n    return board;\n  }\n\n  getColor(square: Square): Color | undefined {\n    if (this.white.has(square)) return 'white';\n    if (this.black.has(square)) return 'black';\n    return;\n  }\n\n  getRole(square: Square): Role | undefined {\n    for (const role of ROLES) {\n      if (this[role].has(square)) return role;\n    }\n    return;\n  }\n\n  get(square: Square): Piece | undefined {\n    const color = this.getColor(square);\n    if (!color) return;\n    const role = this.getRole(square)!;\n    const promoted = this.promoted.has(square);\n    return { color, role, promoted };\n  }\n\n  /**\n   * Removes and returns the piece from the given `square`, if any.\n   */\n  take(square: Square): Piece | undefined {\n    const piece = this.get(square);\n    if (piece) {\n      this.occupied = this.occupied.without(square);\n      this[piece.color] = this[piece.color].without(square);\n      this[piece.role] = this[piece.role].without(square);\n      if (piece.promoted) this.promoted = this.promoted.without(square);\n    }\n    return piece;\n  }\n\n  /**\n   * Put `piece` onto `square`, potentially replacing an existing piece.\n   * Returns the existing piece, if any.\n   */\n  set(square: Square, piece: Piece): Piece | undefined {\n    const old = this.take(square);\n    this.occupied = this.occupied.with(square);\n    this[piece.color] = this[piece.color].with(square);\n    this[piece.role] = this[piece.role].with(square);\n    if (piece.promoted) this.promoted = this.promoted.with(square);\n    return old;\n  }\n\n  has(square: Square): boolean {\n    return this.occupied.has(square);\n  }\n\n  *[Symbol.iterator](): Iterator<[Square, Piece]> {\n    for (const square of this.occupied) {\n      yield [square, this.get(square)!];\n    }\n  }\n\n  pieces(color: Color, role: Role): SquareSet {\n    return this[color].intersect(this[role]);\n  }\n\n  rooksAndQueens(): SquareSet {\n    return this.rook.union(this.queen);\n  }\n\n  bishopsAndQueens(): SquareSet {\n    return this.bishop.union(this.queen);\n  }\n\n  /**\n   * Finds the unique king of the given `color`, if any.\n   */\n  kingOf(color: Color): Square | undefined {\n    return this.pieces(color, 'king').singleSquare();\n  }\n}\n\nexport const boardEquals = (left: Board, right: Board): boolean =>\n  left.white.equals(right.white)\n  && left.promoted.equals(right.promoted)\n  && ROLES.every(role => left[role].equals(right[role]));\n", "import { Board, boardEquals } from './board.js';\nimport { SquareSet } from './squareSet.js';\nimport { ByColor, ByRole, Color, Role, ROLES, Square } from './types.js';\n\nexport class MaterialSide implements ByRole<number> {\n  pawn: number;\n  knight: number;\n  bishop: number;\n  rook: number;\n  queen: number;\n  king: number;\n\n  private constructor() {}\n\n  static empty(): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = 0;\n    return m;\n  }\n\n  static fromBoard(board: Board, color: Color): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = board.pieces(color, role).size();\n    return m;\n  }\n\n  clone(): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role];\n    return m;\n  }\n\n  equals(other: MaterialSide): boolean {\n    return ROLES.every(role => this[role] === other[role]);\n  }\n\n  add(other: MaterialSide): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role] + other[role];\n    return m;\n  }\n\n  subtract(other: MaterialSide): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role] - other[role];\n    return m;\n  }\n\n  nonEmpty(): boolean {\n    return ROLES.some(role => this[role] > 0);\n  }\n\n  isEmpty(): boolean {\n    return !this.nonEmpty();\n  }\n\n  hasPawns(): boolean {\n    return this.pawn > 0;\n  }\n\n  hasNonPawns(): boolean {\n    return this.knight > 0 || this.bishop > 0 || this.rook > 0 || this.queen > 0 || this.king > 0;\n  }\n\n  size(): number {\n    return this.pawn + this.knight + this.bishop + this.rook + this.queen + this.king;\n  }\n}\n\nexport class Material implements ByColor<MaterialSide> {\n  constructor(\n    public white: MaterialSide,\n    public black: MaterialSide,\n  ) {}\n\n  static empty(): Material {\n    return new Material(MaterialSide.empty(), MaterialSide.empty());\n  }\n\n  static fromBoard(board: Board): Material {\n    return new Material(MaterialSide.fromBoard(board, 'white'), MaterialSide.fromBoard(board, 'black'));\n  }\n\n  clone(): Material {\n    return new Material(this.white.clone(), this.black.clone());\n  }\n\n  equals(other: Material): boolean {\n    return this.white.equals(other.white) && this.black.equals(other.black);\n  }\n\n  add(other: Material): Material {\n    return new Material(this.white.add(other.white), this.black.add(other.black));\n  }\n\n  subtract(other: Material): Material {\n    return new Material(this.white.subtract(other.white), this.black.subtract(other.black));\n  }\n\n  count(role: Role): number {\n    return this.white[role] + this.black[role];\n  }\n\n  size(): number {\n    return this.white.size() + this.black.size();\n  }\n\n  isEmpty(): boolean {\n    return this.white.isEmpty() && this.black.isEmpty();\n  }\n\n  nonEmpty(): boolean {\n    return !this.isEmpty();\n  }\n\n  hasPawns(): boolean {\n    return this.white.hasPawns() || this.black.hasPawns();\n  }\n\n  hasNonPawns(): boolean {\n    return this.white.hasNonPawns() || this.black.hasNonPawns();\n  }\n}\n\nexport class RemainingChecks implements ByColor<number> {\n  constructor(\n    public white: number,\n    public black: number,\n  ) {}\n\n  static default(): RemainingChecks {\n    return new RemainingChecks(3, 3);\n  }\n\n  clone(): RemainingChecks {\n    return new RemainingChecks(this.white, this.black);\n  }\n\n  equals(other: RemainingChecks): boolean {\n    return this.white === other.white && this.black === other.black;\n  }\n}\n\n/**\n * A not necessarily legal chess or chess variant position.\n */\nexport interface Setup {\n  board: Board;\n  pockets: Material | undefined;\n  turn: Color;\n  castlingRights: SquareSet;\n  epSquare: Square | undefined;\n  remainingChecks: RemainingChecks | undefined;\n  halfmoves: number;\n  fullmoves: number;\n}\n\nexport const defaultSetup = (): Setup => ({\n  board: Board.default(),\n  pockets: undefined,\n  turn: 'white',\n  castlingRights: SquareSet.corners(),\n  epSquare: undefined,\n  remainingChecks: undefined,\n  halfmoves: 0,\n  fullmoves: 1,\n});\n\nexport const setupClone = (setup: Setup): Setup => ({\n  board: setup.board.clone(),\n  pockets: setup.pockets?.clone(),\n  turn: setup.turn,\n  castlingRights: setup.castlingRights,\n  epSquare: setup.epSquare,\n  remainingChecks: setup.remainingChecks?.clone(),\n  halfmoves: setup.halfmoves,\n  fullmoves: setup.fullmoves,\n});\n\nexport const setupEquals = (left: Setup, right: Setup): boolean =>\n  boardEquals(left.board, right.board)\n  && ((right.pockets && left.pockets?.equals(right.pockets)) || (!left.pockets && !right.pockets))\n  && left.turn === right.turn\n  && left.castlingRights.equals(right.castlingRights)\n  && left.epSquare === right.epSquare\n  && ((right.remainingChecks && left.remainingChecks?.equals(right.remainingChecks))\n    || (!left.remainingChecks && !right.remainingChecks))\n  && left.halfmoves === right.halfmoves\n  && left.fullmoves === right.fullmoves;\n", "abstract class _Result<T, E extends Error> {\n  protected abstract _chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U>;\n\n  unwrap(): T;\n  unwrap<U>(ok: (value: T) => U): U;\n  unwrap<U, V>(ok: (value: T) => U, err: (error: E) => V): U | V;\n  unwrap<U>(ok: (value: T) => U, err: (error: E) => U): U;\n  unwrap(ok?: (value: T) => unknown, err?: (error: E) => unknown): unknown {\n    const r = this._chain(\n      value => Result.ok(ok ? ok(value) : value),\n      error => (err ? Result.ok(err(error)) : Result.err(error))\n    );\n    if (r.isErr) {\n      throw r.error;\n    }\n    return r.value;\n  }\n\n  map<U>(ok: (value: T) => U): Result<U, E>;\n  map<U, F extends Error>(\n    ok: (value: T) => U,\n    err: (error: E) => F\n  ): Result<U, F>;\n  map(ok: (value: T) => unknown, err?: (error: E) => Error): Result<unknown> {\n    return this._chain(\n      value => Result.ok(ok(value)),\n      error => Result.err(err ? err(error) : error)\n    );\n  }\n\n  chain<X>(ok: (value: T) => Result<X, E>): Result<X, E>;\n  chain<X>(\n    ok: (value: T) => Result<X, E>,\n    err: (error: E) => Result<X, E>\n  ): Result<X, E>;\n  chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U>;\n  chain(\n    ok: (value: T) => Result<unknown>,\n    err?: (error: E) => Result<unknown>\n  ): Result<unknown> {\n    return this._chain(ok, err || (error => Result.err(error)));\n  }\n}\n\nclass _Ok<T, E extends Error> extends _Result<T, E> {\n  readonly isOk = true;\n  readonly isErr = false;\n  constructor(readonly value: T) {\n    super();\n  }\n\n  protected _chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    _err: (error: E) => Result<X, U>\n  ): Result<X, U> {\n    return ok(this.value);\n  }\n}\n\nclass _Err<T, E extends Error> extends _Result<T, E> {\n  readonly isOk = false;\n  readonly isErr = true;\n  constructor(readonly error: E) {\n    super();\n  }\n\n  protected _chain<X, U extends Error>(\n    _ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U> {\n    return err(this.error);\n  }\n}\n\nexport namespace Result {\n  export interface Ok<T, E extends Error> extends _Ok<T, E> {}\n  export interface Err<T, E extends Error> extends _Err<T, E> {}\n\n  export function ok<T, E extends Error>(value: T): Result<T, E> {\n    return new _Ok(value);\n  }\n  export function err<E extends Error, T = never>(error?: E): Result<T, E>\n  export function err<E extends Error, T = never>(error: E): Result<T, E> {\n    return new _Err(error || new Error());\n  }\n\n  type U = Result<unknown>;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U,\n    R14 extends U,\n    R15 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>,\n      OkType<R14>,\n      OkType<R15>\n    ],\n    ErrType<\n      | R0\n      | R1\n      | R2\n      | R3\n      | R4\n      | R5\n      | R6\n      | R7\n      | R8\n      | R9\n      | R10\n      | R11\n      | R12\n      | R13\n      | R14\n      | R15\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U,\n    R14 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>,\n      OkType<R14>\n    ],\n    ErrType<\n      | R0\n      | R1\n      | R2\n      | R3\n      | R4\n      | R5\n      | R6\n      | R7\n      | R8\n      | R9\n      | R10\n      | R11\n      | R12\n      | R13\n      | R14\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>\n    ],\n    ErrType<\n      R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11 | R12 | R13\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>, OkType<R4>, OkType<R5>],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>, OkType<R4>],\n    ErrType<R0 | R1 | R2 | R3 | R4>\n  >;\n  export function all<R0 extends U, R1 extends U, R2 extends U, R3 extends U>(\n    obj: [R0, R1, R2, R3]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>],\n    ErrType<R0 | R1 | R2 | R3>\n  >;\n  export function all<R0 extends U, R1 extends U, R2 extends U>(\n    obj: [R0, R1, R2]\n  ): Result<[OkType<R0>, OkType<R1>, OkType<R2>], ErrType<R0 | R1 | R2>>;\n  export function all<R0 extends U, R1 extends U>(\n    obj: [R0, R1]\n  ): Result<[OkType<R0>, OkType<R1>], ErrType<R0 | R1>>;\n  export function all<R0 extends U>(\n    obj: [R0]\n  ): Result<[OkType<R0>], ErrType<R0>>;\n  export function all(obj: []): Result<[]>;\n  export function all<T extends Array<U> | Record<string, U>>(\n    obj: T\n  ): Result<\n    { [K in keyof T]: T[K] extends Result<infer I> ? I : never },\n    {\n      [K in keyof T]: T[K] extends Result<unknown, infer E> ? E : never;\n    }[keyof T]\n  >;\n  export function all(obj: unknown): unknown {\n    if (Array.isArray(obj)) {\n      const res = [];\n      for (let i = 0; i < obj.length; i++) {\n        const item = obj[i];\n        if (item.isErr) {\n          return item;\n        }\n        res.push(item.value);\n      }\n      return Result.ok(res);\n    }\n\n    const res: Record<string, unknown> = {};\n    const keys = Object.keys(obj as Record<string, U>);\n    for (let i = 0; i < keys.length; i++) {\n      const item = (obj as Record<string, U>)[keys[i]];\n      if (item.isErr) {\n        return item;\n      }\n      res[keys[i]] = item.value;\n    }\n    return Result.ok(res);\n  }\n}\n\nexport type Result<T, E extends Error = Error> =\n  | Result.Ok<T, E>\n  | Result.Err<T, E>;\n\ntype OkType<R extends Result<unknown>> = R extends Result<infer O> ? O : never;\ntype ErrType<R extends Result<unknown>> = R extends Result<unknown, infer E>\n  ? E\n  : never;\n", "import { Result } from '@badrap/result';\nimport {\n  attacks,\n  between,\n  bishopAttacks,\n  kingAttacks,\n  knightAttacks,\n  pawnAttacks,\n  queenAttacks,\n  ray,\n  rookAttacks,\n} from './attacks.js';\nimport { Board, boardEquals } from './board.js';\nimport { Material, RemainingChecks, Setup } from './setup.js';\nimport { SquareSet } from './squareSet.js';\nimport {\n  ByCastlingSide,\n  ByColor,\n  CASTLING_SIDES,\n  CastlingSide,\n  Color,\n  COLORS,\n  isDrop,\n  Move,\n  NormalMove,\n  Outcome,\n  Piece,\n  Rules,\n  Square,\n} from './types.js';\nimport { defined, kingCastlesTo, opposite, rookCastlesTo, squareRank } from './util.js';\n\nexport enum IllegalSetup {\n  Empty = 'ERR_EMPTY',\n  OppositeCheck = 'ERR_OPPOSITE_CHECK',\n  PawnsOnBackrank = 'ERR_PAWNS_ON_BACKRANK',\n  Kings = 'ERR_KINGS',\n  Variant = 'ERR_VARIANT',\n}\n\nexport class PositionError extends Error {}\n\nconst attacksTo = (square: Square, attacker: Color, board: Board, occupied: SquareSet): SquareSet =>\n  board[attacker].intersect(\n    rookAttacks(square, occupied)\n      .intersect(board.rooksAndQueens())\n      .union(bishopAttacks(square, occupied).intersect(board.bishopsAndQueens()))\n      .union(knightAttacks(square).intersect(board.knight))\n      .union(kingAttacks(square).intersect(board.king))\n      .union(pawnAttacks(opposite(attacker), square).intersect(board.pawn)),\n  );\n\nexport class Castles {\n  castlingRights: SquareSet;\n  rook: ByColor<ByCastlingSide<Square | undefined>>;\n  path: ByColor<ByCastlingSide<SquareSet>>;\n\n  private constructor() {}\n\n  static default(): Castles {\n    const castles = new Castles();\n    castles.castlingRights = SquareSet.corners();\n    castles.rook = {\n      white: { a: 0, h: 7 },\n      black: { a: 56, h: 63 },\n    };\n    castles.path = {\n      white: { a: new SquareSet(0xe, 0), h: new SquareSet(0x60, 0) },\n      black: { a: new SquareSet(0, 0x0e000000), h: new SquareSet(0, 0x60000000) },\n    };\n    return castles;\n  }\n\n  static empty(): Castles {\n    const castles = new Castles();\n    castles.castlingRights = SquareSet.empty();\n    castles.rook = {\n      white: { a: undefined, h: undefined },\n      black: { a: undefined, h: undefined },\n    };\n    castles.path = {\n      white: { a: SquareSet.empty(), h: SquareSet.empty() },\n      black: { a: SquareSet.empty(), h: SquareSet.empty() },\n    };\n    return castles;\n  }\n\n  clone(): Castles {\n    const castles = new Castles();\n    castles.castlingRights = this.castlingRights;\n    castles.rook = {\n      white: { a: this.rook.white.a, h: this.rook.white.h },\n      black: { a: this.rook.black.a, h: this.rook.black.h },\n    };\n    castles.path = {\n      white: { a: this.path.white.a, h: this.path.white.h },\n      black: { a: this.path.black.a, h: this.path.black.h },\n    };\n    return castles;\n  }\n\n  private add(color: Color, side: CastlingSide, king: Square, rook: Square): void {\n    const kingTo = kingCastlesTo(color, side);\n    const rookTo = rookCastlesTo(color, side);\n    this.castlingRights = this.castlingRights.with(rook);\n    this.rook[color][side] = rook;\n    this.path[color][side] = between(rook, rookTo)\n      .with(rookTo)\n      .union(between(king, kingTo).with(kingTo))\n      .without(king)\n      .without(rook);\n  }\n\n  static fromSetup(setup: Setup): Castles {\n    const castles = Castles.empty();\n    const rooks = setup.castlingRights.intersect(setup.board.rook);\n    for (const color of COLORS) {\n      const backrank = SquareSet.backrank(color);\n      const king = setup.board.kingOf(color);\n      if (!defined(king) || !backrank.has(king)) continue;\n      const side = rooks.intersect(setup.board[color]).intersect(backrank);\n      const aSide = side.first();\n      if (defined(aSide) && aSide < king) castles.add(color, 'a', king, aSide);\n      const hSide = side.last();\n      if (defined(hSide) && king < hSide) castles.add(color, 'h', king, hSide);\n    }\n    return castles;\n  }\n\n  discardRook(square: Square): void {\n    if (this.castlingRights.has(square)) {\n      this.castlingRights = this.castlingRights.without(square);\n      for (const color of COLORS) {\n        for (const side of CASTLING_SIDES) {\n          if (this.rook[color][side] === square) this.rook[color][side] = undefined;\n        }\n      }\n    }\n  }\n\n  discardColor(color: Color): void {\n    this.castlingRights = this.castlingRights.diff(SquareSet.backrank(color));\n    this.rook[color].a = undefined;\n    this.rook[color].h = undefined;\n  }\n}\n\nexport interface Context {\n  king: Square | undefined;\n  blockers: SquareSet;\n  checkers: SquareSet;\n  variantEnd: boolean;\n  mustCapture: boolean;\n}\n\nexport abstract class Position {\n  board: Board;\n  pockets: Material | undefined;\n  turn: Color;\n  castles: Castles;\n  epSquare: Square | undefined;\n  remainingChecks: RemainingChecks | undefined;\n  halfmoves: number;\n  fullmoves: number;\n\n  protected constructor(readonly rules: Rules) {}\n\n  reset() {\n    this.board = Board.default();\n    this.pockets = undefined;\n    this.turn = 'white';\n    this.castles = Castles.default();\n    this.epSquare = undefined;\n    this.remainingChecks = undefined;\n    this.halfmoves = 0;\n    this.fullmoves = 1;\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    this.board = setup.board.clone();\n    this.board.promoted = SquareSet.empty();\n    this.pockets = undefined;\n    this.turn = setup.turn;\n    this.castles = Castles.fromSetup(setup);\n    this.epSquare = validEpSquare(this, setup.epSquare);\n    this.remainingChecks = undefined;\n    this.halfmoves = setup.halfmoves;\n    this.fullmoves = setup.fullmoves;\n  }\n\n  // When subclassing overwrite at least:\n  //\n  // - static default()\n  // - static fromSetup()\n  // - static clone()\n  //\n  // - dests()\n  // - isVariantEnd()\n  // - variantOutcome()\n  // - hasInsufficientMaterial()\n  // - isStandardMaterial()\n\n  kingAttackers(square: Square, attacker: Color, occupied: SquareSet): SquareSet {\n    return attacksTo(square, attacker, this.board, occupied);\n  }\n\n  protected playCaptureAt(square: Square, captured: Piece): void {\n    this.halfmoves = 0;\n    if (captured.role === 'rook') this.castles.discardRook(square);\n    if (this.pockets) this.pockets[opposite(captured.color)][captured.promoted ? 'pawn' : captured.role]++;\n  }\n\n  ctx(): Context {\n    const variantEnd = this.isVariantEnd();\n    const king = this.board.kingOf(this.turn);\n    if (!defined(king)) {\n      return { king, blockers: SquareSet.empty(), checkers: SquareSet.empty(), variantEnd, mustCapture: false };\n    }\n    const snipers = rookAttacks(king, SquareSet.empty())\n      .intersect(this.board.rooksAndQueens())\n      .union(bishopAttacks(king, SquareSet.empty()).intersect(this.board.bishopsAndQueens()))\n      .intersect(this.board[opposite(this.turn)]);\n    let blockers = SquareSet.empty();\n    for (const sniper of snipers) {\n      const b = between(king, sniper).intersect(this.board.occupied);\n      if (!b.moreThanOne()) blockers = blockers.union(b);\n    }\n    const checkers = this.kingAttackers(king, opposite(this.turn), this.board.occupied);\n    return {\n      king,\n      blockers,\n      checkers,\n      variantEnd,\n      mustCapture: false,\n    };\n  }\n\n  clone(): Position {\n    const pos = new (this as any).constructor();\n    pos.board = this.board.clone();\n    pos.pockets = this.pockets?.clone();\n    pos.turn = this.turn;\n    pos.castles = this.castles.clone();\n    pos.epSquare = this.epSquare;\n    pos.remainingChecks = this.remainingChecks?.clone();\n    pos.halfmoves = this.halfmoves;\n    pos.fullmoves = this.fullmoves;\n    return pos;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (this.board.king.size() !== 2) return Result.err(new PositionError(IllegalSetup.Kings));\n\n    if (!defined(this.board.kingOf(this.turn))) return Result.err(new PositionError(IllegalSetup.Kings));\n\n    const otherKing = this.board.kingOf(opposite(this.turn));\n    if (!defined(otherKing)) return Result.err(new PositionError(IllegalSetup.Kings));\n    if (this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty()) {\n      return Result.err(new PositionError(IllegalSetup.OppositeCheck));\n    }\n\n    if (SquareSet.backranks().intersects(this.board.pawn)) {\n      return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n    }\n\n    return Result.ok(undefined);\n  }\n\n  dropDests(_ctx?: Context): SquareSet {\n    return SquareSet.empty();\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n    if (ctx.variantEnd) return SquareSet.empty();\n    const piece = this.board.get(square);\n    if (!piece || piece.color !== this.turn) return SquareSet.empty();\n\n    let pseudo, legal;\n    if (piece.role === 'pawn') {\n      pseudo = pawnAttacks(this.turn, square).intersect(this.board[opposite(this.turn)]);\n      const delta = this.turn === 'white' ? 8 : -8;\n      const step = square + delta;\n      if (0 <= step && step < 64 && !this.board.occupied.has(step)) {\n        pseudo = pseudo.with(step);\n        const canDoubleStep = this.turn === 'white' ? square < 16 : square >= 64 - 16;\n        const doubleStep = step + delta;\n        if (canDoubleStep && !this.board.occupied.has(doubleStep)) {\n          pseudo = pseudo.with(doubleStep);\n        }\n      }\n      if (defined(this.epSquare) && canCaptureEp(this, square, ctx)) {\n        legal = SquareSet.fromSquare(this.epSquare);\n      }\n    } else if (piece.role === 'bishop') pseudo = bishopAttacks(square, this.board.occupied);\n    else if (piece.role === 'knight') pseudo = knightAttacks(square);\n    else if (piece.role === 'rook') pseudo = rookAttacks(square, this.board.occupied);\n    else if (piece.role === 'queen') pseudo = queenAttacks(square, this.board.occupied);\n    else pseudo = kingAttacks(square);\n\n    pseudo = pseudo.diff(this.board[this.turn]);\n\n    if (defined(ctx.king)) {\n      if (piece.role === 'king') {\n        const occ = this.board.occupied.without(square);\n        for (const to of pseudo) {\n          if (this.kingAttackers(to, opposite(this.turn), occ).nonEmpty()) pseudo = pseudo.without(to);\n        }\n        return pseudo.union(castlingDest(this, 'a', ctx)).union(castlingDest(this, 'h', ctx));\n      }\n\n      if (ctx.checkers.nonEmpty()) {\n        const checker = ctx.checkers.singleSquare();\n        if (!defined(checker)) return SquareSet.empty();\n        pseudo = pseudo.intersect(between(checker, ctx.king).with(checker));\n      }\n\n      if (ctx.blockers.has(square)) pseudo = pseudo.intersect(ray(square, ctx.king));\n    }\n\n    if (legal) pseudo = pseudo.union(legal);\n    return pseudo;\n  }\n\n  isVariantEnd(): boolean {\n    return false;\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    return;\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    if (this.board[color].intersect(this.board.pawn.union(this.board.rooksAndQueens())).nonEmpty()) return false;\n    if (this.board[color].intersects(this.board.knight)) {\n      return (\n        this.board[color].size() <= 2\n        && this.board[opposite(color)].diff(this.board.king).diff(this.board.queen).isEmpty()\n      );\n    }\n    if (this.board[color].intersects(this.board.bishop)) {\n      const sameColor = !this.board.bishop.intersects(SquareSet.darkSquares())\n        || !this.board.bishop.intersects(SquareSet.lightSquares());\n      return sameColor && this.board.pawn.isEmpty() && this.board.knight.isEmpty();\n    }\n    return true;\n  }\n\n  // The following should be identical in all subclasses\n\n  toSetup(): Setup {\n    return {\n      board: this.board.clone(),\n      pockets: this.pockets?.clone(),\n      turn: this.turn,\n      castlingRights: this.castles.castlingRights,\n      epSquare: legalEpSquare(this),\n      remainingChecks: this.remainingChecks?.clone(),\n      halfmoves: Math.min(this.halfmoves, 150),\n      fullmoves: Math.min(Math.max(this.fullmoves, 1), 9999),\n    };\n  }\n\n  isInsufficientMaterial(): boolean {\n    return COLORS.every(color => this.hasInsufficientMaterial(color));\n  }\n\n  hasDests(ctx?: Context): boolean {\n    ctx = ctx || this.ctx();\n    for (const square of this.board[this.turn]) {\n      if (this.dests(square, ctx).nonEmpty()) return true;\n    }\n    return this.dropDests(ctx).nonEmpty();\n  }\n\n  isLegal(move: Move, ctx?: Context): boolean {\n    if (isDrop(move)) {\n      if (!this.pockets || this.pockets[this.turn][move.role] <= 0) return false;\n      if (move.role === 'pawn' && SquareSet.backranks().has(move.to)) return false;\n      return this.dropDests(ctx).has(move.to);\n    } else {\n      if (move.promotion === 'pawn') return false;\n      if (move.promotion === 'king' && this.rules !== 'antichess') return false;\n      if (!!move.promotion !== (this.board.pawn.has(move.from) && SquareSet.backranks().has(move.to))) return false;\n      const dests = this.dests(move.from, ctx);\n      return dests.has(move.to) || dests.has(normalizeMove(this, move).to);\n    }\n  }\n\n  isCheck(): boolean {\n    const king = this.board.kingOf(this.turn);\n    return defined(king) && this.kingAttackers(king, opposite(this.turn), this.board.occupied).nonEmpty();\n  }\n\n  isEnd(ctx?: Context): boolean {\n    if (ctx ? ctx.variantEnd : this.isVariantEnd()) return true;\n    return this.isInsufficientMaterial() || !this.hasDests(ctx);\n  }\n\n  isCheckmate(ctx?: Context): boolean {\n    ctx = ctx || this.ctx();\n    return !ctx.variantEnd && ctx.checkers.nonEmpty() && !this.hasDests(ctx);\n  }\n\n  isStalemate(ctx?: Context): boolean {\n    ctx = ctx || this.ctx();\n    return !ctx.variantEnd && ctx.checkers.isEmpty() && !this.hasDests(ctx);\n  }\n\n  outcome(ctx?: Context): Outcome | undefined {\n    const variantOutcome = this.variantOutcome(ctx);\n    if (variantOutcome) return variantOutcome;\n    ctx = ctx || this.ctx();\n    if (this.isCheckmate(ctx)) return { winner: opposite(this.turn) };\n    else if (this.isInsufficientMaterial() || this.isStalemate(ctx)) return { winner: undefined };\n    else return;\n  }\n\n  allDests(ctx?: Context): Map<Square, SquareSet> {\n    ctx = ctx || this.ctx();\n    const d = new Map();\n    if (ctx.variantEnd) return d;\n    for (const square of this.board[this.turn]) {\n      d.set(square, this.dests(square, ctx));\n    }\n    return d;\n  }\n\n  play(move: Move): void {\n    const turn = this.turn;\n    const epSquare = this.epSquare;\n    const castling = castlingSide(this, move);\n\n    this.epSquare = undefined;\n    this.halfmoves += 1;\n    if (turn === 'black') this.fullmoves += 1;\n    this.turn = opposite(turn);\n\n    if (isDrop(move)) {\n      this.board.set(move.to, { role: move.role, color: turn });\n      if (this.pockets) this.pockets[turn][move.role]--;\n      if (move.role === 'pawn') this.halfmoves = 0;\n    } else {\n      const piece = this.board.take(move.from);\n      if (!piece) return;\n\n      let epCapture: Piece | undefined;\n      if (piece.role === 'pawn') {\n        this.halfmoves = 0;\n        if (move.to === epSquare) {\n          epCapture = this.board.take(move.to + (turn === 'white' ? -8 : 8));\n        }\n        const delta = move.from - move.to;\n        if (Math.abs(delta) === 16 && 8 <= move.from && move.from <= 55) {\n          this.epSquare = (move.from + move.to) >> 1;\n        }\n        if (move.promotion) {\n          piece.role = move.promotion;\n          piece.promoted = !!this.pockets;\n        }\n      } else if (piece.role === 'rook') {\n        this.castles.discardRook(move.from);\n      } else if (piece.role === 'king') {\n        if (castling) {\n          const rookFrom = this.castles.rook[turn][castling];\n          if (defined(rookFrom)) {\n            const rook = this.board.take(rookFrom);\n            this.board.set(kingCastlesTo(turn, castling), piece);\n            if (rook) this.board.set(rookCastlesTo(turn, castling), rook);\n          }\n        }\n        this.castles.discardColor(turn);\n      }\n\n      if (!castling) {\n        const capture = this.board.set(move.to, piece) || epCapture;\n        if (capture) this.playCaptureAt(move.to, capture);\n      }\n    }\n\n    if (this.remainingChecks) {\n      if (this.isCheck()) this.remainingChecks[turn] = Math.max(this.remainingChecks[turn] - 1, 0);\n    }\n  }\n}\n\nexport class Chess extends Position {\n  private constructor() {\n    super('chess');\n  }\n\n  static default(): Chess {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Chess, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Chess {\n    return super.clone() as Chess;\n  }\n}\n\nconst validEpSquare = (pos: Position, square: Square | undefined): Square | undefined => {\n  if (!defined(square)) return;\n  const epRank = pos.turn === 'white' ? 5 : 2;\n  const forward = pos.turn === 'white' ? 8 : -8;\n  if (squareRank(square) !== epRank) return;\n  if (pos.board.occupied.has(square + forward)) return;\n  const pawn = square - forward;\n  if (!pos.board.pawn.has(pawn) || !pos.board[opposite(pos.turn)].has(pawn)) return;\n  return square;\n};\n\nconst legalEpSquare = (pos: Position): Square | undefined => {\n  if (!defined(pos.epSquare)) return;\n  const ctx = pos.ctx();\n  const ourPawns = pos.board.pieces(pos.turn, 'pawn');\n  const candidates = ourPawns.intersect(pawnAttacks(opposite(pos.turn), pos.epSquare));\n  for (const candidate of candidates) {\n    if (pos.dests(candidate, ctx).has(pos.epSquare)) return pos.epSquare;\n  }\n  return;\n};\n\nconst canCaptureEp = (pos: Position, pawnFrom: Square, ctx: Context): boolean => {\n  if (!defined(pos.epSquare)) return false;\n  if (!pawnAttacks(pos.turn, pawnFrom).has(pos.epSquare)) return false;\n  if (!defined(ctx.king)) return true;\n  const delta = pos.turn === 'white' ? 8 : -8;\n  const captured = pos.epSquare - delta;\n  return pos\n    .kingAttackers(\n      ctx.king,\n      opposite(pos.turn),\n      pos.board.occupied.toggle(pawnFrom).toggle(captured).with(pos.epSquare),\n    )\n    .without(captured)\n    .isEmpty();\n};\n\nconst castlingDest = (pos: Position, side: CastlingSide, ctx: Context): SquareSet => {\n  if (!defined(ctx.king) || ctx.checkers.nonEmpty()) return SquareSet.empty();\n  const rook = pos.castles.rook[pos.turn][side];\n  if (!defined(rook)) return SquareSet.empty();\n  if (pos.castles.path[pos.turn][side].intersects(pos.board.occupied)) return SquareSet.empty();\n\n  const kingTo = kingCastlesTo(pos.turn, side);\n  const kingPath = between(ctx.king, kingTo);\n  const occ = pos.board.occupied.without(ctx.king);\n  for (const sq of kingPath) {\n    if (pos.kingAttackers(sq, opposite(pos.turn), occ).nonEmpty()) return SquareSet.empty();\n  }\n\n  const rookTo = rookCastlesTo(pos.turn, side);\n  const after = pos.board.occupied.toggle(ctx.king).toggle(rook).toggle(rookTo);\n  if (pos.kingAttackers(kingTo, opposite(pos.turn), after).nonEmpty()) return SquareSet.empty();\n\n  return SquareSet.fromSquare(rook);\n};\n\nexport const pseudoDests = (pos: Position, square: Square, ctx: Context): SquareSet => {\n  if (ctx.variantEnd) return SquareSet.empty();\n  const piece = pos.board.get(square);\n  if (!piece || piece.color !== pos.turn) return SquareSet.empty();\n\n  let pseudo = attacks(piece, square, pos.board.occupied);\n  if (piece.role === 'pawn') {\n    let captureTargets = pos.board[opposite(pos.turn)];\n    if (defined(pos.epSquare)) captureTargets = captureTargets.with(pos.epSquare);\n    pseudo = pseudo.intersect(captureTargets);\n    const delta = pos.turn === 'white' ? 8 : -8;\n    const step = square + delta;\n    if (0 <= step && step < 64 && !pos.board.occupied.has(step)) {\n      pseudo = pseudo.with(step);\n      const canDoubleStep = pos.turn === 'white' ? square < 16 : square >= 64 - 16;\n      const doubleStep = step + delta;\n      if (canDoubleStep && !pos.board.occupied.has(doubleStep)) {\n        pseudo = pseudo.with(doubleStep);\n      }\n    }\n    return pseudo;\n  } else {\n    pseudo = pseudo.diff(pos.board[pos.turn]);\n  }\n  if (square === ctx.king) return pseudo.union(castlingDest(pos, 'a', ctx)).union(castlingDest(pos, 'h', ctx));\n  else return pseudo;\n};\n\nexport const equalsIgnoreMoves = (left: Position, right: Position): boolean =>\n  left.rules === right.rules\n  && boardEquals(left.board, right.board)\n  && ((right.pockets && left.pockets?.equals(right.pockets)) || (!left.pockets && !right.pockets))\n  && left.turn === right.turn\n  && left.castles.castlingRights.equals(right.castles.castlingRights)\n  && legalEpSquare(left) === legalEpSquare(right)\n  && ((right.remainingChecks && left.remainingChecks?.equals(right.remainingChecks))\n    || (!left.remainingChecks && !right.remainingChecks));\n\nexport const castlingSide = (pos: Position, move: Move): CastlingSide | undefined => {\n  if (isDrop(move)) return;\n  const delta = move.to - move.from;\n  if (Math.abs(delta) !== 2 && !pos.board[pos.turn].has(move.to)) return;\n  if (!pos.board.king.has(move.from)) return;\n  return delta > 0 ? 'h' : 'a';\n};\n\nexport const normalizeMove = (pos: Position, move: Move): Move => {\n  const side = castlingSide(pos, move);\n  if (!side) return move;\n  const rookFrom = pos.castles.rook[pos.turn][side];\n  return {\n    from: (move as NormalMove).from,\n    to: defined(rookFrom) ? rookFrom : move.to,\n  };\n};\n\nexport const isStandardMaterialSide = (board: Board, color: Color): boolean => {\n  const promoted = Math.max(board.pieces(color, 'queen').size() - 1, 0)\n    + Math.max(board.pieces(color, 'rook').size() - 2, 0)\n    + Math.max(board.pieces(color, 'knight').size() - 2, 0)\n    + Math.max(board.pieces(color, 'bishop').intersect(SquareSet.lightSquares()).size() - 1, 0)\n    + Math.max(board.pieces(color, 'bishop').intersect(SquareSet.darkSquares()).size() - 1, 0);\n  return board.pieces(color, 'pawn').size() + promoted <= 8;\n};\n\nexport const isStandardMaterial = (pos: Chess): boolean =>\n  COLORS.every(color => isStandardMaterialSide(pos.board, color));\n\nexport const isImpossibleCheck = (pos: Position): boolean => {\n  const ourKing = pos.board.kingOf(pos.turn);\n  if (!defined(ourKing)) return false;\n  const checkers = pos.kingAttackers(ourKing, opposite(pos.turn), pos.board.occupied);\n  if (checkers.isEmpty()) return false;\n  if (defined(pos.epSquare)) {\n    // The pushed pawn must be the only checker, or it has uncovered\n    // check by a single sliding piece.\n    const pushedTo = pos.epSquare ^ 8;\n    const pushedFrom = pos.epSquare ^ 24;\n    return (\n      checkers.moreThanOne()\n      || (checkers.first()! !== pushedTo\n        && pos\n          .kingAttackers(ourKing, opposite(pos.turn), pos.board.occupied.without(pushedTo).with(pushedFrom))\n          .nonEmpty())\n    );\n  } else if (pos.rules === 'atomic') {\n    // Other king moving away can cause many checks to be given at the same\n    // time. Not checking details, or even that the king is close enough.\n    return false;\n  } else {\n    // Sliding checkers aligned with king.\n    return checkers.size() > 2 || (checkers.size() === 2 && ray(checkers.first()!, checkers.last()!).has(ourKing));\n  }\n};\n", "import { Result } from '@badrap/result';\nimport { Board } from './board.js';\nimport { Material, MaterialSide, RemainingChecks, Setup } from './setup.js';\nimport { SquareSet } from './squareSet.js';\nimport { Color, COLORS, FILE_NAMES, Piece, ROLES, Square } from './types.js';\nimport { charToRole, defined, makeSquare, parseSquare, roleToChar, squareFile, squareFromCoords } from './util.js';\n\nexport const INITIAL_BOARD_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nexport const INITIAL_EPD = INITIAL_BOARD_FEN + ' w KQkq -';\nexport const INITIAL_FEN = INITIAL_EPD + ' 0 1';\nexport const EMPTY_BOARD_FEN = '8/8/8/8/8/8/8/8';\nexport const EMPTY_EPD = EMPTY_BOARD_FEN + ' w - -';\nexport const EMPTY_FEN = EMPTY_EPD + ' 0 1';\n\nexport enum InvalidFen {\n  Fen = 'ERR_FEN',\n  Board = 'ERR_BOARD',\n  Pockets = 'ERR_POCKETS',\n  Turn = 'ERR_TURN',\n  Castling = 'ERR_CASTLING',\n  EpSquare = 'ERR_EP_SQUARE',\n  RemainingChecks = 'ERR_REMAINING_CHECKS',\n  Halfmoves = 'ERR_HALFMOVES',\n  Fullmoves = 'ERR_FULLMOVES',\n}\n\nexport class FenError extends Error {}\n\nconst nthIndexOf = (haystack: string, needle: string, n: number): number => {\n  let index = haystack.indexOf(needle);\n  while (n-- > 0) {\n    if (index === -1) break;\n    index = haystack.indexOf(needle, index + needle.length);\n  }\n  return index;\n};\n\nconst parseSmallUint = (str: string): number | undefined => (/^\\d{1,4}$/.test(str) ? parseInt(str, 10) : undefined);\n\nconst charToPiece = (ch: string): Piece | undefined => {\n  const role = charToRole(ch);\n  return role && { role, color: ch.toLowerCase() === ch ? 'black' : 'white' };\n};\n\nexport const parseBoardFen = (boardPart: string): Result<Board, FenError> => {\n  const board = Board.empty();\n  let rank = 7;\n  let file = 0;\n  for (let i = 0; i < boardPart.length; i++) {\n    const c = boardPart[i];\n    if (c === '/' && file === 8) {\n      file = 0;\n      rank--;\n    } else {\n      const step = parseInt(c, 10);\n      if (step > 0) file += step;\n      else {\n        if (file >= 8 || rank < 0) return Result.err(new FenError(InvalidFen.Board));\n        const square = file + rank * 8;\n        const piece = charToPiece(c);\n        if (!piece) return Result.err(new FenError(InvalidFen.Board));\n        if (boardPart[i + 1] === '~') {\n          piece.promoted = true;\n          i++;\n        }\n        board.set(square, piece);\n        file++;\n      }\n    }\n  }\n  if (rank !== 0 || file !== 8) return Result.err(new FenError(InvalidFen.Board));\n  return Result.ok(board);\n};\n\nexport const parsePockets = (pocketPart: string): Result<Material, FenError> => {\n  if (pocketPart.length > 64) return Result.err(new FenError(InvalidFen.Pockets));\n  const pockets = Material.empty();\n  for (const c of pocketPart) {\n    const piece = charToPiece(c);\n    if (!piece) return Result.err(new FenError(InvalidFen.Pockets));\n    pockets[piece.color][piece.role]++;\n  }\n  return Result.ok(pockets);\n};\n\nexport const parseCastlingFen = (board: Board, castlingPart: string): Result<SquareSet, FenError> => {\n  let castlingRights = SquareSet.empty();\n  if (castlingPart === '-') return Result.ok(castlingRights);\n\n  for (const c of castlingPart) {\n    const lower = c.toLowerCase();\n    const color = c === lower ? 'black' : 'white';\n    const rank = color === 'white' ? 0 : 7;\n    if ('a' <= lower && lower <= 'h') {\n      castlingRights = castlingRights.with(squareFromCoords(lower.charCodeAt(0) - 'a'.charCodeAt(0), rank)!);\n    } else if (lower === 'k' || lower === 'q') {\n      const rooksAndKings = board[color].intersect(SquareSet.backrank(color)).intersect(board.rook.union(board.king));\n      const candidate = lower === 'k' ? rooksAndKings.last() : rooksAndKings.first();\n      castlingRights = castlingRights.with(\n        defined(candidate) && board.rook.has(candidate) ? candidate : squareFromCoords(lower === 'k' ? 7 : 0, rank)!,\n      );\n    } else return Result.err(new FenError(InvalidFen.Castling));\n  }\n\n  if (COLORS.some(color => SquareSet.backrank(color).intersect(castlingRights).size() > 2)) {\n    return Result.err(new FenError(InvalidFen.Castling));\n  }\n\n  return Result.ok(castlingRights);\n};\n\nexport const parseRemainingChecks = (part: string): Result<RemainingChecks, FenError> => {\n  const parts = part.split('+');\n  if (parts.length === 3 && parts[0] === '') {\n    const white = parseSmallUint(parts[1]);\n    const black = parseSmallUint(parts[2]);\n    if (!defined(white) || white > 3 || !defined(black) || black > 3) {\n      return Result.err(new FenError(InvalidFen.RemainingChecks));\n    }\n    return Result.ok(new RemainingChecks(3 - white, 3 - black));\n  } else if (parts.length === 2) {\n    const white = parseSmallUint(parts[0]);\n    const black = parseSmallUint(parts[1]);\n    if (!defined(white) || white > 3 || !defined(black) || black > 3) {\n      return Result.err(new FenError(InvalidFen.RemainingChecks));\n    }\n    return Result.ok(new RemainingChecks(white, black));\n  } else return Result.err(new FenError(InvalidFen.RemainingChecks));\n};\n\nexport const parseFen = (fen: string): Result<Setup, FenError> => {\n  const parts = fen.split(/[\\s_]+/);\n  const boardPart = parts.shift()!;\n\n  // Board and pockets\n  let board: Result<Board, FenError>;\n  let pockets = Result.ok<Material | undefined, FenError>(undefined);\n  if (boardPart.endsWith(']')) {\n    const pocketStart = boardPart.indexOf('[');\n    if (pocketStart === -1) return Result.err(new FenError(InvalidFen.Fen));\n    board = parseBoardFen(boardPart.slice(0, pocketStart));\n    pockets = parsePockets(boardPart.slice(pocketStart + 1, -1));\n  } else {\n    const pocketStart = nthIndexOf(boardPart, '/', 7);\n    if (pocketStart === -1) board = parseBoardFen(boardPart);\n    else {\n      board = parseBoardFen(boardPart.slice(0, pocketStart));\n      pockets = parsePockets(boardPart.slice(pocketStart + 1));\n    }\n  }\n\n  // Turn\n  let turn: Color;\n  const turnPart = parts.shift();\n  if (!defined(turnPart) || turnPart === 'w') turn = 'white';\n  else if (turnPart === 'b') turn = 'black';\n  else return Result.err(new FenError(InvalidFen.Turn));\n\n  return board.chain(board => {\n    // Castling\n    const castlingPart = parts.shift();\n    const castlingRights = defined(castlingPart) ? parseCastlingFen(board, castlingPart) : Result.ok(SquareSet.empty());\n\n    // En passant square\n    const epPart = parts.shift();\n    let epSquare: Square | undefined;\n    if (defined(epPart) && epPart !== '-') {\n      epSquare = parseSquare(epPart);\n      if (!defined(epSquare)) return Result.err(new FenError(InvalidFen.EpSquare));\n    }\n\n    // Halfmoves or remaining checks\n    let halfmovePart = parts.shift();\n    let earlyRemainingChecks: Result<RemainingChecks, FenError> | undefined;\n    if (defined(halfmovePart) && halfmovePart.includes('+')) {\n      earlyRemainingChecks = parseRemainingChecks(halfmovePart);\n      halfmovePart = parts.shift();\n    }\n    const halfmoves = defined(halfmovePart) ? parseSmallUint(halfmovePart) : 0;\n    if (!defined(halfmoves)) return Result.err(new FenError(InvalidFen.Halfmoves));\n\n    const fullmovesPart = parts.shift();\n    const fullmoves = defined(fullmovesPart) ? parseSmallUint(fullmovesPart) : 1;\n    if (!defined(fullmoves)) return Result.err(new FenError(InvalidFen.Fullmoves));\n\n    const remainingChecksPart = parts.shift();\n    let remainingChecks: Result<RemainingChecks | undefined, FenError> = Result.ok(undefined);\n    if (defined(remainingChecksPart)) {\n      if (defined(earlyRemainingChecks)) return Result.err(new FenError(InvalidFen.RemainingChecks));\n      remainingChecks = parseRemainingChecks(remainingChecksPart);\n    } else if (defined(earlyRemainingChecks)) {\n      remainingChecks = earlyRemainingChecks;\n    }\n\n    if (parts.length > 0) return Result.err(new FenError(InvalidFen.Fen));\n\n    return pockets.chain(pockets =>\n      castlingRights.chain(castlingRights =>\n        remainingChecks.map(remainingChecks => {\n          return {\n            board,\n            pockets,\n            turn,\n            castlingRights,\n            remainingChecks,\n            epSquare,\n            halfmoves,\n            fullmoves: Math.max(1, fullmoves),\n          };\n        })\n      )\n    );\n  });\n};\n\nexport interface FenOpts {\n  epd?: boolean;\n}\n\nexport const parsePiece = (str: string): Piece | undefined => {\n  if (!str) return;\n  const piece = charToPiece(str[0]);\n  if (!piece) return;\n  if (str.length === 2 && str[1] === '~') piece.promoted = true;\n  else if (str.length > 1) return;\n  return piece;\n};\n\nexport const makePiece = (piece: Piece): string => {\n  let r = roleToChar(piece.role);\n  if (piece.color === 'white') r = r.toUpperCase();\n  if (piece.promoted) r += '~';\n  return r;\n};\n\nexport const makeBoardFen = (board: Board): string => {\n  let fen = '';\n  let empty = 0;\n  for (let rank = 7; rank >= 0; rank--) {\n    for (let file = 0; file < 8; file++) {\n      const square = file + rank * 8;\n      const piece = board.get(square);\n      if (!piece) empty++;\n      else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        fen += makePiece(piece);\n      }\n\n      if (file === 7) {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        if (rank !== 0) fen += '/';\n      }\n    }\n  }\n  return fen;\n};\n\nexport const makePocket = (material: MaterialSide): string =>\n  ROLES.map(role => roleToChar(role).repeat(material[role])).join('');\n\nexport const makePockets = (pocket: Material): string =>\n  makePocket(pocket.white).toUpperCase() + makePocket(pocket.black);\n\nexport const makeCastlingFen = (board: Board, castlingRights: SquareSet): string => {\n  let fen = '';\n  for (const color of COLORS) {\n    const backrank = SquareSet.backrank(color);\n    let king = board.kingOf(color);\n    if (defined(king) && !backrank.has(king)) king = undefined;\n    const candidates = board.pieces(color, 'rook').intersect(backrank);\n    for (const rook of castlingRights.intersect(backrank).reversed()) {\n      if (rook === candidates.first() && defined(king) && rook < king) {\n        fen += color === 'white' ? 'Q' : 'q';\n      } else if (rook === candidates.last() && defined(king) && king < rook) {\n        fen += color === 'white' ? 'K' : 'k';\n      } else {\n        const file = FILE_NAMES[squareFile(rook)];\n        fen += color === 'white' ? file.toUpperCase() : file;\n      }\n    }\n  }\n  return fen || '-';\n};\n\nexport const makeRemainingChecks = (checks: RemainingChecks): string => `${checks.white}+${checks.black}`;\n\nexport const makeFen = (setup: Setup, opts?: FenOpts): string =>\n  [\n    makeBoardFen(setup.board) + (setup.pockets ? `[${makePockets(setup.pockets)}]` : ''),\n    setup.turn[0],\n    makeCastlingFen(setup.board, setup.castlingRights),\n    defined(setup.epSquare) ? makeSquare(setup.epSquare) : '-',\n    ...(setup.remainingChecks ? [makeRemainingChecks(setup.remainingChecks)] : []),\n    ...(opts?.epd ? [] : [Math.max(0, Math.min(setup.halfmoves, 9999)), Math.max(1, Math.min(setup.fullmoves, 9999))]),\n  ].join(' ');\n", "import { attacks, bishopAttacks, kingAttacks, knightAttacks, queenAttacks, rookAttacks } from './attacks.js';\nimport { Position } from './chess.js';\nimport { SquareSet } from './squareSet.js';\nimport { CastlingSide, FILE_NAMES, isDrop, Move, RANK_NAMES, SquareName } from './types.js';\nimport { charToRole, defined, makeSquare, opposite, parseSquare, roleToChar, squareFile, squareRank } from './util.js';\n\nconst makeSanWithoutSuffix = (pos: Position, move: Move): string => {\n  let san = '';\n  if (isDrop(move)) {\n    if (move.role !== 'pawn') san = roleToChar(move.role).toUpperCase();\n    san += '@' + makeSquare(move.to);\n  } else {\n    const role = pos.board.getRole(move.from);\n    if (!role) return '--';\n    if (role === 'king' && (pos.board[pos.turn].has(move.to) || Math.abs(move.to - move.from) === 2)) {\n      san = move.to > move.from ? 'O-O' : 'O-O-O';\n    } else {\n      const capture = pos.board.occupied.has(move.to)\n        || (role === 'pawn' && squareFile(move.from) !== squareFile(move.to));\n      if (role !== 'pawn') {\n        san = roleToChar(role).toUpperCase();\n\n        // Disambiguation\n        let others;\n        if (role === 'king') others = kingAttacks(move.to).intersect(pos.board.king);\n        else if (role === 'queen') others = queenAttacks(move.to, pos.board.occupied).intersect(pos.board.queen);\n        else if (role === 'rook') others = rookAttacks(move.to, pos.board.occupied).intersect(pos.board.rook);\n        else if (role === 'bishop') others = bishopAttacks(move.to, pos.board.occupied).intersect(pos.board.bishop);\n        else others = knightAttacks(move.to).intersect(pos.board.knight);\n        others = others.intersect(pos.board[pos.turn]).without(move.from);\n        if (others.nonEmpty()) {\n          const ctx = pos.ctx();\n          for (const from of others) {\n            if (!pos.dests(from, ctx).has(move.to)) others = others.without(from);\n          }\n          if (others.nonEmpty()) {\n            let row = false;\n            let column = others.intersects(SquareSet.fromRank(squareRank(move.from)));\n            if (others.intersects(SquareSet.fromFile(squareFile(move.from)))) row = true;\n            else column = true;\n            if (column) san += FILE_NAMES[squareFile(move.from)];\n            if (row) san += RANK_NAMES[squareRank(move.from)];\n          }\n        }\n      } else if (capture) san = FILE_NAMES[squareFile(move.from)];\n\n      if (capture) san += 'x';\n      san += makeSquare(move.to);\n      if (move.promotion) san += '=' + roleToChar(move.promotion).toUpperCase();\n    }\n  }\n  return san;\n};\n\nexport const makeSanAndPlay = (pos: Position, move: Move): string => {\n  const san = makeSanWithoutSuffix(pos, move);\n  pos.play(move);\n  if (pos.outcome()?.winner) return san + '#';\n  if (pos.isCheck()) return san + '+';\n  return san;\n};\n\nexport const makeSanVariation = (pos: Position, variation: Move[]): string => {\n  pos = pos.clone();\n  const line = [];\n  for (let i = 0; i < variation.length; i++) {\n    if (i !== 0) line.push(' ');\n    if (pos.turn === 'white') line.push(pos.fullmoves, '. ');\n    else if (i === 0) line.push(pos.fullmoves, '... ');\n    const san = makeSanWithoutSuffix(pos, variation[i]);\n    pos.play(variation[i]);\n    line.push(san);\n    if (san === '--') return line.join('');\n    if (i === variation.length - 1 && pos.outcome()?.winner) line.push('#');\n    else if (pos.isCheck()) line.push('+');\n  }\n  return line.join('');\n};\n\nexport const makeSan = (pos: Position, move: Move): string => makeSanAndPlay(pos.clone(), move);\n\nexport const parseSan = (pos: Position, san: string): Move | undefined => {\n  const ctx = pos.ctx();\n\n  // Normal move\n  const match = san.match(/^([NBRQK])?([a-h])?([1-8])?[-x]?([a-h][1-8])(?:=?([nbrqkNBRQK]))?[+#]?$/) as\n    | [\n      string,\n      'N' | 'B' | 'R' | 'Q' | 'K' | undefined,\n      string | undefined,\n      string | undefined,\n      SquareName,\n      'n' | 'b' | 'r' | 'q' | 'k' | 'N' | 'B' | 'R' | 'Q' | 'K' | undefined,\n    ]\n    | null;\n  if (!match) {\n    // Castling\n    let castlingSide: CastlingSide | undefined;\n    if (san === 'O-O' || san === 'O-O+' || san === 'O-O#') castlingSide = 'h';\n    else if (san === 'O-O-O' || san === 'O-O-O+' || san === 'O-O-O#') castlingSide = 'a';\n    if (castlingSide) {\n      const rook = pos.castles.rook[pos.turn][castlingSide];\n      if (!defined(ctx.king) || !defined(rook) || !pos.dests(ctx.king, ctx).has(rook)) return;\n      return {\n        from: ctx.king,\n        to: rook,\n      };\n    }\n\n    // Drop\n    const match = san.match(/^([pnbrqkPNBRQK])?@([a-h][1-8])[+#]?$/) as\n      | [string, 'p' | 'n' | 'b' | 'r' | 'q' | 'k' | 'P' | 'N' | 'B' | 'R' | 'Q' | 'K' | undefined, SquareName]\n      | null;\n    if (!match) return;\n    const move = {\n      role: match[1] ? charToRole(match[1]) : 'pawn',\n      to: parseSquare(match[2]),\n    };\n    return pos.isLegal(move, ctx) ? move : undefined;\n  }\n  const role = match[1] ? charToRole(match[1]) : 'pawn';\n  const to = parseSquare(match[4]);\n\n  const promotion = match[5] ? charToRole(match[5]) : undefined;\n  if (!!promotion !== (role === 'pawn' && SquareSet.backranks().has(to))) return;\n  if (promotion === 'king' && pos.rules !== 'antichess') return;\n\n  let candidates = pos.board.pieces(pos.turn, role);\n  if (role === 'pawn' && !match[2]) candidates = candidates.intersect(SquareSet.fromFile(squareFile(to)));\n  else if (match[2]) candidates = candidates.intersect(SquareSet.fromFile(match[2].charCodeAt(0) - 'a'.charCodeAt(0)));\n  if (match[3]) candidates = candidates.intersect(SquareSet.fromRank(match[3].charCodeAt(0) - '1'.charCodeAt(0)));\n\n  // Optimization: Reduce set of candidates\n  const pawnAdvance = role === 'pawn' ? SquareSet.fromFile(squareFile(to)) : SquareSet.empty();\n  candidates = candidates.intersect(\n    pawnAdvance.union(attacks({ color: opposite(pos.turn), role }, to, pos.board.occupied)),\n  );\n\n  // Check uniqueness and legality\n  let from;\n  for (const candidate of candidates) {\n    if (pos.dests(candidate, ctx).has(to)) {\n      if (defined(from)) return; // Ambiguous\n      from = candidate;\n    }\n  }\n  if (!defined(from)) return; // Illegal\n\n  return {\n    from,\n    to,\n    promotion,\n  };\n};\n", "import { Result } from '@badrap/result';\nimport { between, kingAttacks, pawnAttacks } from './attacks.js';\nimport { Board } from './board.js';\nimport {\n  Castles,\n  castlingSide,\n  Chess,\n  Context,\n  equalsIgnoreMoves,\n  IllegalSetup,\n  isImpossibleCheck,\n  isStandardMaterialSide,\n  normalizeMove,\n  Position,\n  PositionError,\n  pseudoDests,\n} from './chess.js';\nimport { Material, MaterialSide, RemainingChecks, Setup } from './setup.js';\nimport { SquareSet } from './squareSet.js';\nimport { Color, COLORS, Outcome, Piece, Rules, Square } from './types.js';\nimport { defined, opposite } from './util.js';\n\nexport {\n  Castles,\n  castlingSide,\n  Chess,\n  Context,\n  equalsIgnoreMoves,\n  IllegalSetup,\n  isImpossibleCheck,\n  normalizeMove,\n  Position,\n  PositionError,\n};\n\nexport class Crazyhouse extends Position {\n  private constructor() {\n    super('crazyhouse');\n  }\n\n  reset() {\n    super.reset();\n    this.pockets = Material.empty();\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.board.promoted = setup.board.promoted\n      .intersect(setup.board.occupied)\n      .diff(setup.board.king)\n      .diff(setup.board.pawn);\n    this.pockets = setup.pockets ? setup.pockets.clone() : Material.empty();\n  }\n\n  static default(): Crazyhouse {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Crazyhouse, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Crazyhouse {\n    return super.clone() as Crazyhouse;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    return super.validate().chain(_ => {\n      if (this.pockets?.count('king')) {\n        return Result.err(new PositionError(IllegalSetup.Kings));\n      }\n      if ((this.pockets?.size() || 0) + this.board.occupied.size() > 64) {\n        return Result.err(new PositionError(IllegalSetup.Variant));\n      }\n      return Result.ok(undefined);\n    });\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    // No material can leave the game, but we can easily check this for\n    // custom positions.\n    if (!this.pockets) return super.hasInsufficientMaterial(color);\n    return (\n      this.board.occupied.size() + this.pockets.size() <= 3\n      && this.board.pawn.isEmpty()\n      && this.board.promoted.isEmpty()\n      && this.board.rooksAndQueens().isEmpty()\n      && this.pockets.count('pawn') <= 0\n      && this.pockets.count('rook') <= 0\n      && this.pockets.count('queen') <= 0\n    );\n  }\n\n  dropDests(ctx?: Context): SquareSet {\n    const mask = this.board.occupied\n      .complement()\n      .intersect(\n        this.pockets?.[this.turn].hasNonPawns()\n          ? SquareSet.full()\n          : this.pockets?.[this.turn].hasPawns()\n          ? SquareSet.backranks().complement()\n          : SquareSet.empty(),\n      );\n\n    ctx = ctx || this.ctx();\n    if (defined(ctx.king) && ctx.checkers.nonEmpty()) {\n      const checker = ctx.checkers.singleSquare();\n      if (!defined(checker)) return SquareSet.empty();\n      return mask.intersect(between(checker, ctx.king));\n    } else return mask;\n  }\n}\n\nexport class Atomic extends Position {\n  private constructor() {\n    super('atomic');\n  }\n\n  static default(): Atomic {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Atomic, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Atomic {\n    return super.clone() as Atomic;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    // Like chess, but allow our king to be missing.\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (this.board.king.size() > 2) return Result.err(new PositionError(IllegalSetup.Kings));\n    const otherKing = this.board.kingOf(opposite(this.turn));\n    if (!defined(otherKing)) return Result.err(new PositionError(IllegalSetup.Kings));\n    if (this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty()) {\n      return Result.err(new PositionError(IllegalSetup.OppositeCheck));\n    }\n    if (SquareSet.backranks().intersects(this.board.pawn)) {\n      return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n    }\n    return Result.ok(undefined);\n  }\n\n  kingAttackers(square: Square, attacker: Color, occupied: SquareSet): SquareSet {\n    const attackerKings = this.board.pieces(attacker, 'king');\n    if (attackerKings.isEmpty() || kingAttacks(square).intersects(attackerKings)) {\n      return SquareSet.empty();\n    }\n    return super.kingAttackers(square, attacker, occupied);\n  }\n\n  protected playCaptureAt(square: Square, captured: Piece): void {\n    super.playCaptureAt(square, captured);\n    this.board.take(square);\n    for (const explode of kingAttacks(square).intersect(this.board.occupied).diff(this.board.pawn)) {\n      const piece = this.board.take(explode);\n      if (piece?.role === 'rook') this.castles.discardRook(explode);\n      if (piece?.role === 'king') this.castles.discardColor(piece.color);\n    }\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    // Remaining material does not matter if the enemy king is already\n    // exploded.\n    if (this.board.pieces(opposite(color), 'king').isEmpty()) return false;\n\n    // Bare king cannot mate.\n    if (this.board[color].diff(this.board.king).isEmpty()) return true;\n\n    // As long as the enemy king is not alone, there is always a chance their\n    // own pieces explode next to it.\n    if (this.board[opposite(color)].diff(this.board.king).nonEmpty()) {\n      // Unless there are only bishops that cannot explode each other.\n      if (this.board.occupied.equals(this.board.bishop.union(this.board.king))) {\n        if (!this.board.bishop.intersect(this.board.white).intersects(SquareSet.darkSquares())) {\n          return !this.board.bishop.intersect(this.board.black).intersects(SquareSet.lightSquares());\n        }\n        if (!this.board.bishop.intersect(this.board.white).intersects(SquareSet.lightSquares())) {\n          return !this.board.bishop.intersect(this.board.black).intersects(SquareSet.darkSquares());\n        }\n      }\n      return false;\n    }\n\n    // Queen or pawn (future queen) can give mate against bare king.\n    if (this.board.queen.nonEmpty() || this.board.pawn.nonEmpty()) return false;\n\n    // Single knight, bishop or rook cannot mate against bare king.\n    if (this.board.knight.union(this.board.bishop).union(this.board.rook).size() === 1) return true;\n\n    // If only knights, more than two are required to mate bare king.\n    if (this.board.occupied.equals(this.board.knight.union(this.board.king))) {\n      return this.board.knight.size() <= 2;\n    }\n\n    return false;\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n    let dests = SquareSet.empty();\n    for (const to of pseudoDests(this, square, ctx)) {\n      const after = this.clone();\n      after.play({ from: square, to });\n      const ourKing = after.board.kingOf(this.turn);\n      if (\n        defined(ourKing)\n        && (!defined(after.board.kingOf(after.turn))\n          || after.kingAttackers(ourKing, after.turn, after.board.occupied).isEmpty())\n      ) {\n        dests = dests.with(to);\n      }\n    }\n    return dests;\n  }\n\n  isVariantEnd(): boolean {\n    return !!this.variantOutcome();\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    for (const color of COLORS) {\n      if (this.board.pieces(color, 'king').isEmpty()) return { winner: opposite(color) };\n    }\n    return;\n  }\n}\n\nexport class Antichess extends Position {\n  private constructor() {\n    super('antichess');\n  }\n\n  reset() {\n    super.reset();\n    this.castles = Castles.empty();\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.castles = Castles.empty();\n  }\n\n  static default(): Antichess {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Antichess, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Antichess {\n    return super.clone() as Antichess;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (SquareSet.backranks().intersects(this.board.pawn)) {\n      return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n    }\n    return Result.ok(undefined);\n  }\n\n  kingAttackers(_square: Square, _attacker: Color, _occupied: SquareSet): SquareSet {\n    return SquareSet.empty();\n  }\n\n  ctx(): Context {\n    const ctx = super.ctx();\n    if (\n      defined(this.epSquare)\n      && pawnAttacks(opposite(this.turn), this.epSquare).intersects(this.board.pieces(this.turn, 'pawn'))\n    ) {\n      ctx.mustCapture = true;\n      return ctx;\n    }\n    const enemy = this.board[opposite(this.turn)];\n    for (const from of this.board[this.turn]) {\n      if (pseudoDests(this, from, ctx).intersects(enemy)) {\n        ctx.mustCapture = true;\n        return ctx;\n      }\n    }\n    return ctx;\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n    const dests = pseudoDests(this, square, ctx);\n    const enemy = this.board[opposite(this.turn)];\n    return dests.intersect(\n      ctx.mustCapture\n        ? defined(this.epSquare) && this.board.getRole(square) === 'pawn'\n          ? enemy.with(this.epSquare)\n          : enemy\n        : SquareSet.full(),\n    );\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    if (this.board[color].isEmpty()) return false;\n    if (this.board[opposite(color)].isEmpty()) return true;\n    if (this.board.occupied.equals(this.board.bishop)) {\n      const weSomeOnLight = this.board[color].intersects(SquareSet.lightSquares());\n      const weSomeOnDark = this.board[color].intersects(SquareSet.darkSquares());\n      const theyAllOnDark = this.board[opposite(color)].isDisjoint(SquareSet.lightSquares());\n      const theyAllOnLight = this.board[opposite(color)].isDisjoint(SquareSet.darkSquares());\n      return (weSomeOnLight && theyAllOnDark) || (weSomeOnDark && theyAllOnLight);\n    }\n    if (this.board.occupied.equals(this.board.knight) && this.board.occupied.size() === 2) {\n      return (\n        (this.board.white.intersects(SquareSet.lightSquares())\n          !== this.board.black.intersects(SquareSet.darkSquares()))\n          !== (this.turn === color)\n      );\n    }\n    return false;\n  }\n\n  isVariantEnd(): boolean {\n    return this.board[this.turn].isEmpty();\n  }\n\n  variantOutcome(ctx?: Context): Outcome | undefined {\n    ctx = ctx || this.ctx();\n    if (ctx.variantEnd || this.isStalemate(ctx)) {\n      return { winner: this.turn };\n    }\n    return;\n  }\n}\n\nexport class KingOfTheHill extends Position {\n  private constructor() {\n    super('kingofthehill');\n  }\n\n  static default(): KingOfTheHill {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<KingOfTheHill, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): KingOfTheHill {\n    return super.clone() as KingOfTheHill;\n  }\n\n  hasInsufficientMaterial(_color: Color): boolean {\n    return false;\n  }\n\n  isVariantEnd(): boolean {\n    return this.board.king.intersects(SquareSet.center());\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    for (const color of COLORS) {\n      if (this.board.pieces(color, 'king').intersects(SquareSet.center())) return { winner: color };\n    }\n    return;\n  }\n}\n\nexport class ThreeCheck extends Position {\n  private constructor() {\n    super('3check');\n  }\n\n  reset() {\n    super.reset();\n    this.remainingChecks = RemainingChecks.default();\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.remainingChecks = setup.remainingChecks?.clone() || RemainingChecks.default();\n  }\n\n  static default(): ThreeCheck {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<ThreeCheck, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): ThreeCheck {\n    return super.clone() as ThreeCheck;\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    return this.board.pieces(color, 'king').equals(this.board[color]);\n  }\n\n  isVariantEnd(): boolean {\n    return !!this.remainingChecks && (this.remainingChecks.white <= 0 || this.remainingChecks.black <= 0);\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    if (this.remainingChecks) {\n      for (const color of COLORS) {\n        if (this.remainingChecks[color] <= 0) return { winner: color };\n      }\n    }\n    return;\n  }\n}\n\nconst racingKingsBoard = (): Board => {\n  const board = Board.empty();\n  board.occupied = new SquareSet(0xffff, 0);\n  board.promoted = SquareSet.empty();\n  board.white = new SquareSet(0xf0f0, 0);\n  board.black = new SquareSet(0x0f0f, 0);\n  board.pawn = SquareSet.empty();\n  board.knight = new SquareSet(0x1818, 0);\n  board.bishop = new SquareSet(0x2424, 0);\n  board.rook = new SquareSet(0x4242, 0);\n  board.queen = new SquareSet(0x0081, 0);\n  board.king = new SquareSet(0x8100, 0);\n  return board;\n};\n\nexport class RacingKings extends Position {\n  private constructor() {\n    super('racingkings');\n  }\n\n  reset() {\n    this.board = racingKingsBoard();\n    this.pockets = undefined;\n    this.turn = 'white';\n    this.castles = Castles.empty();\n    this.epSquare = undefined;\n    this.remainingChecks = undefined;\n    this.halfmoves = 0;\n    this.fullmoves = 1;\n  }\n\n  setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.castles = Castles.empty();\n  }\n\n  static default(): RacingKings {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<RacingKings, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): RacingKings {\n    return super.clone() as RacingKings;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.isCheck() || this.board.pawn.nonEmpty()) return Result.err(new PositionError(IllegalSetup.Variant));\n    return super.validate();\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n\n    // Kings cannot give check.\n    if (square === ctx.king) return super.dests(square, ctx);\n\n    // Do not allow giving check.\n    let dests = SquareSet.empty();\n    for (const to of super.dests(square, ctx)) {\n      // Valid, because there are no promotions (or even pawns).\n      const move = { from: square, to };\n      const after = this.clone();\n      after.play(move);\n      if (!after.isCheck()) dests = dests.with(to);\n    }\n    return dests;\n  }\n\n  hasInsufficientMaterial(_color: Color): boolean {\n    return false;\n  }\n\n  isVariantEnd(): boolean {\n    const goal = SquareSet.fromRank(7);\n    const inGoal = this.board.king.intersect(goal);\n    if (inGoal.isEmpty()) return false;\n    if (this.turn === 'white' || inGoal.intersects(this.board.black)) return true;\n\n    // White has reached the backrank. Check if black can catch up.\n    const blackKing = this.board.kingOf('black');\n    if (defined(blackKing)) {\n      const occ = this.board.occupied.without(blackKing);\n      for (const target of kingAttacks(blackKing).intersect(goal).diff(this.board.black)) {\n        if (this.kingAttackers(target, 'white', occ).isEmpty()) return false;\n      }\n    }\n    return true;\n  }\n\n  variantOutcome(ctx?: Context): Outcome | undefined {\n    if (ctx ? !ctx.variantEnd : !this.isVariantEnd()) return;\n    const goal = SquareSet.fromRank(7);\n    const blackInGoal = this.board.pieces('black', 'king').intersects(goal);\n    const whiteInGoal = this.board.pieces('white', 'king').intersects(goal);\n    if (blackInGoal && !whiteInGoal) return { winner: 'black' };\n    if (whiteInGoal && !blackInGoal) return { winner: 'white' };\n    return { winner: undefined };\n  }\n}\n\nconst hordeBoard = (): Board => {\n  const board = Board.empty();\n  board.occupied = new SquareSet(0xffff_ffff, 0xffff_0066);\n  board.promoted = SquareSet.empty();\n  board.white = new SquareSet(0xffff_ffff, 0x0000_0066);\n  board.black = new SquareSet(0, 0xffff_0000);\n  board.pawn = new SquareSet(0xffff_ffff, 0x00ff_0066);\n  board.knight = new SquareSet(0, 0x4200_0000);\n  board.bishop = new SquareSet(0, 0x2400_0000);\n  board.rook = new SquareSet(0, 0x8100_0000);\n  board.queen = new SquareSet(0, 0x0800_0000);\n  board.king = new SquareSet(0, 0x1000_0000);\n  return board;\n};\n\nexport class Horde extends Position {\n  private constructor() {\n    super('horde');\n  }\n\n  reset() {\n    this.board = hordeBoard();\n    this.pockets = undefined;\n    this.turn = 'white';\n    this.castles = Castles.default();\n    this.castles.discardColor('white');\n    this.epSquare = undefined;\n    this.remainingChecks = undefined;\n    this.halfmoves = 0;\n    this.fullmoves = 1;\n  }\n\n  static default(): Horde {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Horde, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Horde {\n    return super.clone() as Horde;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (this.board.king.size() !== 1) return Result.err(new PositionError(IllegalSetup.Kings));\n\n    const otherKing = this.board.kingOf(opposite(this.turn));\n    if (defined(otherKing) && this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty()) {\n      return Result.err(new PositionError(IllegalSetup.OppositeCheck));\n    }\n    for (const color of COLORS) {\n      const backranks = this.board.pieces(color, 'king').isEmpty()\n        ? SquareSet.backrank(opposite(color))\n        : SquareSet.backranks();\n      if (this.board.pieces(color, 'pawn').intersects(backranks)) {\n        return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n      }\n    }\n    return Result.ok(undefined);\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    // The side with the king can always win by capturing the horde.\n    if (this.board.pieces(color, 'king').nonEmpty()) return false;\n\n    type SquareColor = 'light' | 'dark';\n    const oppositeSquareColor = (squareColor: SquareColor): SquareColor => (squareColor === 'light' ? 'dark' : 'light');\n    const coloredSquares = (squareColor: SquareColor): SquareSet =>\n      squareColor === 'light' ? SquareSet.lightSquares() : SquareSet.darkSquares();\n\n    const hasBishopPair = (side: Color) => {\n      const bishops = this.board.pieces(side, 'bishop');\n      return bishops.intersects(SquareSet.darkSquares()) && bishops.intersects(SquareSet.lightSquares());\n    };\n\n    // By this point: color is the horde.\n    // Based on\n    // https://github.com/stevepapazis/horde-insufficient-material-tests.\n    const horde = MaterialSide.fromBoard(this.board, color);\n    const hordeBishops = (squareColor: SquareColor) =>\n      coloredSquares(squareColor).intersect(this.board.pieces(color, 'bishop')).size();\n    const hordeBishopColor: SquareColor = hordeBishops('light') >= 1 ? 'light' : 'dark';\n    const hordeNum = horde.pawn\n      + horde.knight\n      + horde.rook\n      + horde.queen\n      + Math.min(hordeBishops('dark'), 2)\n      + Math.min(hordeBishops('light'), 2);\n\n    const pieces = MaterialSide.fromBoard(this.board, opposite(color));\n    const piecesBishops = (squareColor: SquareColor) =>\n      coloredSquares(squareColor)\n        .intersect(this.board.pieces(opposite(color), 'bishop'))\n        .size();\n    const piecesNum = pieces.size();\n    const piecesOfRoleNot = (piece: number) => piecesNum - piece;\n\n    if (hordeNum === 0) return true;\n    if (hordeNum >= 4) {\n      // Four or more pieces can always deliver mate.\n      return false;\n    }\n    if ((horde.pawn >= 1 || horde.queen >= 1) && hordeNum >= 2) {\n      // Pawns/queens are never insufficient material when paired with any other\n      // piece (a pawn promotes to a queen and delivers mate).\n      return false;\n    }\n    if (horde.rook >= 1 && hordeNum >= 2) {\n      // A rook is insufficient material only when it is paired with a bishop\n      // against a lone king. The horde can mate in any other case.\n      // A rook on A1 and a bishop on C3 mate a king on B1 when there is a\n      // friendly pawn/opposite-color-bishop/rook/queen on C2.\n      // A rook on B8 and a bishop C3 mate a king on A1 when there is a friendly\n      // knight on A2.\n      if (\n        !(\n          hordeNum === 2\n          && horde.rook === 1\n          && horde.bishop === 1\n          && piecesOfRoleNot(piecesBishops(hordeBishopColor)) === 1\n        )\n      ) {\n        return false;\n      }\n    }\n\n    if (hordeNum === 1) {\n      if (piecesNum === 1) {\n        // A lone piece cannot mate a lone king.\n        return true;\n      } else if (horde.queen === 1) {\n        // The horde has a lone queen.\n        // A lone queen mates a king on A1 bounded by:\n        //  -- a pawn/rook on A2\n        //  -- two same color bishops on A2, B1\n        // We ignore every other mating case, since it can be reduced to\n        // the two previous cases (e.g. a black pawn on A2 and a black\n        // bishop on B1).\n        return !(pieces.pawn >= 1 || pieces.rook >= 1 || piecesBishops('light') >= 2 || piecesBishops('dark') >= 2);\n      } else if (horde.pawn === 1) {\n        // Promote the pawn to a queen or a knight and check whether white\n        // can mate.\n        const pawnSquare = this.board.pieces(color, 'pawn').last()!;\n        const promoteToQueen = this.clone();\n        promoteToQueen.board.set(pawnSquare, { color, role: 'queen' });\n        const promoteToKnight = this.clone();\n        promoteToKnight.board.set(pawnSquare, { color, role: 'knight' });\n        return promoteToQueen.hasInsufficientMaterial(color) && promoteToKnight.hasInsufficientMaterial(color);\n      } else if (horde.rook === 1) {\n        // A lone rook mates a king on A8 bounded by a pawn/rook on A7 and a\n        // pawn/knight on B7. We ignore every other case, since it can be\n        // reduced to the two previous cases.\n        // (e.g. three pawns on A7, B7, C7)\n        return !(\n          pieces.pawn >= 2\n          || (pieces.rook >= 1 && pieces.pawn >= 1)\n          || (pieces.rook >= 1 && pieces.knight >= 1)\n          || (pieces.pawn >= 1 && pieces.knight >= 1)\n        );\n      } else if (horde.bishop === 1) {\n        // The horde has a lone bishop.\n        return !(\n          // The king can be mated on A1 if there is a pawn/opposite-color-bishop\n          // on A2 and an opposite-color-bishop on B1.\n          // If black has two or more pawns, white gets the benefit of the doubt;\n          // there is an outside chance that white promotes its pawns to\n          // opposite-color-bishops and selfmates theirself.\n          // Every other case that the king is mated by the bishop requires that\n          // black has two pawns or two opposite-color-bishop or a pawn and an\n          // opposite-color-bishop.\n          // For example a king on A3 can be mated if there is\n          // a pawn/opposite-color-bishop on A4, a pawn/opposite-color-bishop on\n          // B3, a pawn/bishop/rook/queen on A2 and any other piece on B2.\n          piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 2\n          || (piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1 && pieces.pawn >= 1)\n          || pieces.pawn >= 2\n        );\n      } else if (horde.knight === 1) {\n        // The horde has a lone knight.\n        return !(\n          // The king on A1 can be smother mated by a knight on C2 if there is\n          // a pawn/knight/bishop on B2, a knight/rook on B1 and any other piece\n          // on A2.\n          // Moreover, when black has four or more pieces and two of them are\n          // pawns, black can promote their pawns and selfmate theirself.\n          piecesNum >= 4\n          && (pieces.knight >= 2\n            || pieces.pawn >= 2\n            || (pieces.rook >= 1 && pieces.knight >= 1)\n            || (pieces.rook >= 1 && pieces.bishop >= 1)\n            || (pieces.knight >= 1 && pieces.bishop >= 1)\n            || (pieces.rook >= 1 && pieces.pawn >= 1)\n            || (pieces.knight >= 1 && pieces.pawn >= 1)\n            || (pieces.bishop >= 1 && pieces.pawn >= 1)\n            || (hasBishopPair(opposite(color)) && pieces.pawn >= 1))\n          && (piecesBishops('dark') < 2 || piecesOfRoleNot(piecesBishops('dark')) >= 3)\n          && (piecesBishops('light') < 2 || piecesOfRoleNot(piecesBishops('light')) >= 3)\n        );\n      }\n\n      // By this point, we only need to deal with white's minor pieces.\n    } else if (hordeNum === 2) {\n      if (piecesNum === 1) {\n        // Two minor pieces cannot mate a lone king.\n        return true;\n      } else if (horde.knight === 2) {\n        // A king on A1 is mated by two knights, if it is obstructed by a\n        // pawn/bishop/knight on B2. On the other hand, if black only has\n        // major pieces it is a draw.\n        return pieces.pawn + pieces.bishop + pieces.knight < 1;\n      } else if (hasBishopPair(color)) {\n        return !(\n          // A king on A1 obstructed by a pawn/bishop on A2 is mated\n          // by the bishop pair.\n          pieces.pawn >= 1\n          || pieces.bishop >= 1\n          // A pawn/bishop/knight on B4, a pawn/bishop/rook/queen on\n          // A4 and the king on A3 enable Boden's mate by the bishop\n          // pair. In every other case white cannot win.\n          || (pieces.knight >= 1 && pieces.rook + pieces.queen >= 1)\n        );\n      } else if (horde.bishop >= 1 && horde.knight >= 1) {\n        // The horde has a bishop and a knight.\n        return !(\n          // A king on A1 obstructed by a pawn/opposite-color-bishop on\n          // A2 is mated by a knight on D2 and a bishop on C3.\n          pieces.pawn >= 1\n          || piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1\n          // A king on A1 bounded by two friendly pieces on A2 and B1 is\n          // mated when the knight moves from D4 to C2 so that both the\n          // knight and the bishop deliver check.\n          || piecesOfRoleNot(piecesBishops(hordeBishopColor)) >= 3\n        );\n      } else {\n        // The horde has two or more bishops on the same color.\n        // White can only win if black has enough material to obstruct\n        // the squares of the opposite color around the king.\n        return !(\n          // A king on A1 obstructed by a pawn/opposite-bishop/knight\n          // on A2 and a opposite-bishop/knight on B1 is mated by two\n          // bishops on B2 and C3. This position is theoretically\n          // achievable even when black has two pawns or when they\n          // have a pawn and an opposite color bishop.\n          (pieces.pawn >= 1 && piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1)\n          || (pieces.pawn >= 1 && pieces.knight >= 1)\n          || (piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1 && pieces.knight >= 1)\n          || piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 2\n          || pieces.knight >= 2\n          || pieces.pawn >= 2\n          // In every other case, white can only draw.\n        );\n      }\n    } else if (hordeNum === 3) {\n      // A king in the corner is mated by two knights and a bishop or three\n      // knights or the bishop pair and a knight/bishop.\n      if ((horde.knight === 2 && horde.bishop === 1) || horde.knight === 3 || hasBishopPair(color)) {\n        return false;\n      } else {\n        // White has two same color bishops and a knight.\n        // A king on A1 is mated by a bishop on B2, a bishop on C1 and a\n        // knight on C3, as long as there is another black piece to waste\n        // a tempo.\n        return piecesNum === 1;\n      }\n    }\n\n    return true;\n  }\n\n  isVariantEnd(): boolean {\n    return this.board.white.isEmpty() || this.board.black.isEmpty();\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    if (this.board.white.isEmpty()) return { winner: 'black' };\n    if (this.board.black.isEmpty()) return { winner: 'white' };\n    return;\n  }\n}\n\nexport const defaultPosition = (rules: Rules): Position => {\n  switch (rules) {\n    case 'chess':\n      return Chess.default();\n    case 'antichess':\n      return Antichess.default();\n    case 'atomic':\n      return Atomic.default();\n    case 'horde':\n      return Horde.default();\n    case 'racingkings':\n      return RacingKings.default();\n    case 'kingofthehill':\n      return KingOfTheHill.default();\n    case '3check':\n      return ThreeCheck.default();\n    case 'crazyhouse':\n      return Crazyhouse.default();\n  }\n};\n\nexport const setupPosition = (rules: Rules, setup: Setup): Result<Position, PositionError> => {\n  switch (rules) {\n    case 'chess':\n      return Chess.fromSetup(setup);\n    case 'antichess':\n      return Antichess.fromSetup(setup);\n    case 'atomic':\n      return Atomic.fromSetup(setup);\n    case 'horde':\n      return Horde.fromSetup(setup);\n    case 'racingkings':\n      return RacingKings.fromSetup(setup);\n    case 'kingofthehill':\n      return KingOfTheHill.fromSetup(setup);\n    case '3check':\n      return ThreeCheck.fromSetup(setup);\n    case 'crazyhouse':\n      return Crazyhouse.fromSetup(setup);\n  }\n};\n\nexport const isStandardMaterial = (pos: Position): boolean => {\n  switch (pos.rules) {\n    case 'chess':\n    case 'antichess':\n    case 'atomic':\n    case 'kingofthehill':\n    case '3check':\n      return COLORS.every(color => isStandardMaterialSide(pos.board, color));\n    case 'crazyhouse': {\n      const promoted = pos.board.promoted;\n      return (\n        promoted.size() + pos.board.pawn.size() + (pos.pockets?.count('pawn') || 0) <= 16\n        && pos.board.knight.diff(promoted).size() + (pos.pockets?.count('knight') || 0) <= 4\n        && pos.board.bishop.diff(promoted).size() + (pos.pockets?.count('bishop') || 0) <= 4\n        && pos.board.rook.diff(promoted).size() + (pos.pockets?.count('rook') || 0) <= 4\n        && pos.board.queen.diff(promoted).size() + (pos.pockets?.count('queen') || 0) <= 2\n      );\n    }\n    case 'horde':\n      return COLORS.every(color =>\n        pos.board.pieces(color, 'king').nonEmpty()\n          ? isStandardMaterialSide(pos.board, color)\n          : pos.board[color].size() <= 36\n      );\n    case 'racingkings':\n      return COLORS.every(\n        color =>\n          pos.board.pieces(color, 'knight').size() <= 2\n          && pos.board.pieces(color, 'bishop').size() <= 2\n          && pos.board.pieces(color, 'rook').size() <= 2\n          && pos.board.pieces(color, 'queen').size() <= 1,\n      );\n  }\n};\n", "/**\n * Parse, transform and write PGN.\n *\n * ## Parser\n *\n * The parser will interpret any input as a PGN, creating a tree of\n * syntactically valid (but not necessarily legal) moves, skipping any invalid\n * tokens.\n *\n * ```ts\n * import { parsePgn, startingPosition } from 'chessops/pgn';\n * import { parseSan } from 'chessops/san';\n *\n * const pgn = '1. d4 d5 *';\n * const games = parsePgn(pgn);\n * for (const game of games) {\n *   const pos = startingPosition(game.headers).unwrap();\n *   for (const node of game.moves.mainline()) {\n *     const move = parseSan(pos, node.san);\n *     if (!move) break; // Illegal move\n *     pos.play(move);\n *   }\n * }\n * ```\n *\n * ## Streaming parser\n *\n * The module also provides a denial-of-service resistant streaming parser.\n * It can be configured with a budget for reasonable complexity of a single\n * game, fed with chunks of text, and will yield parsed games as they are\n * completed.\n *\n * ```ts\n *\n * import { createReadStream } from 'fs';\n * import { PgnParser } from 'chessops/pgn';\n *\n * const stream = createReadStream('games.pgn', { encoding: 'utf-8' });\n *\n * const parser = new PgnParser((game, err) => {\n *   if (err) {\n *     // Budget exceeded.\n *     stream.destroy(err);\n *   }\n *\n *   // Use game ...\n * });\n *\n * await new Promise<void>(resolve =>\n *   stream\n *     .on('data', (chunk: string) => parser.parse(chunk, { stream: true }))\n *     .on('close', () => {\n *       parser.parse('');\n *       resolve();\n *     })\n * );\n * ```\n *\n * ## Augmenting the game tree\n *\n * You can use `walk` to visit all nodes in the game tree, or `transform`\n * to augment it with user data.\n *\n * Both allow you to provide context. You update the context inside the\n * callback, and it is automatically `clone()`-ed at each fork.\n * In the example below, the current position `pos` is provided as context.\n *\n * ```ts\n * import { transform } from 'chessops/pgn';\n * import { makeFen } from 'chessops/fen';\n * import { parseSan, makeSanAndPlay } from 'chessops/san';\n *\n * const pos = startingPosition(game.headers).unwrap();\n * game.moves = transform(game.moves, pos, (pos, node) => {\n *   const move = parseSan(pos, node.san);\n *   if (!move) {\n *     // Illegal move. Returning undefined cuts off the tree here.\n *     return;\n *   }\n *\n *   const san = makeSanAndPlay(pos, move); // Mutating pos!\n *\n *   return {\n *     ...node, // Keep comments and annotation glyphs\n *     san, // Normalized SAN\n *     fen: makeFen(pos.toSetup()), // Add arbitrary user data to node\n *   };\n * });\n * ```\n *\n * ## Writing\n *\n * Requires each node to at least have a `san` property.\n *\n * ```\n * import { makePgn } from 'chessops/pgn';\n *\n * const rewrittenPgn = makePgn(game);\n * ```\n *\n * @packageDocumentation\n */\nimport { Result } from '@badrap/result';\nimport { IllegalSetup, Position, PositionError } from './chess.js';\nimport { FenError, makeFen, parseFen } from './fen.js';\nimport { Outcome, Rules, Square } from './types.js';\nimport { defined, makeSquare, parseSquare } from './util.js';\nimport { defaultPosition, setupPosition } from './variant.js';\n\nexport interface Game<T> {\n  headers: Map<string, string>;\n  comments?: string[];\n  moves: Node<T>;\n}\n\nexport const defaultGame = <T>(initHeaders: () => Map<string, string> = defaultHeaders): Game<T> => ({\n  headers: initHeaders(),\n  moves: new Node(),\n});\n\nexport class Node<T> {\n  children: ChildNode<T>[] = [];\n\n  *mainlineNodes(): Iterable<ChildNode<T>> {\n    let node: Node<T> = this;\n    while (node.children.length) {\n      const child = node.children[0];\n      yield child;\n      node = child;\n    }\n  }\n\n  *mainline(): Iterable<T> {\n    for (const child of this.mainlineNodes()) yield child.data;\n  }\n\n  end(): Node<T> {\n    let node: Node<T> = this;\n    while (node.children.length) node = node.children[0];\n    return node;\n  }\n}\n\nexport class ChildNode<T> extends Node<T> {\n  constructor(public data: T) {\n    super();\n  }\n}\n\nexport const isChildNode = <T>(node: Node<T>): node is ChildNode<T> => node instanceof ChildNode;\n\nexport const extend = <T>(node: Node<T>, data: T[]): Node<T> => {\n  for (const d of data) {\n    const child = new ChildNode(d);\n    node.children.push(child);\n    node = child;\n  }\n  return node;\n};\n\nexport class Box<T> {\n  constructor(public value: T) {}\n\n  clone(): Box<T> {\n    return new Box(this.value);\n  }\n}\n\nexport const transform = <T, U, C extends { clone(): C }>(\n  node: Node<T>,\n  ctx: C,\n  f: (ctx: C, data: T, childIndex: number) => U | undefined,\n): Node<U> => {\n  const root = new Node<U>();\n  const stack = [\n    {\n      before: node,\n      after: root,\n      ctx,\n    },\n  ];\n  let frame;\n  while ((frame = stack.pop())) {\n    for (let childIndex = 0; childIndex < frame.before.children.length; childIndex++) {\n      const ctx = childIndex < frame.before.children.length - 1 ? frame.ctx.clone() : frame.ctx;\n      const childBefore = frame.before.children[childIndex];\n      const data = f(ctx, childBefore.data, childIndex);\n      if (defined(data)) {\n        const childAfter = new ChildNode(data);\n        frame.after.children.push(childAfter);\n        stack.push({\n          before: childBefore,\n          after: childAfter,\n          ctx,\n        });\n      }\n    }\n  }\n  return root;\n};\n\nexport const walk = <T, C extends { clone(): C }>(\n  node: Node<T>,\n  ctx: C,\n  f: (ctx: C, data: T, childIndex: number) => boolean | void,\n) => {\n  const stack = [{ node, ctx }];\n  let frame;\n  while ((frame = stack.pop())) {\n    for (let childIndex = 0; childIndex < frame.node.children.length; childIndex++) {\n      const ctx = childIndex < frame.node.children.length - 1 ? frame.ctx.clone() : frame.ctx;\n      const child = frame.node.children[childIndex];\n      if (f(ctx, child.data, childIndex) !== false) stack.push({ node: child, ctx });\n    }\n  }\n};\n\nexport interface PgnNodeData {\n  san: string;\n  startingComments?: string[];\n  comments?: string[];\n  nags?: number[];\n}\n\nexport const makeOutcome = (outcome: Outcome | undefined): string => {\n  if (!outcome) return '*';\n  else if (outcome.winner === 'white') return '1-0';\n  else if (outcome.winner === 'black') return '0-1';\n  else return '1/2-1/2';\n};\n\nexport const parseOutcome = (s: string | undefined): Outcome | undefined => {\n  if (s === '1-0' || s === '1–0' || s === '1—0') return { winner: 'white' };\n  else if (s === '0-1' || s === '0–1' || s === '0—1') return { winner: 'black' };\n  else if (s === '1/2-1/2' || s === '1/2–1/2' || s === '1/2—1/2') return { winner: undefined };\n  else return;\n};\n\nconst escapeHeader = (value: string): string => value.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n\nconst safeComment = (comment: string): string => comment.replace(/\\}/g, '');\n\nconst enum MakePgnState {\n  Pre = 0,\n  Sidelines = 1,\n  End = 2,\n}\n\ninterface MakePgnFrame {\n  state: MakePgnState;\n  ply: number;\n  node: ChildNode<PgnNodeData>;\n  sidelines: Iterator<ChildNode<PgnNodeData>>;\n  startsVariation: boolean;\n  inVariation: boolean;\n}\n\nexport const makePgn = (game: Game<PgnNodeData>): string => {\n  const builder = [],\n    tokens = [];\n\n  if (game.headers.size) {\n    for (const [key, value] of game.headers.entries()) {\n      builder.push('[', key, ' \"', escapeHeader(value), '\"]\\n');\n    }\n    builder.push('\\n');\n  }\n\n  for (const comment of game.comments || []) tokens.push('{', safeComment(comment), '}');\n\n  const fen = game.headers.get('FEN');\n  const initialPly = fen\n    ? parseFen(fen).unwrap(\n      setup => (setup.fullmoves - 1) * 2 + (setup.turn === 'white' ? 0 : 1),\n      _ => 0,\n    )\n    : 0;\n\n  const stack: MakePgnFrame[] = [];\n\n  const variations = game.moves.children[Symbol.iterator]();\n  const firstVariation = variations.next();\n  if (!firstVariation.done) {\n    stack.push({\n      state: MakePgnState.Pre,\n      ply: initialPly,\n      node: firstVariation.value,\n      sidelines: variations,\n      startsVariation: false,\n      inVariation: false,\n    });\n  }\n\n  let forceMoveNumber = true;\n  while (stack.length) {\n    const frame = stack[stack.length - 1];\n\n    if (frame.inVariation) {\n      tokens.push(')');\n      frame.inVariation = false;\n      forceMoveNumber = true;\n    }\n\n    switch (frame.state) {\n      case MakePgnState.Pre:\n        for (const comment of frame.node.data.startingComments || []) {\n          tokens.push('{', safeComment(comment), '}');\n          forceMoveNumber = true;\n        }\n        if (forceMoveNumber || frame.ply % 2 === 0) {\n          tokens.push(Math.floor(frame.ply / 2) + 1 + (frame.ply % 2 ? '...' : '.'));\n          forceMoveNumber = false;\n        }\n        tokens.push(frame.node.data.san);\n        for (const nag of frame.node.data.nags || []) {\n          tokens.push('$' + nag);\n          forceMoveNumber = true;\n        }\n        for (const comment of frame.node.data.comments || []) {\n          tokens.push('{', safeComment(comment), '}');\n        }\n        frame.state = MakePgnState.Sidelines; // fall through\n      case MakePgnState.Sidelines: {\n        const child = frame.sidelines.next();\n        if (child.done) {\n          const variations = frame.node.children[Symbol.iterator]();\n          const firstVariation = variations.next();\n          if (!firstVariation.done) {\n            stack.push({\n              state: MakePgnState.Pre,\n              ply: frame.ply + 1,\n              node: firstVariation.value,\n              sidelines: variations,\n              startsVariation: false,\n              inVariation: false,\n            });\n          }\n          frame.state = MakePgnState.End;\n        } else {\n          tokens.push('(');\n          forceMoveNumber = true;\n          stack.push({\n            state: MakePgnState.Pre,\n            ply: frame.ply,\n            node: child.value,\n            sidelines: [][Symbol.iterator](),\n            startsVariation: true,\n            inVariation: false,\n          });\n          frame.inVariation = true;\n        }\n        break;\n      }\n      case MakePgnState.End:\n        stack.pop();\n    }\n  }\n\n  tokens.push(makeOutcome(parseOutcome(game.headers.get('Result'))));\n\n  builder.push(tokens.join(' '), '\\n');\n  return builder.join('');\n};\n\nexport const defaultHeaders = (): Map<string, string> =>\n  new Map([\n    ['Event', '?'],\n    ['Site', '?'],\n    ['Date', '????.??.??'],\n    ['Round', '?'],\n    ['White', '?'],\n    ['Black', '?'],\n    ['Result', '*'],\n  ]);\n\nexport const emptyHeaders = (): Map<string, string> => new Map();\n\nconst BOM = '\\ufeff';\n\nconst isWhitespace = (line: string): boolean => /^\\s*$/.test(line);\n\nconst isCommentLine = (line: string): boolean => line.startsWith('%');\n\nexport interface ParseOptions {\n  stream: boolean;\n}\n\ninterface ParserFrame {\n  parent: Node<PgnNodeData>;\n  root: boolean;\n  node?: ChildNode<PgnNodeData>;\n  startingComments?: string[];\n}\n\nconst enum ParserState {\n  Bom = 0,\n  Pre = 1,\n  Headers = 2,\n  Moves = 3,\n  Comment = 4,\n}\n\nexport class PgnError extends Error {}\n\nexport class PgnParser {\n  private lineBuf: string[] = [];\n\n  private budget: number;\n  private found: boolean;\n  private state: ParserState;\n  private game: Game<PgnNodeData>;\n  private stack: ParserFrame[];\n  private commentBuf: string[];\n\n  constructor(\n    private emitGame: (game: Game<PgnNodeData>, err: PgnError | undefined) => void,\n    private initHeaders: () => Map<string, string> = defaultHeaders,\n    private maxBudget = 1_000_000,\n  ) {\n    this.resetGame();\n    this.state = ParserState.Bom;\n  }\n\n  private resetGame() {\n    this.budget = this.maxBudget;\n    this.found = false;\n    this.state = ParserState.Pre;\n    this.game = defaultGame(this.initHeaders);\n    this.stack = [{ parent: this.game.moves, root: true }];\n    this.commentBuf = [];\n  }\n\n  private consumeBudget(cost: number) {\n    this.budget -= cost;\n    if (this.budget < 0) throw new PgnError('ERR_PGN_BUDGET');\n  }\n\n  parse(data: string, options?: ParseOptions): void {\n    if (this.budget < 0) return;\n    try {\n      let idx = 0;\n      for (;;) {\n        const nlIdx = data.indexOf('\\n', idx);\n        if (nlIdx === -1) {\n          break;\n        }\n        const crIdx = nlIdx > idx && data[nlIdx - 1] === '\\r' ? nlIdx - 1 : nlIdx;\n        this.consumeBudget(nlIdx - idx);\n        this.lineBuf.push(data.slice(idx, crIdx));\n        idx = nlIdx + 1;\n        this.handleLine();\n      }\n      this.consumeBudget(data.length - idx);\n      this.lineBuf.push(data.slice(idx));\n\n      if (!options?.stream) {\n        this.handleLine();\n        this.emit(undefined);\n      }\n    } catch (err: unknown) {\n      this.emit(err as PgnError);\n    }\n  }\n\n  private handleLine() {\n    let freshLine = true;\n    let line = this.lineBuf.join('');\n    this.lineBuf = [];\n\n    continuedLine: for (;;) {\n      switch (this.state) {\n        case ParserState.Bom:\n          if (line.startsWith(BOM)) line = line.slice(BOM.length);\n          this.state = ParserState.Pre; // fall through\n        case ParserState.Pre:\n          if (isWhitespace(line) || isCommentLine(line)) return;\n          this.found = true;\n          this.state = ParserState.Headers; // fall through\n        case ParserState.Headers: {\n          if (isCommentLine(line)) return;\n          let moreHeaders = true;\n          while (moreHeaders) {\n            moreHeaders = false;\n            line = line.replace(\n              /^\\s*\\[([A-Za-z0-9][A-Za-z0-9_+#=:-]*)\\s+\"((?:[^\"\\\\]|\\\\\"|\\\\\\\\)*)\"\\]/,\n              (_match, headerName, headerValue) => {\n                this.consumeBudget(200);\n                this.handleHeader(headerName, headerValue.replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\'));\n                moreHeaders = true;\n                freshLine = false;\n                return '';\n              },\n            );\n          }\n          if (isWhitespace(line)) return;\n          this.state = ParserState.Moves; // fall through\n        }\n        case ParserState.Moves: {\n          if (freshLine) {\n            if (isCommentLine(line)) return;\n            if (isWhitespace(line)) return this.emit(undefined);\n          }\n          const tokenRegex =\n            /(?:[NBKRQ]?[a-h]?[1-8]?[-x]?[a-h][1-8](?:=?[nbrqkNBRQK])?|[pnbrqkPNBRQK]?@[a-h][1-8]|[O0o][-–—][O0o](?:[-–—][O0o])?)[+#]?|--|Z0|0000|@@@@|{|;|\\$\\d{1,4}|[?!]{1,2}|\\(|\\)|\\*|1[-–—]0|0[-–—]1|1\\/2[-–—]1\\/2/g;\n          let match;\n          while ((match = tokenRegex.exec(line))) {\n            const frame = this.stack[this.stack.length - 1];\n            let token = match[0];\n            if (token === ';') return;\n            else if (token.startsWith('$')) this.handleNag(parseInt(token.slice(1), 10));\n            else if (token === '!') this.handleNag(1);\n            else if (token === '?') this.handleNag(2);\n            else if (token === '!!') this.handleNag(3);\n            else if (token === '??') this.handleNag(4);\n            else if (token === '!?') this.handleNag(5);\n            else if (token === '?!') this.handleNag(6);\n            else if (\n              token === '1-0' || token === '1–0' || token === '1—0'\n              || token === '0-1' || token === '0–1' || token === '0—1'\n              || token === '1/2-1/2' || token === '1/2–1/2' || token === '1/2—1/2'\n              || token === '*'\n            ) {\n              if (this.stack.length === 1 && token !== '*') this.handleHeader('Result', token);\n            } else if (token === '(') {\n              this.consumeBudget(100);\n              this.stack.push({ parent: frame.parent, root: false });\n            } else if (token === ')') {\n              if (this.stack.length > 1) this.stack.pop();\n            } else if (token === '{') {\n              const openIndex = tokenRegex.lastIndex;\n              const beginIndex = line[openIndex] === ' ' ? openIndex + 1 : openIndex;\n              line = line.slice(beginIndex);\n              this.state = ParserState.Comment;\n              continue continuedLine;\n            } else {\n              this.consumeBudget(100);\n              if (token.startsWith('O') || token.startsWith('0') || token.startsWith('o')) {\n                token = token.replace(/[0o]/g, 'O').replace(/[–—]/g, '-');\n              } else if (token === 'Z0' || token === '0000' || token === '@@@@') token = '--';\n\n              if (frame.node) frame.parent = frame.node;\n              frame.node = new ChildNode({\n                san: token,\n                startingComments: frame.startingComments,\n              });\n              frame.startingComments = undefined;\n              frame.root = false;\n              frame.parent.children.push(frame.node);\n            }\n          }\n          return;\n        }\n        case ParserState.Comment: {\n          const closeIndex = line.indexOf('}');\n          if (closeIndex === -1) {\n            this.commentBuf.push(line);\n            return;\n          } else {\n            const endIndex = closeIndex > 0 && line[closeIndex - 1] === ' ' ? closeIndex - 1 : closeIndex;\n            this.commentBuf.push(line.slice(0, endIndex));\n            this.handleComment();\n            line = line.slice(closeIndex);\n            this.state = ParserState.Moves;\n            freshLine = false;\n          }\n        }\n      }\n    }\n  }\n\n  private handleHeader(name: string, value: string) {\n    this.game.headers.set(name, name === 'Result' ? makeOutcome(parseOutcome(value)) : value);\n  }\n\n  private handleNag(nag: number) {\n    this.consumeBudget(50);\n    const frame = this.stack[this.stack.length - 1];\n    if (frame.node) {\n      frame.node.data.nags ||= [];\n      frame.node.data.nags.push(nag);\n    }\n  }\n\n  private handleComment() {\n    this.consumeBudget(100);\n    const frame = this.stack[this.stack.length - 1];\n    const comment = this.commentBuf.join('\\n');\n    this.commentBuf = [];\n    if (frame.node) {\n      frame.node.data.comments ||= [];\n      frame.node.data.comments.push(comment);\n    } else if (frame.root) {\n      this.game.comments ||= [];\n      this.game.comments.push(comment);\n    } else {\n      frame.startingComments ||= [];\n      frame.startingComments.push(comment);\n    }\n  }\n\n  private emit(err: PgnError | undefined) {\n    if (this.state === ParserState.Comment) this.handleComment();\n    if (err) return this.emitGame(this.game, err);\n    if (this.found) this.emitGame(this.game, undefined);\n    this.resetGame();\n  }\n}\n\nexport const parsePgn = (pgn: string, initHeaders: () => Map<string, string> = defaultHeaders): Game<PgnNodeData>[] => {\n  const games: Game<PgnNodeData>[] = [];\n  new PgnParser(game => games.push(game), initHeaders, NaN).parse(pgn);\n  return games;\n};\n\nexport const parseVariant = (variant: string | undefined): Rules | undefined => {\n  switch ((variant || 'chess').toLowerCase()) {\n    case 'chess':\n    case 'chess960':\n    case 'chess 960':\n    case 'standard':\n    case 'from position':\n    case 'classical':\n    case 'normal':\n    case 'fischerandom': // Cute Chess\n    case 'fischerrandom':\n    case 'fischer random':\n    case 'wild/0':\n    case 'wild/1':\n    case 'wild/2':\n    case 'wild/3':\n    case 'wild/4':\n    case 'wild/5':\n    case 'wild/6':\n    case 'wild/7':\n    case 'wild/8':\n    case 'wild/8a':\n      return 'chess';\n    case 'crazyhouse':\n    case 'crazy house':\n    case 'house':\n    case 'zh':\n      return 'crazyhouse';\n    case 'king of the hill':\n    case 'koth':\n    case 'kingofthehill':\n      return 'kingofthehill';\n    case 'three-check':\n    case 'three check':\n    case 'threecheck':\n    case 'three check chess':\n    case '3-check':\n    case '3 check':\n    case '3check':\n      return '3check';\n    case 'antichess':\n    case 'anti chess':\n    case 'anti':\n      return 'antichess';\n    case 'atomic':\n    case 'atom':\n    case 'atomic chess':\n      return 'atomic';\n    case 'horde':\n    case 'horde chess':\n      return 'horde';\n    case 'racing kings':\n    case 'racingkings':\n    case 'racing':\n    case 'race':\n      return 'racingkings';\n    default:\n      return;\n  }\n};\n\nexport const makeVariant = (rules: Rules): string | undefined => {\n  switch (rules) {\n    case 'chess':\n      return;\n    case 'crazyhouse':\n      return 'Crazyhouse';\n    case 'racingkings':\n      return 'Racing Kings';\n    case 'horde':\n      return 'Horde';\n    case 'atomic':\n      return 'Atomic';\n    case 'antichess':\n      return 'Antichess';\n    case '3check':\n      return 'Three-check';\n    case 'kingofthehill':\n      return 'King of the Hill';\n  }\n};\n\nexport const startingPosition = (headers: Map<string, string>): Result<Position, FenError | PositionError> => {\n  const rules = parseVariant(headers.get('Variant'));\n  if (!rules) return Result.err(new PositionError(IllegalSetup.Variant));\n  const fen = headers.get('FEN');\n  if (fen) return parseFen(fen).chain(setup => setupPosition(rules, setup));\n  else return Result.ok(defaultPosition(rules));\n};\n\nexport const setStartingPosition = (headers: Map<string, string>, pos: Position) => {\n  const variant = makeVariant(pos.rules);\n  if (variant) headers.set('Variant', variant);\n  else headers.delete('Variant');\n\n  const fen = makeFen(pos.toSetup());\n  const defaultFen = makeFen(defaultPosition(pos.rules).toSetup());\n  if (fen !== defaultFen) headers.set('FEN', fen);\n  else headers.delete('FEN');\n};\n\nexport type CommentShapeColor = 'green' | 'red' | 'yellow' | 'blue';\n\nexport interface CommentShape {\n  color: CommentShapeColor;\n  from: Square;\n  to: Square;\n}\n\nexport type EvaluationPawns = { pawns: number; depth?: number };\nexport type EvaluationMate = { mate: number; depth?: number };\nexport type Evaluation = EvaluationPawns | EvaluationMate;\n\nexport const isPawns = (ev: Evaluation): ev is EvaluationPawns => 'pawns' in ev;\nexport const isMate = (ev: Evaluation): ev is EvaluationMate => 'mate' in ev;\n\nexport interface Comment {\n  text: string;\n  shapes: CommentShape[];\n  clock?: number;\n  emt?: number;\n  evaluation?: Evaluation;\n}\n\nconst makeClk = (seconds: number): string => {\n  seconds = Math.max(0, seconds);\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  seconds = (seconds % 3600) % 60;\n  return `${hours}:${minutes.toString().padStart(2, '0')}:${\n    seconds.toLocaleString('en', {\n      minimumIntegerDigits: 2,\n      maximumFractionDigits: 3,\n    })\n  }`;\n};\n\nconst makeCommentShapeColor = (color: CommentShapeColor): 'G' | 'R' | 'Y' | 'B' => {\n  switch (color) {\n    case 'green':\n      return 'G';\n    case 'red':\n      return 'R';\n    case 'yellow':\n      return 'Y';\n    case 'blue':\n      return 'B';\n  }\n};\n\nfunction parseCommentShapeColor(str: 'G' | 'R' | 'Y' | 'B'): CommentShapeColor;\nfunction parseCommentShapeColor(str: string): CommentShapeColor | undefined;\nfunction parseCommentShapeColor(str: string): CommentShapeColor | undefined {\n  switch (str) {\n    case 'G':\n      return 'green';\n    case 'R':\n      return 'red';\n    case 'Y':\n      return 'yellow';\n    case 'B':\n      return 'blue';\n    default:\n      return;\n  }\n}\n\nconst makeCommentShape = (shape: CommentShape): string =>\n  shape.to === shape.from\n    ? `${makeCommentShapeColor(shape.color)}${makeSquare(shape.to)}`\n    : `${makeCommentShapeColor(shape.color)}${makeSquare(shape.from)}${makeSquare(shape.to)}`;\n\nconst parseCommentShape = (str: string): CommentShape | undefined => {\n  const color = parseCommentShapeColor(str.slice(0, 1));\n  const from = parseSquare(str.slice(1, 3));\n  const to = parseSquare(str.slice(3, 5));\n  if (!color || !defined(from)) return;\n  if (str.length === 3) return { color, from, to: from };\n  if (str.length === 5 && defined(to)) return { color, from, to };\n  return;\n};\n\nconst makeEval = (ev: Evaluation): string => {\n  const str = isMate(ev) ? '#' + ev.mate : ev.pawns.toFixed(2);\n  return defined(ev.depth) ? str + ',' + ev.depth : str;\n};\n\nexport const makeComment = (comment: Partial<Comment>): string => {\n  const builder = [];\n  if (defined(comment.text)) builder.push(comment.text);\n  const circles = (comment.shapes || []).filter(shape => shape.to === shape.from).map(makeCommentShape);\n  if (circles.length) builder.push(`[%csl ${circles.join(',')}]`);\n  const arrows = (comment.shapes || []).filter(shape => shape.to !== shape.from).map(makeCommentShape);\n  if (arrows.length) builder.push(`[%cal ${arrows.join(',')}]`);\n  if (comment.evaluation) builder.push(`[%eval ${makeEval(comment.evaluation)}]`);\n  if (defined(comment.emt)) builder.push(`[%emt ${makeClk(comment.emt)}]`);\n  if (defined(comment.clock)) builder.push(`[%clk ${makeClk(comment.clock)}]`);\n  return builder.join(' ');\n};\n\nexport const parseComment = (comment: string): Comment => {\n  let emt, clock, evaluation;\n  const shapes: CommentShape[] = [];\n  const text = comment\n    .replace(\n      /\\s?\\[%(emt|clk)\\s(\\d{1,5}):(\\d{1,2}):(\\d{1,2}(?:\\.\\d{0,3})?)\\]\\s?/g,\n      (_, annotation, hours, minutes, seconds) => {\n        const value = parseInt(hours, 10) * 3600 + parseInt(minutes, 10) * 60 + parseFloat(seconds);\n        if (annotation === 'emt') emt = value;\n        else if (annotation === 'clk') clock = value;\n        return '  ';\n      },\n    )\n    .replace(\n      /\\s?\\[%(?:csl|cal)\\s([RGYB][a-h][1-8](?:[a-h][1-8])?(?:,[RGYB][a-h][1-8](?:[a-h][1-8])?)*)\\]\\s?/g,\n      (_, arrows) => {\n        for (const arrow of arrows.split(',')) {\n          shapes.push(parseCommentShape(arrow)!);\n        }\n        return '  ';\n      },\n    )\n    .replace(\n      /\\s?\\[%eval\\s(?:#([+-]?\\d{1,5})|([+-]?(?:\\d{1,5}|\\d{0,5}\\.\\d{1,2})))(?:,(\\d{1,5}))?\\]\\s?/g,\n      (_, mate, pawns, d) => {\n        const depth = d && parseInt(d, 10);\n        evaluation = mate ? { mate: parseInt(mate, 10), depth } : { pawns: parseFloat(pawns), depth };\n        return '  ';\n      },\n    )\n    .trim();\n  return {\n    text,\n    shapes,\n    emt,\n    clock,\n    evaluation,\n  };\n};\n", "export {\n  ByCastlingSide,\n  ByColor,\n  ByRole,\n  BySquare,\n  CASTLING_SIDES,\n  CastlingSide,\n  Color,\n  COLORS,\n  DropMove,\n  FILE_NAMES,\n  FileName,\n  isDrop,\n  isNormal,\n  Move,\n  NormalMove,\n  Outcome,\n  Piece,\n  RANK_NAMES,\n  RankName,\n  Role,\n  ROLES,\n  RULES,\n  Rules,\n  Square,\n  SquareName,\n} from './types.js';\n\nexport {\n  charToRole,\n  defined,\n  kingCastlesTo,\n  makeSquare,\n  makeUci,\n  opposite,\n  parseSquare,\n  parseUci,\n  roleToChar,\n  squareFile,\n  squareRank,\n} from './util.js';\n\nexport { SquareSet } from './squareSet.js';\n\nexport {\n  attacks,\n  between,\n  bishopAttacks,\n  kingAttacks,\n  knightAttacks,\n  pawnAttacks,\n  queenAttacks,\n  ray,\n  rookAttacks,\n} from './attacks.js';\n\nexport { Board } from './board.js';\n\nexport { defaultSetup, Material, MaterialSide, RemainingChecks, Setup } from './setup.js';\n\nexport { Castles, Chess, Context, IllegalSetup, Position, PositionError } from './chess.js';\n\nexport * as compat from './compat.js';\n\nexport * as debug from './debug.js';\n\nexport * as fen from './fen.js';\n\nexport * as san from './san.js';\n\nexport * as transform from './transform.js';\n\nexport * as variant from './variant.js';\n\nexport * as pgn from './pgn.js';\n", "import { Chess, fen, pgn, san } from 'chessops/index';\n\nnamespace LichessShowCommonMove {\n  type ChessMove = {\n    opening: string;\n    moves: string;\n  };\n\n  let previousMoves = '';\n  let observerCnt = 0;\n\n  const observerOptions = {\n    childList: true,\n    subtree: true,\n  };\n\n  const createMoveBlock = () => {\n    const moveBlock = document.getElementById('common-move-block');\n    if (moveBlock) {\n      return moveBlock;\n    }\n    const parent = document.querySelector('div.material.material-bottom');\n    if (parent) {\n      const moveBlock = document.createElement('div');\n      moveBlock.id = 'common-move-block';\n      parent.parentElement?.insertBefore(moveBlock, parent.nextSibling);\n      return moveBlock;\n    }\n    console.error('Could not find parent element');\n    return null;\n  };\n\n  const pgnToFen = (pgnString: string) => {\n    try {\n      // Parse the PGN string\n      const parsedPgn = pgn.parsePgn(pgnString);\n\n      // Get the first game from the parsed PGN\n      // parsePgn returns an array of games\n      const game = parsedPgn[0];\n\n      // Initialize a new chess position\n      const pos = Chess.default();\n\n      // Play through all the moves in the mainline\n      Array.from(game.moves.mainline()).forEach(move => {\n        const parsed = san.parseSan(pos, move.san);\n        if (!parsed) {\n          throw new Error(`Invalid move: ${move.san}`);\n        }\n        pos.play(parsed);\n      });\n\n      // Return the final position as FEN\n      return fen.makeFen(pos.toSetup());\n    } catch (error) {\n      throw new Error(`Error processing PGN: ${error}`);\n    }\n  };\n\n  const handleResponse = (response: ChessMove, observer: MutationObserver) => {\n    const moveBlock = createMoveBlock();\n    if (response.moves) {\n      if (moveBlock) {\n        moveBlock.innerHTML = `<div>Opening: ${response.opening}</div><div>Move: ${response.moves}</div>`;\n      }\n    } else {\n      observer.disconnect();\n      if (moveBlock) {\n        moveBlock.innerHTML = `<div>No more known moves</div>`;\n      }\n    }\n  };\n\n  const getMoveList = async (node: Element, observer: MutationObserver) => {\n    // We need to get the full move list so go to parent element\n    const parentElement = node.parentElement;\n    if (!parentElement) {\n      console.log('Could not find parent element. Unexpected error');\n      return;\n    }\n    let currentMoves = '';\n    for (const item of Array.from(parentElement.children)) {\n      if (item.nodeName == 'I5Z') {\n        currentMoves += `${item.textContent}.`;\n      } else if (item.nodeName == 'KWDB') {\n        currentMoves += `${item.textContent} `;\n      }\n    }\n    if (currentMoves === previousMoves) {\n      return;\n    }\n    console.log(`Moves: ${currentMoves}`);\n    const parsedToFen = pgnToFen(currentMoves.trim());\n    console.log(`Parsed Moves: ${parsedToFen}`);\n\n    // check the cache first\n    let cachedMoves = window.localStorage.getItem(parsedToFen);\n    if (!cachedMoves) {\n      // populate the cache\n      // Now make the call\n      const response = await GM.xmlHttpRequest({\n        method: 'GET',\n        url: `https://explorer.lichess.ovh/masters?fen=${parsedToFen}`,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (response.status === 200) {\n        const parsedResponse = JSON.parse(response.responseText);\n        const storedObject: ChessMove = {\n          opening: parsedResponse.opening?.name ?? 'Unknown',\n          moves: parsedResponse.moves.length > 0 ? parsedResponse.moves[0].uci : '',\n        };\n        const value = JSON.stringify(storedObject);\n        console.log(`Stored Key-Value pair: Key:${parsedToFen}; Value:${value}`);\n        window.localStorage.setItem(parsedToFen, value);\n        cachedMoves = value;\n      } else {\n        console.error(`Error fetching moves: ${response.statusText}`);\n      }\n    }\n    if (cachedMoves) {\n      const movesObject = JSON.parse(cachedMoves);\n      handleResponse(movesObject, observer);\n    } else {\n      console.error('No moves to handle');\n    }\n    previousMoves = currentMoves;\n  };\n\n  const getMovesDiv = (element: Element) => {\n    observerCnt++;\n    return element.querySelector('rm6, l4x') ? element : null;\n  };\n\n  const getMoves: MutationCallback = (records, observer): void => {\n    // this observer is used to get the latest moves\n    for (const record of records) {\n      for (const item of Array.from(record.addedNodes)) {\n        if (item.nodeType === Node.ELEMENT_NODE) {\n          getMoveList(item as Element, observer);\n        }\n      }\n    }\n  };\n\n  const findNode: MutationCallback = (records, observer): void => {\n    // this observer is used to narrow down to the node we care about\n    for (const record of records) {\n      // filter down to the node we care about\n      for (const item of Array.from(record.addedNodes)) {\n        if (item.nodeType == Node.ELEMENT_NODE) {\n          const retNode = getMovesDiv(item as Element);\n          if (retNode) {\n            observer.disconnect();\n            const movesObserver = new MutationObserver(getMoves);\n            movesObserver.observe(retNode, observerOptions);\n            break;\n          } else if (observerCnt > 75) {\n            // We're not going to find it on this page so stop looking\n            observer.disconnect();\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  export const main = (): void => {\n    const observer = new MutationObserver(findNode);\n    observer.observe(document.body, observerOptions);\n  };\n}\nLichessShowCommonMove.main();\n"],
  "mappings": "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",
=======
  "sourcesContent": ["export const FILE_NAMES = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] as const;\n\nexport type FileName = (typeof FILE_NAMES)[number];\n\nexport const RANK_NAMES = ['1', '2', '3', '4', '5', '6', '7', '8'] as const;\n\nexport type RankName = (typeof RANK_NAMES)[number];\n\nexport type Square = number;\n\nexport type SquareName = `${FileName}${RankName}`;\n\n/**\n * Indexable by square indices.\n */\nexport type BySquare<T> = T[];\n\nexport const COLORS = ['white', 'black'] as const;\n\nexport type Color = (typeof COLORS)[number];\n\n/**\n * Indexable by `white` and `black`.\n */\nexport type ByColor<T> = {\n  [color in Color]: T;\n};\n\nexport const ROLES = ['pawn', 'knight', 'bishop', 'rook', 'queen', 'king'] as const;\n\nexport type Role = (typeof ROLES)[number];\n\n/**\n * Indexable by `pawn`, `knight`, `bishop`, `rook`, `queen`, and `king`.\n */\nexport type ByRole<T> = {\n  [role in Role]: T;\n};\n\nexport const CASTLING_SIDES = ['a', 'h'] as const;\n\nexport type CastlingSide = (typeof CASTLING_SIDES)[number];\n\n/**\n * Indexable by `a` and `h`.\n */\nexport type ByCastlingSide<T> = {\n  [side in CastlingSide]: T;\n};\n\nexport interface Piece {\n  role: Role;\n  color: Color;\n  promoted?: boolean;\n}\n\nexport interface NormalMove {\n  from: Square;\n  to: Square;\n  promotion?: Role;\n}\n\nexport interface DropMove {\n  role: Role;\n  to: Square;\n}\n\nexport type Move = NormalMove | DropMove;\n\nexport const isDrop = (v: Move): v is DropMove => 'role' in v;\n\nexport const isNormal = (v: Move): v is NormalMove => 'from' in v;\n\nexport const RULES = [\n  'chess',\n  'antichess',\n  'kingofthehill',\n  '3check',\n  'atomic',\n  'horde',\n  'racingkings',\n  'crazyhouse',\n] as const;\n\nexport type Rules = (typeof RULES)[number];\n\nexport interface Outcome {\n  winner: Color | undefined;\n}\n", "import {\n  CastlingSide,\n  Color,\n  FILE_NAMES,\n  isDrop,\n  isNormal,\n  Move,\n  RANK_NAMES,\n  Role,\n  Square,\n  SquareName,\n} from './types.js';\n\nexport const defined = <A>(v: A | undefined): v is A => v !== undefined;\n\nexport const opposite = (color: Color): Color => (color === 'white' ? 'black' : 'white');\n\nexport const squareRank = (square: Square): number => square >> 3;\n\nexport const squareFile = (square: Square): number => square & 0x7;\n\nexport const squareFromCoords = (file: number, rank: number): Square | undefined =>\n  0 <= file && file < 8 && 0 <= rank && rank < 8 ? file + 8 * rank : undefined;\n\nexport const roleToChar = (role: Role): string => {\n  switch (role) {\n    case 'pawn':\n      return 'p';\n    case 'knight':\n      return 'n';\n    case 'bishop':\n      return 'b';\n    case 'rook':\n      return 'r';\n    case 'queen':\n      return 'q';\n    case 'king':\n      return 'k';\n  }\n};\n\nexport function charToRole(ch: 'p' | 'n' | 'b' | 'r' | 'q' | 'k' | 'P' | 'N' | 'B' | 'R' | 'Q' | 'K'): Role;\nexport function charToRole(ch: string): Role | undefined;\nexport function charToRole(ch: string): Role | undefined {\n  switch (ch.toLowerCase()) {\n    case 'p':\n      return 'pawn';\n    case 'n':\n      return 'knight';\n    case 'b':\n      return 'bishop';\n    case 'r':\n      return 'rook';\n    case 'q':\n      return 'queen';\n    case 'k':\n      return 'king';\n    default:\n      return;\n  }\n}\n\nexport function parseSquare(str: SquareName): Square;\nexport function parseSquare(str: string): Square | undefined;\nexport function parseSquare(str: string): Square | undefined {\n  if (str.length !== 2) return;\n  return squareFromCoords(str.charCodeAt(0) - 'a'.charCodeAt(0), str.charCodeAt(1) - '1'.charCodeAt(0));\n}\n\nexport const makeSquare = (square: Square): SquareName =>\n  (FILE_NAMES[squareFile(square)] + RANK_NAMES[squareRank(square)]) as SquareName;\n\nexport const parseUci = (str: string): Move | undefined => {\n  if (str[1] === '@' && str.length === 4) {\n    const role = charToRole(str[0]);\n    const to = parseSquare(str.slice(2));\n    if (role && defined(to)) return { role, to };\n  } else if (str.length === 4 || str.length === 5) {\n    const from = parseSquare(str.slice(0, 2));\n    const to = parseSquare(str.slice(2, 4));\n    let promotion: Role | undefined;\n    if (str.length === 5) {\n      promotion = charToRole(str[4]);\n      if (!promotion) return;\n    }\n    if (defined(from) && defined(to)) return { from, to, promotion };\n  }\n  return;\n};\n\nexport const moveEquals = (left: Move, right: Move): boolean => {\n  if (left.to !== right.to) return false;\n  if (isDrop(left)) return isDrop(right) && left.role === right.role;\n  else return isNormal(right) && left.from === right.from && left.promotion === right.promotion;\n};\n\n/**\n * Converts a move to UCI notation, like `g1f3` for a normal move,\n * `a7a8q` for promotion to a queen, and `Q@f7` for a Crazyhouse drop.\n */\nexport const makeUci = (move: Move): string =>\n  isDrop(move)\n    ? `${roleToChar(move.role).toUpperCase()}@${makeSquare(move.to)}`\n    : makeSquare(move.from) + makeSquare(move.to) + (move.promotion ? roleToChar(move.promotion) : '');\n\nexport const kingCastlesTo = (color: Color, side: CastlingSide): Square =>\n  color === 'white' ? (side === 'a' ? 2 : 6) : side === 'a' ? 58 : 62;\n\nexport const rookCastlesTo = (color: Color, side: CastlingSide): Square =>\n  color === 'white' ? (side === 'a' ? 3 : 5) : side === 'a' ? 59 : 61;\n", "import { Color, Square } from './types.js';\n\nconst popcnt32 = (n: number): number => {\n  n = n - ((n >>> 1) & 0x5555_5555);\n  n = (n & 0x3333_3333) + ((n >>> 2) & 0x3333_3333);\n  return Math.imul((n + (n >>> 4)) & 0x0f0f_0f0f, 0x0101_0101) >> 24;\n};\n\nconst bswap32 = (n: number): number => {\n  n = ((n >>> 8) & 0x00ff_00ff) | ((n & 0x00ff_00ff) << 8);\n  return ((n >>> 16) & 0xffff) | ((n & 0xffff) << 16);\n};\n\nconst rbit32 = (n: number): number => {\n  n = ((n >>> 1) & 0x5555_5555) | ((n & 0x5555_5555) << 1);\n  n = ((n >>> 2) & 0x3333_3333) | ((n & 0x3333_3333) << 2);\n  n = ((n >>> 4) & 0x0f0f_0f0f) | ((n & 0x0f0f_0f0f) << 4);\n  return bswap32(n);\n};\n\n/**\n * An immutable set of squares, implemented as a bitboard.\n */\nexport class SquareSet implements Iterable<Square> {\n  readonly lo: number;\n  readonly hi: number;\n\n  constructor(lo: number, hi: number) {\n    this.lo = lo | 0;\n    this.hi = hi | 0;\n  }\n\n  static fromSquare(square: Square): SquareSet {\n    return square >= 32 ? new SquareSet(0, 1 << (square - 32)) : new SquareSet(1 << square, 0);\n  }\n\n  static fromRank(rank: number): SquareSet {\n    return new SquareSet(0xff, 0).shl64(8 * rank);\n  }\n\n  static fromFile(file: number): SquareSet {\n    return new SquareSet(0x0101_0101 << file, 0x0101_0101 << file);\n  }\n\n  static empty(): SquareSet {\n    return new SquareSet(0, 0);\n  }\n\n  static full(): SquareSet {\n    return new SquareSet(0xffff_ffff, 0xffff_ffff);\n  }\n\n  static corners(): SquareSet {\n    return new SquareSet(0x81, 0x8100_0000);\n  }\n\n  static center(): SquareSet {\n    return new SquareSet(0x1800_0000, 0x18);\n  }\n\n  static backranks(): SquareSet {\n    return new SquareSet(0xff, 0xff00_0000);\n  }\n\n  static backrank(color: Color): SquareSet {\n    return color === 'white' ? new SquareSet(0xff, 0) : new SquareSet(0, 0xff00_0000);\n  }\n\n  static lightSquares(): SquareSet {\n    return new SquareSet(0x55aa_55aa, 0x55aa_55aa);\n  }\n\n  static darkSquares(): SquareSet {\n    return new SquareSet(0xaa55_aa55, 0xaa55_aa55);\n  }\n\n  complement(): SquareSet {\n    return new SquareSet(~this.lo, ~this.hi);\n  }\n\n  xor(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo ^ other.lo, this.hi ^ other.hi);\n  }\n\n  union(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo | other.lo, this.hi | other.hi);\n  }\n\n  intersect(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo & other.lo, this.hi & other.hi);\n  }\n\n  diff(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo & ~other.lo, this.hi & ~other.hi);\n  }\n\n  intersects(other: SquareSet): boolean {\n    return this.intersect(other).nonEmpty();\n  }\n\n  isDisjoint(other: SquareSet): boolean {\n    return this.intersect(other).isEmpty();\n  }\n\n  supersetOf(other: SquareSet): boolean {\n    return other.diff(this).isEmpty();\n  }\n\n  subsetOf(other: SquareSet): boolean {\n    return this.diff(other).isEmpty();\n  }\n\n  shr64(shift: number): SquareSet {\n    if (shift >= 64) return SquareSet.empty();\n    if (shift >= 32) return new SquareSet(this.hi >>> (shift - 32), 0);\n    if (shift > 0) return new SquareSet((this.lo >>> shift) ^ (this.hi << (32 - shift)), this.hi >>> shift);\n    return this;\n  }\n\n  shl64(shift: number): SquareSet {\n    if (shift >= 64) return SquareSet.empty();\n    if (shift >= 32) return new SquareSet(0, this.lo << (shift - 32));\n    if (shift > 0) return new SquareSet(this.lo << shift, (this.hi << shift) ^ (this.lo >>> (32 - shift)));\n    return this;\n  }\n\n  bswap64(): SquareSet {\n    return new SquareSet(bswap32(this.hi), bswap32(this.lo));\n  }\n\n  rbit64(): SquareSet {\n    return new SquareSet(rbit32(this.hi), rbit32(this.lo));\n  }\n\n  minus64(other: SquareSet): SquareSet {\n    const lo = this.lo - other.lo;\n    const c = ((lo & other.lo & 1) + (other.lo >>> 1) + (lo >>> 1)) >>> 31;\n    return new SquareSet(lo, this.hi - (other.hi + c));\n  }\n\n  equals(other: SquareSet): boolean {\n    return this.lo === other.lo && this.hi === other.hi;\n  }\n\n  size(): number {\n    return popcnt32(this.lo) + popcnt32(this.hi);\n  }\n\n  isEmpty(): boolean {\n    return this.lo === 0 && this.hi === 0;\n  }\n\n  nonEmpty(): boolean {\n    return this.lo !== 0 || this.hi !== 0;\n  }\n\n  has(square: Square): boolean {\n    return (square >= 32 ? this.hi & (1 << (square - 32)) : this.lo & (1 << square)) !== 0;\n  }\n\n  set(square: Square, on: boolean): SquareSet {\n    return on ? this.with(square) : this.without(square);\n  }\n\n  with(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi | (1 << (square - 32)))\n      : new SquareSet(this.lo | (1 << square), this.hi);\n  }\n\n  without(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi & ~(1 << (square - 32)))\n      : new SquareSet(this.lo & ~(1 << square), this.hi);\n  }\n\n  toggle(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi ^ (1 << (square - 32)))\n      : new SquareSet(this.lo ^ (1 << square), this.hi);\n  }\n\n  last(): Square | undefined {\n    if (this.hi !== 0) return 63 - Math.clz32(this.hi);\n    if (this.lo !== 0) return 31 - Math.clz32(this.lo);\n    return;\n  }\n\n  first(): Square | undefined {\n    if (this.lo !== 0) return 31 - Math.clz32(this.lo & -this.lo);\n    if (this.hi !== 0) return 63 - Math.clz32(this.hi & -this.hi);\n    return;\n  }\n\n  withoutFirst(): SquareSet {\n    if (this.lo !== 0) return new SquareSet(this.lo & (this.lo - 1), this.hi);\n    return new SquareSet(0, this.hi & (this.hi - 1));\n  }\n\n  moreThanOne(): boolean {\n    return (this.hi !== 0 && this.lo !== 0) || (this.lo & (this.lo - 1)) !== 0 || (this.hi & (this.hi - 1)) !== 0;\n  }\n\n  singleSquare(): Square | undefined {\n    return this.moreThanOne() ? undefined : this.last();\n  }\n\n  *[Symbol.iterator](): Iterator<Square> {\n    let lo = this.lo;\n    let hi = this.hi;\n    while (lo !== 0) {\n      const idx = 31 - Math.clz32(lo & -lo);\n      lo ^= 1 << idx;\n      yield idx;\n    }\n    while (hi !== 0) {\n      const idx = 31 - Math.clz32(hi & -hi);\n      hi ^= 1 << idx;\n      yield 32 + idx;\n    }\n  }\n\n  *reversed(): Iterable<Square> {\n    let lo = this.lo;\n    let hi = this.hi;\n    while (hi !== 0) {\n      const idx = 31 - Math.clz32(hi);\n      hi ^= 1 << idx;\n      yield 32 + idx;\n    }\n    while (lo !== 0) {\n      const idx = 31 - Math.clz32(lo);\n      lo ^= 1 << idx;\n      yield idx;\n    }\n  }\n}\n", "/**\n * Compute attacks and rays.\n *\n * These are low-level functions that can be used to implement chess rules.\n *\n * Implementation notes: Sliding attacks are computed using\n * [Hyperbola Quintessence](https://www.chessprogramming.org/Hyperbola_Quintessence).\n * Magic Bitboards would deliver slightly faster lookups, but also require\n * initializing considerably larger attack tables. On the web, initialization\n * time is important, so the chosen method may strike a better balance.\n *\n * @packageDocumentation\n */\n\nimport { SquareSet } from './squareSet.js';\nimport { BySquare, Color, Piece, Square } from './types.js';\nimport { squareFile, squareRank } from './util.js';\n\nconst computeRange = (square: Square, deltas: number[]): SquareSet => {\n  let range = SquareSet.empty();\n  for (const delta of deltas) {\n    const sq = square + delta;\n    if (0 <= sq && sq < 64 && Math.abs(squareFile(square) - squareFile(sq)) <= 2) {\n      range = range.with(sq);\n    }\n  }\n  return range;\n};\n\nconst tabulate = <T>(f: (square: Square) => T): BySquare<T> => {\n  const table = [];\n  for (let square = 0; square < 64; square++) table[square] = f(square);\n  return table;\n};\n\nconst KING_ATTACKS = tabulate(sq => computeRange(sq, [-9, -8, -7, -1, 1, 7, 8, 9]));\nconst KNIGHT_ATTACKS = tabulate(sq => computeRange(sq, [-17, -15, -10, -6, 6, 10, 15, 17]));\nconst PAWN_ATTACKS = {\n  white: tabulate(sq => computeRange(sq, [7, 9])),\n  black: tabulate(sq => computeRange(sq, [-7, -9])),\n};\n\n/**\n * Gets squares attacked or defended by a king on `square`.\n */\nexport const kingAttacks = (square: Square): SquareSet => KING_ATTACKS[square];\n\n/**\n * Gets squares attacked or defended by a knight on `square`.\n */\nexport const knightAttacks = (square: Square): SquareSet => KNIGHT_ATTACKS[square];\n\n/**\n * Gets squares attacked or defended by a pawn of the given `color`\n * on `square`.\n */\nexport const pawnAttacks = (color: Color, square: Square): SquareSet => PAWN_ATTACKS[color][square];\n\nconst FILE_RANGE = tabulate(sq => SquareSet.fromFile(squareFile(sq)).without(sq));\nconst RANK_RANGE = tabulate(sq => SquareSet.fromRank(squareRank(sq)).without(sq));\n\nconst DIAG_RANGE = tabulate(sq => {\n  const diag = new SquareSet(0x0804_0201, 0x8040_2010);\n  const shift = 8 * (squareRank(sq) - squareFile(sq));\n  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);\n});\n\nconst ANTI_DIAG_RANGE = tabulate(sq => {\n  const diag = new SquareSet(0x1020_4080, 0x0102_0408);\n  const shift = 8 * (squareRank(sq) + squareFile(sq) - 7);\n  return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);\n});\n\nconst hyperbola = (bit: SquareSet, range: SquareSet, occupied: SquareSet): SquareSet => {\n  let forward = occupied.intersect(range);\n  let reverse = forward.bswap64(); // Assumes no more than 1 bit per rank\n  forward = forward.minus64(bit);\n  reverse = reverse.minus64(bit.bswap64());\n  return forward.xor(reverse.bswap64()).intersect(range);\n};\n\nconst fileAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  hyperbola(SquareSet.fromSquare(square), FILE_RANGE[square], occupied);\n\nconst rankAttacks = (square: Square, occupied: SquareSet): SquareSet => {\n  const range = RANK_RANGE[square];\n  let forward = occupied.intersect(range);\n  let reverse = forward.rbit64();\n  forward = forward.minus64(SquareSet.fromSquare(square));\n  reverse = reverse.minus64(SquareSet.fromSquare(63 - square));\n  return forward.xor(reverse.rbit64()).intersect(range);\n};\n\n/**\n * Gets squares attacked or defended by a bishop on `square`, given `occupied`\n * squares.\n */\nexport const bishopAttacks = (square: Square, occupied: SquareSet): SquareSet => {\n  const bit = SquareSet.fromSquare(square);\n  return hyperbola(bit, DIAG_RANGE[square], occupied).xor(hyperbola(bit, ANTI_DIAG_RANGE[square], occupied));\n};\n\n/**\n * Gets squares attacked or defended by a rook on `square`, given `occupied`\n * squares.\n */\nexport const rookAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  fileAttacks(square, occupied).xor(rankAttacks(square, occupied));\n\n/**\n * Gets squares attacked or defended by a queen on `square`, given `occupied`\n * squares.\n */\nexport const queenAttacks = (square: Square, occupied: SquareSet): SquareSet =>\n  bishopAttacks(square, occupied).xor(rookAttacks(square, occupied));\n\n/**\n * Gets squares attacked or defended by a `piece` on `square`, given\n * `occupied` squares.\n */\nexport const attacks = (piece: Piece, square: Square, occupied: SquareSet): SquareSet => {\n  switch (piece.role) {\n    case 'pawn':\n      return pawnAttacks(piece.color, square);\n    case 'knight':\n      return knightAttacks(square);\n    case 'bishop':\n      return bishopAttacks(square, occupied);\n    case 'rook':\n      return rookAttacks(square, occupied);\n    case 'queen':\n      return queenAttacks(square, occupied);\n    case 'king':\n      return kingAttacks(square);\n  }\n};\n\n/**\n * Gets all squares of the rank, file or diagonal with the two squares\n * `a` and `b`, or an empty set if they are not aligned.\n */\nexport const ray = (a: Square, b: Square): SquareSet => {\n  const other = SquareSet.fromSquare(b);\n  if (RANK_RANGE[a].intersects(other)) return RANK_RANGE[a].with(a);\n  if (ANTI_DIAG_RANGE[a].intersects(other)) return ANTI_DIAG_RANGE[a].with(a);\n  if (DIAG_RANGE[a].intersects(other)) return DIAG_RANGE[a].with(a);\n  if (FILE_RANGE[a].intersects(other)) return FILE_RANGE[a].with(a);\n  return SquareSet.empty();\n};\n\n/**\n * Gets all squares between `a` and `b` (bounds not included), or an empty set\n * if they are not on the same rank, file or diagonal.\n */\nexport const between = (a: Square, b: Square): SquareSet =>\n  ray(a, b)\n    .intersect(SquareSet.full().shl64(a).xor(SquareSet.full().shl64(b)))\n    .withoutFirst();\n", "import { SquareSet } from './squareSet.js';\nimport { ByColor, ByRole, Color, COLORS, Piece, Role, ROLES, Square } from './types.js';\n\n/**\n * Piece positions on a board.\n *\n * Properties are sets of squares, like `board.occupied` for all occupied\n * squares, `board[color]` for all pieces of that color, and `board[role]`\n * for all pieces of that role. When modifying the properties directly, take\n * care to keep them consistent.\n */\nexport class Board implements Iterable<[Square, Piece]>, ByRole<SquareSet>, ByColor<SquareSet> {\n  /**\n   * All occupied squares.\n   */\n  occupied: SquareSet;\n  /**\n   * All squares occupied by pieces known to be promoted. This information is\n   * relevant in chess variants like Crazyhouse.\n   */\n  promoted: SquareSet;\n\n  white: SquareSet;\n  black: SquareSet;\n\n  pawn: SquareSet;\n  knight: SquareSet;\n  bishop: SquareSet;\n  rook: SquareSet;\n  queen: SquareSet;\n  king: SquareSet;\n\n  private constructor() {}\n\n  static default(): Board {\n    const board = new Board();\n    board.reset();\n    return board;\n  }\n\n  /**\n   * Resets all pieces to the default starting position for standard chess.\n   */\n  reset(): void {\n    this.occupied = new SquareSet(0xffff, 0xffff_0000);\n    this.promoted = SquareSet.empty();\n    this.white = new SquareSet(0xffff, 0);\n    this.black = new SquareSet(0, 0xffff_0000);\n    this.pawn = new SquareSet(0xff00, 0x00ff_0000);\n    this.knight = new SquareSet(0x42, 0x4200_0000);\n    this.bishop = new SquareSet(0x24, 0x2400_0000);\n    this.rook = new SquareSet(0x81, 0x8100_0000);\n    this.queen = new SquareSet(0x8, 0x0800_0000);\n    this.king = new SquareSet(0x10, 0x1000_0000);\n  }\n\n  static empty(): Board {\n    const board = new Board();\n    board.clear();\n    return board;\n  }\n\n  clear(): void {\n    this.occupied = SquareSet.empty();\n    this.promoted = SquareSet.empty();\n    for (const color of COLORS) this[color] = SquareSet.empty();\n    for (const role of ROLES) this[role] = SquareSet.empty();\n  }\n\n  clone(): Board {\n    const board = new Board();\n    board.occupied = this.occupied;\n    board.promoted = this.promoted;\n    for (const color of COLORS) board[color] = this[color];\n    for (const role of ROLES) board[role] = this[role];\n    return board;\n  }\n\n  getColor(square: Square): Color | undefined {\n    if (this.white.has(square)) return 'white';\n    if (this.black.has(square)) return 'black';\n    return;\n  }\n\n  getRole(square: Square): Role | undefined {\n    for (const role of ROLES) {\n      if (this[role].has(square)) return role;\n    }\n    return;\n  }\n\n  get(square: Square): Piece | undefined {\n    const color = this.getColor(square);\n    if (!color) return;\n    const role = this.getRole(square)!;\n    const promoted = this.promoted.has(square);\n    return { color, role, promoted };\n  }\n\n  /**\n   * Removes and returns the piece from the given `square`, if any.\n   */\n  take(square: Square): Piece | undefined {\n    const piece = this.get(square);\n    if (piece) {\n      this.occupied = this.occupied.without(square);\n      this[piece.color] = this[piece.color].without(square);\n      this[piece.role] = this[piece.role].without(square);\n      if (piece.promoted) this.promoted = this.promoted.without(square);\n    }\n    return piece;\n  }\n\n  /**\n   * Put `piece` onto `square`, potentially replacing an existing piece.\n   * Returns the existing piece, if any.\n   */\n  set(square: Square, piece: Piece): Piece | undefined {\n    const old = this.take(square);\n    this.occupied = this.occupied.with(square);\n    this[piece.color] = this[piece.color].with(square);\n    this[piece.role] = this[piece.role].with(square);\n    if (piece.promoted) this.promoted = this.promoted.with(square);\n    return old;\n  }\n\n  has(square: Square): boolean {\n    return this.occupied.has(square);\n  }\n\n  *[Symbol.iterator](): Iterator<[Square, Piece]> {\n    for (const square of this.occupied) {\n      yield [square, this.get(square)!];\n    }\n  }\n\n  pieces(color: Color, role: Role): SquareSet {\n    return this[color].intersect(this[role]);\n  }\n\n  rooksAndQueens(): SquareSet {\n    return this.rook.union(this.queen);\n  }\n\n  bishopsAndQueens(): SquareSet {\n    return this.bishop.union(this.queen);\n  }\n\n  /**\n   * Finds the unique king of the given `color`, if any.\n   */\n  kingOf(color: Color): Square | undefined {\n    return this.pieces(color, 'king').singleSquare();\n  }\n}\n\nexport const boardEquals = (left: Board, right: Board): boolean =>\n  left.white.equals(right.white)\n  && left.promoted.equals(right.promoted)\n  && ROLES.every(role => left[role].equals(right[role]));\n", "import { Board, boardEquals } from './board.js';\nimport { SquareSet } from './squareSet.js';\nimport { ByColor, ByRole, Color, Role, ROLES, Square } from './types.js';\n\nexport class MaterialSide implements ByRole<number> {\n  pawn: number;\n  knight: number;\n  bishop: number;\n  rook: number;\n  queen: number;\n  king: number;\n\n  private constructor() {}\n\n  static empty(): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = 0;\n    return m;\n  }\n\n  static fromBoard(board: Board, color: Color): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = board.pieces(color, role).size();\n    return m;\n  }\n\n  clone(): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role];\n    return m;\n  }\n\n  equals(other: MaterialSide): boolean {\n    return ROLES.every(role => this[role] === other[role]);\n  }\n\n  add(other: MaterialSide): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role] + other[role];\n    return m;\n  }\n\n  subtract(other: MaterialSide): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role] - other[role];\n    return m;\n  }\n\n  nonEmpty(): boolean {\n    return ROLES.some(role => this[role] > 0);\n  }\n\n  isEmpty(): boolean {\n    return !this.nonEmpty();\n  }\n\n  hasPawns(): boolean {\n    return this.pawn > 0;\n  }\n\n  hasNonPawns(): boolean {\n    return this.knight > 0 || this.bishop > 0 || this.rook > 0 || this.queen > 0 || this.king > 0;\n  }\n\n  size(): number {\n    return this.pawn + this.knight + this.bishop + this.rook + this.queen + this.king;\n  }\n}\n\nexport class Material implements ByColor<MaterialSide> {\n  constructor(\n    public white: MaterialSide,\n    public black: MaterialSide,\n  ) {}\n\n  static empty(): Material {\n    return new Material(MaterialSide.empty(), MaterialSide.empty());\n  }\n\n  static fromBoard(board: Board): Material {\n    return new Material(MaterialSide.fromBoard(board, 'white'), MaterialSide.fromBoard(board, 'black'));\n  }\n\n  clone(): Material {\n    return new Material(this.white.clone(), this.black.clone());\n  }\n\n  equals(other: Material): boolean {\n    return this.white.equals(other.white) && this.black.equals(other.black);\n  }\n\n  add(other: Material): Material {\n    return new Material(this.white.add(other.white), this.black.add(other.black));\n  }\n\n  subtract(other: Material): Material {\n    return new Material(this.white.subtract(other.white), this.black.subtract(other.black));\n  }\n\n  count(role: Role): number {\n    return this.white[role] + this.black[role];\n  }\n\n  size(): number {\n    return this.white.size() + this.black.size();\n  }\n\n  isEmpty(): boolean {\n    return this.white.isEmpty() && this.black.isEmpty();\n  }\n\n  nonEmpty(): boolean {\n    return !this.isEmpty();\n  }\n\n  hasPawns(): boolean {\n    return this.white.hasPawns() || this.black.hasPawns();\n  }\n\n  hasNonPawns(): boolean {\n    return this.white.hasNonPawns() || this.black.hasNonPawns();\n  }\n}\n\nexport class RemainingChecks implements ByColor<number> {\n  constructor(\n    public white: number,\n    public black: number,\n  ) {}\n\n  static default(): RemainingChecks {\n    return new RemainingChecks(3, 3);\n  }\n\n  clone(): RemainingChecks {\n    return new RemainingChecks(this.white, this.black);\n  }\n\n  equals(other: RemainingChecks): boolean {\n    return this.white === other.white && this.black === other.black;\n  }\n}\n\n/**\n * A not necessarily legal chess or chess variant position.\n */\nexport interface Setup {\n  board: Board;\n  pockets: Material | undefined;\n  turn: Color;\n  castlingRights: SquareSet;\n  epSquare: Square | undefined;\n  remainingChecks: RemainingChecks | undefined;\n  halfmoves: number;\n  fullmoves: number;\n}\n\nexport const defaultSetup = (): Setup => ({\n  board: Board.default(),\n  pockets: undefined,\n  turn: 'white',\n  castlingRights: SquareSet.corners(),\n  epSquare: undefined,\n  remainingChecks: undefined,\n  halfmoves: 0,\n  fullmoves: 1,\n});\n\nexport const setupClone = (setup: Setup): Setup => ({\n  board: setup.board.clone(),\n  pockets: setup.pockets?.clone(),\n  turn: setup.turn,\n  castlingRights: setup.castlingRights,\n  epSquare: setup.epSquare,\n  remainingChecks: setup.remainingChecks?.clone(),\n  halfmoves: setup.halfmoves,\n  fullmoves: setup.fullmoves,\n});\n\nexport const setupEquals = (left: Setup, right: Setup): boolean =>\n  boardEquals(left.board, right.board)\n  && ((right.pockets && left.pockets?.equals(right.pockets)) || (!left.pockets && !right.pockets))\n  && left.turn === right.turn\n  && left.castlingRights.equals(right.castlingRights)\n  && left.epSquare === right.epSquare\n  && ((right.remainingChecks && left.remainingChecks?.equals(right.remainingChecks))\n    || (!left.remainingChecks && !right.remainingChecks))\n  && left.halfmoves === right.halfmoves\n  && left.fullmoves === right.fullmoves;\n", "abstract class _Result<T, E extends Error> {\n  protected abstract _chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U>;\n\n  unwrap(): T;\n  unwrap<U>(ok: (value: T) => U): U;\n  unwrap<U, V>(ok: (value: T) => U, err: (error: E) => V): U | V;\n  unwrap<U>(ok: (value: T) => U, err: (error: E) => U): U;\n  unwrap(ok?: (value: T) => unknown, err?: (error: E) => unknown): unknown {\n    const r = this._chain(\n      value => Result.ok(ok ? ok(value) : value),\n      error => (err ? Result.ok(err(error)) : Result.err(error))\n    );\n    if (r.isErr) {\n      throw r.error;\n    }\n    return r.value;\n  }\n\n  map<U>(ok: (value: T) => U): Result<U, E>;\n  map<U, F extends Error>(\n    ok: (value: T) => U,\n    err: (error: E) => F\n  ): Result<U, F>;\n  map(ok: (value: T) => unknown, err?: (error: E) => Error): Result<unknown> {\n    return this._chain(\n      value => Result.ok(ok(value)),\n      error => Result.err(err ? err(error) : error)\n    );\n  }\n\n  chain<X>(ok: (value: T) => Result<X, E>): Result<X, E>;\n  chain<X>(\n    ok: (value: T) => Result<X, E>,\n    err: (error: E) => Result<X, E>\n  ): Result<X, E>;\n  chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U>;\n  chain(\n    ok: (value: T) => Result<unknown>,\n    err?: (error: E) => Result<unknown>\n  ): Result<unknown> {\n    return this._chain(ok, err || (error => Result.err(error)));\n  }\n}\n\nclass _Ok<T, E extends Error> extends _Result<T, E> {\n  readonly isOk = true;\n  readonly isErr = false;\n  constructor(readonly value: T) {\n    super();\n  }\n\n  protected _chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    _err: (error: E) => Result<X, U>\n  ): Result<X, U> {\n    return ok(this.value);\n  }\n}\n\nclass _Err<T, E extends Error> extends _Result<T, E> {\n  readonly isOk = false;\n  readonly isErr = true;\n  constructor(readonly error: E) {\n    super();\n  }\n\n  protected _chain<X, U extends Error>(\n    _ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U> {\n    return err(this.error);\n  }\n}\n\nexport namespace Result {\n  export interface Ok<T, E extends Error> extends _Ok<T, E> {}\n  export interface Err<T, E extends Error> extends _Err<T, E> {}\n\n  export function ok<T, E extends Error>(value: T): Result<T, E> {\n    return new _Ok(value);\n  }\n  export function err<E extends Error, T = never>(error?: E): Result<T, E>\n  export function err<E extends Error, T = never>(error: E): Result<T, E> {\n    return new _Err(error || new Error());\n  }\n\n  type U = Result<unknown>;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U,\n    R14 extends U,\n    R15 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>,\n      OkType<R14>,\n      OkType<R15>\n    ],\n    ErrType<\n      | R0\n      | R1\n      | R2\n      | R3\n      | R4\n      | R5\n      | R6\n      | R7\n      | R8\n      | R9\n      | R10\n      | R11\n      | R12\n      | R13\n      | R14\n      | R15\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U,\n    R14 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>,\n      OkType<R14>\n    ],\n    ErrType<\n      | R0\n      | R1\n      | R2\n      | R3\n      | R4\n      | R5\n      | R6\n      | R7\n      | R8\n      | R9\n      | R10\n      | R11\n      | R12\n      | R13\n      | R14\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>\n    ],\n    ErrType<\n      R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11 | R12 | R13\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>, OkType<R4>, OkType<R5>],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>, OkType<R4>],\n    ErrType<R0 | R1 | R2 | R3 | R4>\n  >;\n  export function all<R0 extends U, R1 extends U, R2 extends U, R3 extends U>(\n    obj: [R0, R1, R2, R3]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>],\n    ErrType<R0 | R1 | R2 | R3>\n  >;\n  export function all<R0 extends U, R1 extends U, R2 extends U>(\n    obj: [R0, R1, R2]\n  ): Result<[OkType<R0>, OkType<R1>, OkType<R2>], ErrType<R0 | R1 | R2>>;\n  export function all<R0 extends U, R1 extends U>(\n    obj: [R0, R1]\n  ): Result<[OkType<R0>, OkType<R1>], ErrType<R0 | R1>>;\n  export function all<R0 extends U>(\n    obj: [R0]\n  ): Result<[OkType<R0>], ErrType<R0>>;\n  export function all(obj: []): Result<[]>;\n  export function all<T extends Array<U> | Record<string, U>>(\n    obj: T\n  ): Result<\n    { [K in keyof T]: T[K] extends Result<infer I> ? I : never },\n    {\n      [K in keyof T]: T[K] extends Result<unknown, infer E> ? E : never;\n    }[keyof T]\n  >;\n  export function all(obj: unknown): unknown {\n    if (Array.isArray(obj)) {\n      const res = [];\n      for (let i = 0; i < obj.length; i++) {\n        const item = obj[i];\n        if (item.isErr) {\n          return item;\n        }\n        res.push(item.value);\n      }\n      return Result.ok(res);\n    }\n\n    const res: Record<string, unknown> = {};\n    const keys = Object.keys(obj as Record<string, U>);\n    for (let i = 0; i < keys.length; i++) {\n      const item = (obj as Record<string, U>)[keys[i]];\n      if (item.isErr) {\n        return item;\n      }\n      res[keys[i]] = item.value;\n    }\n    return Result.ok(res);\n  }\n}\n\nexport type Result<T, E extends Error = Error> =\n  | Result.Ok<T, E>\n  | Result.Err<T, E>;\n\ntype OkType<R extends Result<unknown>> = R extends Result<infer O> ? O : never;\ntype ErrType<R extends Result<unknown>> = R extends Result<unknown, infer E>\n  ? E\n  : never;\n", "import { Result } from '@badrap/result';\nimport {\n  attacks,\n  between,\n  bishopAttacks,\n  kingAttacks,\n  knightAttacks,\n  pawnAttacks,\n  queenAttacks,\n  ray,\n  rookAttacks,\n} from './attacks.js';\nimport { Board, boardEquals } from './board.js';\nimport { Material, RemainingChecks, Setup } from './setup.js';\nimport { SquareSet } from './squareSet.js';\nimport {\n  ByCastlingSide,\n  ByColor,\n  CASTLING_SIDES,\n  CastlingSide,\n  Color,\n  COLORS,\n  isDrop,\n  Move,\n  NormalMove,\n  Outcome,\n  Piece,\n  Rules,\n  Square,\n} from './types.js';\nimport { defined, kingCastlesTo, opposite, rookCastlesTo, squareRank } from './util.js';\n\nexport enum IllegalSetup {\n  Empty = 'ERR_EMPTY',\n  OppositeCheck = 'ERR_OPPOSITE_CHECK',\n  PawnsOnBackrank = 'ERR_PAWNS_ON_BACKRANK',\n  Kings = 'ERR_KINGS',\n  Variant = 'ERR_VARIANT',\n}\n\nexport class PositionError extends Error {}\n\nconst attacksTo = (square: Square, attacker: Color, board: Board, occupied: SquareSet): SquareSet =>\n  board[attacker].intersect(\n    rookAttacks(square, occupied)\n      .intersect(board.rooksAndQueens())\n      .union(bishopAttacks(square, occupied).intersect(board.bishopsAndQueens()))\n      .union(knightAttacks(square).intersect(board.knight))\n      .union(kingAttacks(square).intersect(board.king))\n      .union(pawnAttacks(opposite(attacker), square).intersect(board.pawn)),\n  );\n\nexport class Castles {\n  castlingRights: SquareSet;\n  rook: ByColor<ByCastlingSide<Square | undefined>>;\n  path: ByColor<ByCastlingSide<SquareSet>>;\n\n  private constructor() {}\n\n  static default(): Castles {\n    const castles = new Castles();\n    castles.castlingRights = SquareSet.corners();\n    castles.rook = {\n      white: { a: 0, h: 7 },\n      black: { a: 56, h: 63 },\n    };\n    castles.path = {\n      white: { a: new SquareSet(0xe, 0), h: new SquareSet(0x60, 0) },\n      black: { a: new SquareSet(0, 0x0e000000), h: new SquareSet(0, 0x60000000) },\n    };\n    return castles;\n  }\n\n  static empty(): Castles {\n    const castles = new Castles();\n    castles.castlingRights = SquareSet.empty();\n    castles.rook = {\n      white: { a: undefined, h: undefined },\n      black: { a: undefined, h: undefined },\n    };\n    castles.path = {\n      white: { a: SquareSet.empty(), h: SquareSet.empty() },\n      black: { a: SquareSet.empty(), h: SquareSet.empty() },\n    };\n    return castles;\n  }\n\n  clone(): Castles {\n    const castles = new Castles();\n    castles.castlingRights = this.castlingRights;\n    castles.rook = {\n      white: { a: this.rook.white.a, h: this.rook.white.h },\n      black: { a: this.rook.black.a, h: this.rook.black.h },\n    };\n    castles.path = {\n      white: { a: this.path.white.a, h: this.path.white.h },\n      black: { a: this.path.black.a, h: this.path.black.h },\n    };\n    return castles;\n  }\n\n  private add(color: Color, side: CastlingSide, king: Square, rook: Square): void {\n    const kingTo = kingCastlesTo(color, side);\n    const rookTo = rookCastlesTo(color, side);\n    this.castlingRights = this.castlingRights.with(rook);\n    this.rook[color][side] = rook;\n    this.path[color][side] = between(rook, rookTo)\n      .with(rookTo)\n      .union(between(king, kingTo).with(kingTo))\n      .without(king)\n      .without(rook);\n  }\n\n  static fromSetup(setup: Setup): Castles {\n    const castles = Castles.empty();\n    const rooks = setup.castlingRights.intersect(setup.board.rook);\n    for (const color of COLORS) {\n      const backrank = SquareSet.backrank(color);\n      const king = setup.board.kingOf(color);\n      if (!defined(king) || !backrank.has(king)) continue;\n      const side = rooks.intersect(setup.board[color]).intersect(backrank);\n      const aSide = side.first();\n      if (defined(aSide) && aSide < king) castles.add(color, 'a', king, aSide);\n      const hSide = side.last();\n      if (defined(hSide) && king < hSide) castles.add(color, 'h', king, hSide);\n    }\n    return castles;\n  }\n\n  discardRook(square: Square): void {\n    if (this.castlingRights.has(square)) {\n      this.castlingRights = this.castlingRights.without(square);\n      for (const color of COLORS) {\n        for (const side of CASTLING_SIDES) {\n          if (this.rook[color][side] === square) this.rook[color][side] = undefined;\n        }\n      }\n    }\n  }\n\n  discardColor(color: Color): void {\n    this.castlingRights = this.castlingRights.diff(SquareSet.backrank(color));\n    this.rook[color].a = undefined;\n    this.rook[color].h = undefined;\n  }\n}\n\nexport interface Context {\n  king: Square | undefined;\n  blockers: SquareSet;\n  checkers: SquareSet;\n  variantEnd: boolean;\n  mustCapture: boolean;\n}\n\nexport abstract class Position {\n  board: Board;\n  pockets: Material | undefined;\n  turn: Color;\n  castles: Castles;\n  epSquare: Square | undefined;\n  remainingChecks: RemainingChecks | undefined;\n  halfmoves: number;\n  fullmoves: number;\n\n  protected constructor(readonly rules: Rules) {}\n\n  reset() {\n    this.board = Board.default();\n    this.pockets = undefined;\n    this.turn = 'white';\n    this.castles = Castles.default();\n    this.epSquare = undefined;\n    this.remainingChecks = undefined;\n    this.halfmoves = 0;\n    this.fullmoves = 1;\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    this.board = setup.board.clone();\n    this.board.promoted = SquareSet.empty();\n    this.pockets = undefined;\n    this.turn = setup.turn;\n    this.castles = Castles.fromSetup(setup);\n    this.epSquare = validEpSquare(this, setup.epSquare);\n    this.remainingChecks = undefined;\n    this.halfmoves = setup.halfmoves;\n    this.fullmoves = setup.fullmoves;\n  }\n\n  // When subclassing overwrite at least:\n  //\n  // - static default()\n  // - static fromSetup()\n  // - static clone()\n  //\n  // - dests()\n  // - isVariantEnd()\n  // - variantOutcome()\n  // - hasInsufficientMaterial()\n  // - isStandardMaterial()\n\n  kingAttackers(square: Square, attacker: Color, occupied: SquareSet): SquareSet {\n    return attacksTo(square, attacker, this.board, occupied);\n  }\n\n  protected playCaptureAt(square: Square, captured: Piece): void {\n    this.halfmoves = 0;\n    if (captured.role === 'rook') this.castles.discardRook(square);\n    if (this.pockets) this.pockets[opposite(captured.color)][captured.promoted ? 'pawn' : captured.role]++;\n  }\n\n  ctx(): Context {\n    const variantEnd = this.isVariantEnd();\n    const king = this.board.kingOf(this.turn);\n    if (!defined(king)) {\n      return { king, blockers: SquareSet.empty(), checkers: SquareSet.empty(), variantEnd, mustCapture: false };\n    }\n    const snipers = rookAttacks(king, SquareSet.empty())\n      .intersect(this.board.rooksAndQueens())\n      .union(bishopAttacks(king, SquareSet.empty()).intersect(this.board.bishopsAndQueens()))\n      .intersect(this.board[opposite(this.turn)]);\n    let blockers = SquareSet.empty();\n    for (const sniper of snipers) {\n      const b = between(king, sniper).intersect(this.board.occupied);\n      if (!b.moreThanOne()) blockers = blockers.union(b);\n    }\n    const checkers = this.kingAttackers(king, opposite(this.turn), this.board.occupied);\n    return {\n      king,\n      blockers,\n      checkers,\n      variantEnd,\n      mustCapture: false,\n    };\n  }\n\n  clone(): Position {\n    const pos = new (this as any).constructor();\n    pos.board = this.board.clone();\n    pos.pockets = this.pockets?.clone();\n    pos.turn = this.turn;\n    pos.castles = this.castles.clone();\n    pos.epSquare = this.epSquare;\n    pos.remainingChecks = this.remainingChecks?.clone();\n    pos.halfmoves = this.halfmoves;\n    pos.fullmoves = this.fullmoves;\n    return pos;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (this.board.king.size() !== 2) return Result.err(new PositionError(IllegalSetup.Kings));\n\n    if (!defined(this.board.kingOf(this.turn))) return Result.err(new PositionError(IllegalSetup.Kings));\n\n    const otherKing = this.board.kingOf(opposite(this.turn));\n    if (!defined(otherKing)) return Result.err(new PositionError(IllegalSetup.Kings));\n    if (this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty()) {\n      return Result.err(new PositionError(IllegalSetup.OppositeCheck));\n    }\n\n    if (SquareSet.backranks().intersects(this.board.pawn)) {\n      return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n    }\n\n    return Result.ok(undefined);\n  }\n\n  dropDests(_ctx?: Context): SquareSet {\n    return SquareSet.empty();\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n    if (ctx.variantEnd) return SquareSet.empty();\n    const piece = this.board.get(square);\n    if (!piece || piece.color !== this.turn) return SquareSet.empty();\n\n    let pseudo, legal;\n    if (piece.role === 'pawn') {\n      pseudo = pawnAttacks(this.turn, square).intersect(this.board[opposite(this.turn)]);\n      const delta = this.turn === 'white' ? 8 : -8;\n      const step = square + delta;\n      if (0 <= step && step < 64 && !this.board.occupied.has(step)) {\n        pseudo = pseudo.with(step);\n        const canDoubleStep = this.turn === 'white' ? square < 16 : square >= 64 - 16;\n        const doubleStep = step + delta;\n        if (canDoubleStep && !this.board.occupied.has(doubleStep)) {\n          pseudo = pseudo.with(doubleStep);\n        }\n      }\n      if (defined(this.epSquare) && canCaptureEp(this, square, ctx)) {\n        legal = SquareSet.fromSquare(this.epSquare);\n      }\n    } else if (piece.role === 'bishop') pseudo = bishopAttacks(square, this.board.occupied);\n    else if (piece.role === 'knight') pseudo = knightAttacks(square);\n    else if (piece.role === 'rook') pseudo = rookAttacks(square, this.board.occupied);\n    else if (piece.role === 'queen') pseudo = queenAttacks(square, this.board.occupied);\n    else pseudo = kingAttacks(square);\n\n    pseudo = pseudo.diff(this.board[this.turn]);\n\n    if (defined(ctx.king)) {\n      if (piece.role === 'king') {\n        const occ = this.board.occupied.without(square);\n        for (const to of pseudo) {\n          if (this.kingAttackers(to, opposite(this.turn), occ).nonEmpty()) pseudo = pseudo.without(to);\n        }\n        return pseudo.union(castlingDest(this, 'a', ctx)).union(castlingDest(this, 'h', ctx));\n      }\n\n      if (ctx.checkers.nonEmpty()) {\n        const checker = ctx.checkers.singleSquare();\n        if (!defined(checker)) return SquareSet.empty();\n        pseudo = pseudo.intersect(between(checker, ctx.king).with(checker));\n      }\n\n      if (ctx.blockers.has(square)) pseudo = pseudo.intersect(ray(square, ctx.king));\n    }\n\n    if (legal) pseudo = pseudo.union(legal);\n    return pseudo;\n  }\n\n  isVariantEnd(): boolean {\n    return false;\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    return;\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    if (this.board[color].intersect(this.board.pawn.union(this.board.rooksAndQueens())).nonEmpty()) return false;\n    if (this.board[color].intersects(this.board.knight)) {\n      return (\n        this.board[color].size() <= 2\n        && this.board[opposite(color)].diff(this.board.king).diff(this.board.queen).isEmpty()\n      );\n    }\n    if (this.board[color].intersects(this.board.bishop)) {\n      const sameColor = !this.board.bishop.intersects(SquareSet.darkSquares())\n        || !this.board.bishop.intersects(SquareSet.lightSquares());\n      return sameColor && this.board.pawn.isEmpty() && this.board.knight.isEmpty();\n    }\n    return true;\n  }\n\n  // The following should be identical in all subclasses\n\n  toSetup(): Setup {\n    return {\n      board: this.board.clone(),\n      pockets: this.pockets?.clone(),\n      turn: this.turn,\n      castlingRights: this.castles.castlingRights,\n      epSquare: legalEpSquare(this),\n      remainingChecks: this.remainingChecks?.clone(),\n      halfmoves: Math.min(this.halfmoves, 150),\n      fullmoves: Math.min(Math.max(this.fullmoves, 1), 9999),\n    };\n  }\n\n  isInsufficientMaterial(): boolean {\n    return COLORS.every(color => this.hasInsufficientMaterial(color));\n  }\n\n  hasDests(ctx?: Context): boolean {\n    ctx = ctx || this.ctx();\n    for (const square of this.board[this.turn]) {\n      if (this.dests(square, ctx).nonEmpty()) return true;\n    }\n    return this.dropDests(ctx).nonEmpty();\n  }\n\n  isLegal(move: Move, ctx?: Context): boolean {\n    if (isDrop(move)) {\n      if (!this.pockets || this.pockets[this.turn][move.role] <= 0) return false;\n      if (move.role === 'pawn' && SquareSet.backranks().has(move.to)) return false;\n      return this.dropDests(ctx).has(move.to);\n    } else {\n      if (move.promotion === 'pawn') return false;\n      if (move.promotion === 'king' && this.rules !== 'antichess') return false;\n      if (!!move.promotion !== (this.board.pawn.has(move.from) && SquareSet.backranks().has(move.to))) return false;\n      const dests = this.dests(move.from, ctx);\n      return dests.has(move.to) || dests.has(normalizeMove(this, move).to);\n    }\n  }\n\n  isCheck(): boolean {\n    const king = this.board.kingOf(this.turn);\n    return defined(king) && this.kingAttackers(king, opposite(this.turn), this.board.occupied).nonEmpty();\n  }\n\n  isEnd(ctx?: Context): boolean {\n    if (ctx ? ctx.variantEnd : this.isVariantEnd()) return true;\n    return this.isInsufficientMaterial() || !this.hasDests(ctx);\n  }\n\n  isCheckmate(ctx?: Context): boolean {\n    ctx = ctx || this.ctx();\n    return !ctx.variantEnd && ctx.checkers.nonEmpty() && !this.hasDests(ctx);\n  }\n\n  isStalemate(ctx?: Context): boolean {\n    ctx = ctx || this.ctx();\n    return !ctx.variantEnd && ctx.checkers.isEmpty() && !this.hasDests(ctx);\n  }\n\n  outcome(ctx?: Context): Outcome | undefined {\n    const variantOutcome = this.variantOutcome(ctx);\n    if (variantOutcome) return variantOutcome;\n    ctx = ctx || this.ctx();\n    if (this.isCheckmate(ctx)) return { winner: opposite(this.turn) };\n    else if (this.isInsufficientMaterial() || this.isStalemate(ctx)) return { winner: undefined };\n    else return;\n  }\n\n  allDests(ctx?: Context): Map<Square, SquareSet> {\n    ctx = ctx || this.ctx();\n    const d = new Map();\n    if (ctx.variantEnd) return d;\n    for (const square of this.board[this.turn]) {\n      d.set(square, this.dests(square, ctx));\n    }\n    return d;\n  }\n\n  play(move: Move): void {\n    const turn = this.turn;\n    const epSquare = this.epSquare;\n    const castling = castlingSide(this, move);\n\n    this.epSquare = undefined;\n    this.halfmoves += 1;\n    if (turn === 'black') this.fullmoves += 1;\n    this.turn = opposite(turn);\n\n    if (isDrop(move)) {\n      this.board.set(move.to, { role: move.role, color: turn });\n      if (this.pockets) this.pockets[turn][move.role]--;\n      if (move.role === 'pawn') this.halfmoves = 0;\n    } else {\n      const piece = this.board.take(move.from);\n      if (!piece) return;\n\n      let epCapture: Piece | undefined;\n      if (piece.role === 'pawn') {\n        this.halfmoves = 0;\n        if (move.to === epSquare) {\n          epCapture = this.board.take(move.to + (turn === 'white' ? -8 : 8));\n        }\n        const delta = move.from - move.to;\n        if (Math.abs(delta) === 16 && 8 <= move.from && move.from <= 55) {\n          this.epSquare = (move.from + move.to) >> 1;\n        }\n        if (move.promotion) {\n          piece.role = move.promotion;\n          piece.promoted = !!this.pockets;\n        }\n      } else if (piece.role === 'rook') {\n        this.castles.discardRook(move.from);\n      } else if (piece.role === 'king') {\n        if (castling) {\n          const rookFrom = this.castles.rook[turn][castling];\n          if (defined(rookFrom)) {\n            const rook = this.board.take(rookFrom);\n            this.board.set(kingCastlesTo(turn, castling), piece);\n            if (rook) this.board.set(rookCastlesTo(turn, castling), rook);\n          }\n        }\n        this.castles.discardColor(turn);\n      }\n\n      if (!castling) {\n        const capture = this.board.set(move.to, piece) || epCapture;\n        if (capture) this.playCaptureAt(move.to, capture);\n      }\n    }\n\n    if (this.remainingChecks) {\n      if (this.isCheck()) this.remainingChecks[turn] = Math.max(this.remainingChecks[turn] - 1, 0);\n    }\n  }\n}\n\nexport class Chess extends Position {\n  private constructor() {\n    super('chess');\n  }\n\n  static default(): Chess {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Chess, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Chess {\n    return super.clone() as Chess;\n  }\n}\n\nconst validEpSquare = (pos: Position, square: Square | undefined): Square | undefined => {\n  if (!defined(square)) return;\n  const epRank = pos.turn === 'white' ? 5 : 2;\n  const forward = pos.turn === 'white' ? 8 : -8;\n  if (squareRank(square) !== epRank) return;\n  if (pos.board.occupied.has(square + forward)) return;\n  const pawn = square - forward;\n  if (!pos.board.pawn.has(pawn) || !pos.board[opposite(pos.turn)].has(pawn)) return;\n  return square;\n};\n\nconst legalEpSquare = (pos: Position): Square | undefined => {\n  if (!defined(pos.epSquare)) return;\n  const ctx = pos.ctx();\n  const ourPawns = pos.board.pieces(pos.turn, 'pawn');\n  const candidates = ourPawns.intersect(pawnAttacks(opposite(pos.turn), pos.epSquare));\n  for (const candidate of candidates) {\n    if (pos.dests(candidate, ctx).has(pos.epSquare)) return pos.epSquare;\n  }\n  return;\n};\n\nconst canCaptureEp = (pos: Position, pawnFrom: Square, ctx: Context): boolean => {\n  if (!defined(pos.epSquare)) return false;\n  if (!pawnAttacks(pos.turn, pawnFrom).has(pos.epSquare)) return false;\n  if (!defined(ctx.king)) return true;\n  const delta = pos.turn === 'white' ? 8 : -8;\n  const captured = pos.epSquare - delta;\n  return pos\n    .kingAttackers(\n      ctx.king,\n      opposite(pos.turn),\n      pos.board.occupied.toggle(pawnFrom).toggle(captured).with(pos.epSquare),\n    )\n    .without(captured)\n    .isEmpty();\n};\n\nconst castlingDest = (pos: Position, side: CastlingSide, ctx: Context): SquareSet => {\n  if (!defined(ctx.king) || ctx.checkers.nonEmpty()) return SquareSet.empty();\n  const rook = pos.castles.rook[pos.turn][side];\n  if (!defined(rook)) return SquareSet.empty();\n  if (pos.castles.path[pos.turn][side].intersects(pos.board.occupied)) return SquareSet.empty();\n\n  const kingTo = kingCastlesTo(pos.turn, side);\n  const kingPath = between(ctx.king, kingTo);\n  const occ = pos.board.occupied.without(ctx.king);\n  for (const sq of kingPath) {\n    if (pos.kingAttackers(sq, opposite(pos.turn), occ).nonEmpty()) return SquareSet.empty();\n  }\n\n  const rookTo = rookCastlesTo(pos.turn, side);\n  const after = pos.board.occupied.toggle(ctx.king).toggle(rook).toggle(rookTo);\n  if (pos.kingAttackers(kingTo, opposite(pos.turn), after).nonEmpty()) return SquareSet.empty();\n\n  return SquareSet.fromSquare(rook);\n};\n\nexport const pseudoDests = (pos: Position, square: Square, ctx: Context): SquareSet => {\n  if (ctx.variantEnd) return SquareSet.empty();\n  const piece = pos.board.get(square);\n  if (!piece || piece.color !== pos.turn) return SquareSet.empty();\n\n  let pseudo = attacks(piece, square, pos.board.occupied);\n  if (piece.role === 'pawn') {\n    let captureTargets = pos.board[opposite(pos.turn)];\n    if (defined(pos.epSquare)) captureTargets = captureTargets.with(pos.epSquare);\n    pseudo = pseudo.intersect(captureTargets);\n    const delta = pos.turn === 'white' ? 8 : -8;\n    const step = square + delta;\n    if (0 <= step && step < 64 && !pos.board.occupied.has(step)) {\n      pseudo = pseudo.with(step);\n      const canDoubleStep = pos.turn === 'white' ? square < 16 : square >= 64 - 16;\n      const doubleStep = step + delta;\n      if (canDoubleStep && !pos.board.occupied.has(doubleStep)) {\n        pseudo = pseudo.with(doubleStep);\n      }\n    }\n    return pseudo;\n  } else {\n    pseudo = pseudo.diff(pos.board[pos.turn]);\n  }\n  if (square === ctx.king) return pseudo.union(castlingDest(pos, 'a', ctx)).union(castlingDest(pos, 'h', ctx));\n  else return pseudo;\n};\n\nexport const equalsIgnoreMoves = (left: Position, right: Position): boolean =>\n  left.rules === right.rules\n  && boardEquals(left.board, right.board)\n  && ((right.pockets && left.pockets?.equals(right.pockets)) || (!left.pockets && !right.pockets))\n  && left.turn === right.turn\n  && left.castles.castlingRights.equals(right.castles.castlingRights)\n  && legalEpSquare(left) === legalEpSquare(right)\n  && ((right.remainingChecks && left.remainingChecks?.equals(right.remainingChecks))\n    || (!left.remainingChecks && !right.remainingChecks));\n\nexport const castlingSide = (pos: Position, move: Move): CastlingSide | undefined => {\n  if (isDrop(move)) return;\n  const delta = move.to - move.from;\n  if (Math.abs(delta) !== 2 && !pos.board[pos.turn].has(move.to)) return;\n  if (!pos.board.king.has(move.from)) return;\n  return delta > 0 ? 'h' : 'a';\n};\n\nexport const normalizeMove = (pos: Position, move: Move): Move => {\n  const side = castlingSide(pos, move);\n  if (!side) return move;\n  const rookFrom = pos.castles.rook[pos.turn][side];\n  return {\n    from: (move as NormalMove).from,\n    to: defined(rookFrom) ? rookFrom : move.to,\n  };\n};\n\nexport const isStandardMaterialSide = (board: Board, color: Color): boolean => {\n  const promoted = Math.max(board.pieces(color, 'queen').size() - 1, 0)\n    + Math.max(board.pieces(color, 'rook').size() - 2, 0)\n    + Math.max(board.pieces(color, 'knight').size() - 2, 0)\n    + Math.max(board.pieces(color, 'bishop').intersect(SquareSet.lightSquares()).size() - 1, 0)\n    + Math.max(board.pieces(color, 'bishop').intersect(SquareSet.darkSquares()).size() - 1, 0);\n  return board.pieces(color, 'pawn').size() + promoted <= 8;\n};\n\nexport const isStandardMaterial = (pos: Chess): boolean =>\n  COLORS.every(color => isStandardMaterialSide(pos.board, color));\n\nexport const isImpossibleCheck = (pos: Position): boolean => {\n  const ourKing = pos.board.kingOf(pos.turn);\n  if (!defined(ourKing)) return false;\n  const checkers = pos.kingAttackers(ourKing, opposite(pos.turn), pos.board.occupied);\n  if (checkers.isEmpty()) return false;\n  if (defined(pos.epSquare)) {\n    // The pushed pawn must be the only checker, or it has uncovered\n    // check by a single sliding piece.\n    const pushedTo = pos.epSquare ^ 8;\n    const pushedFrom = pos.epSquare ^ 24;\n    return (\n      checkers.moreThanOne()\n      || (checkers.first()! !== pushedTo\n        && pos\n          .kingAttackers(ourKing, opposite(pos.turn), pos.board.occupied.without(pushedTo).with(pushedFrom))\n          .nonEmpty())\n    );\n  } else if (pos.rules === 'atomic') {\n    // Other king moving away can cause many checks to be given at the same\n    // time. Not checking details, or even that the king is close enough.\n    return false;\n  } else {\n    // Sliding checkers aligned with king.\n    return checkers.size() > 2 || (checkers.size() === 2 && ray(checkers.first()!, checkers.last()!).has(ourKing));\n  }\n};\n", "import { Result } from '@badrap/result';\nimport { Board } from './board.js';\nimport { Material, MaterialSide, RemainingChecks, Setup } from './setup.js';\nimport { SquareSet } from './squareSet.js';\nimport { Color, COLORS, FILE_NAMES, Piece, ROLES, Square } from './types.js';\nimport { charToRole, defined, makeSquare, parseSquare, roleToChar, squareFile, squareFromCoords } from './util.js';\n\nexport const INITIAL_BOARD_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nexport const INITIAL_EPD = INITIAL_BOARD_FEN + ' w KQkq -';\nexport const INITIAL_FEN = INITIAL_EPD + ' 0 1';\nexport const EMPTY_BOARD_FEN = '8/8/8/8/8/8/8/8';\nexport const EMPTY_EPD = EMPTY_BOARD_FEN + ' w - -';\nexport const EMPTY_FEN = EMPTY_EPD + ' 0 1';\n\nexport enum InvalidFen {\n  Fen = 'ERR_FEN',\n  Board = 'ERR_BOARD',\n  Pockets = 'ERR_POCKETS',\n  Turn = 'ERR_TURN',\n  Castling = 'ERR_CASTLING',\n  EpSquare = 'ERR_EP_SQUARE',\n  RemainingChecks = 'ERR_REMAINING_CHECKS',\n  Halfmoves = 'ERR_HALFMOVES',\n  Fullmoves = 'ERR_FULLMOVES',\n}\n\nexport class FenError extends Error {}\n\nconst nthIndexOf = (haystack: string, needle: string, n: number): number => {\n  let index = haystack.indexOf(needle);\n  while (n-- > 0) {\n    if (index === -1) break;\n    index = haystack.indexOf(needle, index + needle.length);\n  }\n  return index;\n};\n\nconst parseSmallUint = (str: string): number | undefined => (/^\\d{1,4}$/.test(str) ? parseInt(str, 10) : undefined);\n\nconst charToPiece = (ch: string): Piece | undefined => {\n  const role = charToRole(ch);\n  return role && { role, color: ch.toLowerCase() === ch ? 'black' : 'white' };\n};\n\nexport const parseBoardFen = (boardPart: string): Result<Board, FenError> => {\n  const board = Board.empty();\n  let rank = 7;\n  let file = 0;\n  for (let i = 0; i < boardPart.length; i++) {\n    const c = boardPart[i];\n    if (c === '/' && file === 8) {\n      file = 0;\n      rank--;\n    } else {\n      const step = parseInt(c, 10);\n      if (step > 0) file += step;\n      else {\n        if (file >= 8 || rank < 0) return Result.err(new FenError(InvalidFen.Board));\n        const square = file + rank * 8;\n        const piece = charToPiece(c);\n        if (!piece) return Result.err(new FenError(InvalidFen.Board));\n        if (boardPart[i + 1] === '~') {\n          piece.promoted = true;\n          i++;\n        }\n        board.set(square, piece);\n        file++;\n      }\n    }\n  }\n  if (rank !== 0 || file !== 8) return Result.err(new FenError(InvalidFen.Board));\n  return Result.ok(board);\n};\n\nexport const parsePockets = (pocketPart: string): Result<Material, FenError> => {\n  if (pocketPart.length > 64) return Result.err(new FenError(InvalidFen.Pockets));\n  const pockets = Material.empty();\n  for (const c of pocketPart) {\n    const piece = charToPiece(c);\n    if (!piece) return Result.err(new FenError(InvalidFen.Pockets));\n    pockets[piece.color][piece.role]++;\n  }\n  return Result.ok(pockets);\n};\n\nexport const parseCastlingFen = (board: Board, castlingPart: string): Result<SquareSet, FenError> => {\n  let castlingRights = SquareSet.empty();\n  if (castlingPart === '-') return Result.ok(castlingRights);\n\n  for (const c of castlingPart) {\n    const lower = c.toLowerCase();\n    const color = c === lower ? 'black' : 'white';\n    const rank = color === 'white' ? 0 : 7;\n    if ('a' <= lower && lower <= 'h') {\n      castlingRights = castlingRights.with(squareFromCoords(lower.charCodeAt(0) - 'a'.charCodeAt(0), rank)!);\n    } else if (lower === 'k' || lower === 'q') {\n      const rooksAndKings = board[color].intersect(SquareSet.backrank(color)).intersect(board.rook.union(board.king));\n      const candidate = lower === 'k' ? rooksAndKings.last() : rooksAndKings.first();\n      castlingRights = castlingRights.with(\n        defined(candidate) && board.rook.has(candidate) ? candidate : squareFromCoords(lower === 'k' ? 7 : 0, rank)!,\n      );\n    } else return Result.err(new FenError(InvalidFen.Castling));\n  }\n\n  if (COLORS.some(color => SquareSet.backrank(color).intersect(castlingRights).size() > 2)) {\n    return Result.err(new FenError(InvalidFen.Castling));\n  }\n\n  return Result.ok(castlingRights);\n};\n\nexport const parseRemainingChecks = (part: string): Result<RemainingChecks, FenError> => {\n  const parts = part.split('+');\n  if (parts.length === 3 && parts[0] === '') {\n    const white = parseSmallUint(parts[1]);\n    const black = parseSmallUint(parts[2]);\n    if (!defined(white) || white > 3 || !defined(black) || black > 3) {\n      return Result.err(new FenError(InvalidFen.RemainingChecks));\n    }\n    return Result.ok(new RemainingChecks(3 - white, 3 - black));\n  } else if (parts.length === 2) {\n    const white = parseSmallUint(parts[0]);\n    const black = parseSmallUint(parts[1]);\n    if (!defined(white) || white > 3 || !defined(black) || black > 3) {\n      return Result.err(new FenError(InvalidFen.RemainingChecks));\n    }\n    return Result.ok(new RemainingChecks(white, black));\n  } else return Result.err(new FenError(InvalidFen.RemainingChecks));\n};\n\nexport const parseFen = (fen: string): Result<Setup, FenError> => {\n  const parts = fen.split(/[\\s_]+/);\n  const boardPart = parts.shift()!;\n\n  // Board and pockets\n  let board: Result<Board, FenError>;\n  let pockets = Result.ok<Material | undefined, FenError>(undefined);\n  if (boardPart.endsWith(']')) {\n    const pocketStart = boardPart.indexOf('[');\n    if (pocketStart === -1) return Result.err(new FenError(InvalidFen.Fen));\n    board = parseBoardFen(boardPart.slice(0, pocketStart));\n    pockets = parsePockets(boardPart.slice(pocketStart + 1, -1));\n  } else {\n    const pocketStart = nthIndexOf(boardPart, '/', 7);\n    if (pocketStart === -1) board = parseBoardFen(boardPart);\n    else {\n      board = parseBoardFen(boardPart.slice(0, pocketStart));\n      pockets = parsePockets(boardPart.slice(pocketStart + 1));\n    }\n  }\n\n  // Turn\n  let turn: Color;\n  const turnPart = parts.shift();\n  if (!defined(turnPart) || turnPart === 'w') turn = 'white';\n  else if (turnPart === 'b') turn = 'black';\n  else return Result.err(new FenError(InvalidFen.Turn));\n\n  return board.chain(board => {\n    // Castling\n    const castlingPart = parts.shift();\n    const castlingRights = defined(castlingPart) ? parseCastlingFen(board, castlingPart) : Result.ok(SquareSet.empty());\n\n    // En passant square\n    const epPart = parts.shift();\n    let epSquare: Square | undefined;\n    if (defined(epPart) && epPart !== '-') {\n      epSquare = parseSquare(epPart);\n      if (!defined(epSquare)) return Result.err(new FenError(InvalidFen.EpSquare));\n    }\n\n    // Halfmoves or remaining checks\n    let halfmovePart = parts.shift();\n    let earlyRemainingChecks: Result<RemainingChecks, FenError> | undefined;\n    if (defined(halfmovePart) && halfmovePart.includes('+')) {\n      earlyRemainingChecks = parseRemainingChecks(halfmovePart);\n      halfmovePart = parts.shift();\n    }\n    const halfmoves = defined(halfmovePart) ? parseSmallUint(halfmovePart) : 0;\n    if (!defined(halfmoves)) return Result.err(new FenError(InvalidFen.Halfmoves));\n\n    const fullmovesPart = parts.shift();\n    const fullmoves = defined(fullmovesPart) ? parseSmallUint(fullmovesPart) : 1;\n    if (!defined(fullmoves)) return Result.err(new FenError(InvalidFen.Fullmoves));\n\n    const remainingChecksPart = parts.shift();\n    let remainingChecks: Result<RemainingChecks | undefined, FenError> = Result.ok(undefined);\n    if (defined(remainingChecksPart)) {\n      if (defined(earlyRemainingChecks)) return Result.err(new FenError(InvalidFen.RemainingChecks));\n      remainingChecks = parseRemainingChecks(remainingChecksPart);\n    } else if (defined(earlyRemainingChecks)) {\n      remainingChecks = earlyRemainingChecks;\n    }\n\n    if (parts.length > 0) return Result.err(new FenError(InvalidFen.Fen));\n\n    return pockets.chain(pockets =>\n      castlingRights.chain(castlingRights =>\n        remainingChecks.map(remainingChecks => {\n          return {\n            board,\n            pockets,\n            turn,\n            castlingRights,\n            remainingChecks,\n            epSquare,\n            halfmoves,\n            fullmoves: Math.max(1, fullmoves),\n          };\n        })\n      )\n    );\n  });\n};\n\nexport interface FenOpts {\n  epd?: boolean;\n}\n\nexport const parsePiece = (str: string): Piece | undefined => {\n  if (!str) return;\n  const piece = charToPiece(str[0]);\n  if (!piece) return;\n  if (str.length === 2 && str[1] === '~') piece.promoted = true;\n  else if (str.length > 1) return;\n  return piece;\n};\n\nexport const makePiece = (piece: Piece): string => {\n  let r = roleToChar(piece.role);\n  if (piece.color === 'white') r = r.toUpperCase();\n  if (piece.promoted) r += '~';\n  return r;\n};\n\nexport const makeBoardFen = (board: Board): string => {\n  let fen = '';\n  let empty = 0;\n  for (let rank = 7; rank >= 0; rank--) {\n    for (let file = 0; file < 8; file++) {\n      const square = file + rank * 8;\n      const piece = board.get(square);\n      if (!piece) empty++;\n      else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        fen += makePiece(piece);\n      }\n\n      if (file === 7) {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        if (rank !== 0) fen += '/';\n      }\n    }\n  }\n  return fen;\n};\n\nexport const makePocket = (material: MaterialSide): string =>\n  ROLES.map(role => roleToChar(role).repeat(material[role])).join('');\n\nexport const makePockets = (pocket: Material): string =>\n  makePocket(pocket.white).toUpperCase() + makePocket(pocket.black);\n\nexport const makeCastlingFen = (board: Board, castlingRights: SquareSet): string => {\n  let fen = '';\n  for (const color of COLORS) {\n    const backrank = SquareSet.backrank(color);\n    let king = board.kingOf(color);\n    if (defined(king) && !backrank.has(king)) king = undefined;\n    const candidates = board.pieces(color, 'rook').intersect(backrank);\n    for (const rook of castlingRights.intersect(backrank).reversed()) {\n      if (rook === candidates.first() && defined(king) && rook < king) {\n        fen += color === 'white' ? 'Q' : 'q';\n      } else if (rook === candidates.last() && defined(king) && king < rook) {\n        fen += color === 'white' ? 'K' : 'k';\n      } else {\n        const file = FILE_NAMES[squareFile(rook)];\n        fen += color === 'white' ? file.toUpperCase() : file;\n      }\n    }\n  }\n  return fen || '-';\n};\n\nexport const makeRemainingChecks = (checks: RemainingChecks): string => `${checks.white}+${checks.black}`;\n\nexport const makeFen = (setup: Setup, opts?: FenOpts): string =>\n  [\n    makeBoardFen(setup.board) + (setup.pockets ? `[${makePockets(setup.pockets)}]` : ''),\n    setup.turn[0],\n    makeCastlingFen(setup.board, setup.castlingRights),\n    defined(setup.epSquare) ? makeSquare(setup.epSquare) : '-',\n    ...(setup.remainingChecks ? [makeRemainingChecks(setup.remainingChecks)] : []),\n    ...(opts?.epd ? [] : [Math.max(0, Math.min(setup.halfmoves, 9999)), Math.max(1, Math.min(setup.fullmoves, 9999))]),\n  ].join(' ');\n", "import { attacks, bishopAttacks, kingAttacks, knightAttacks, queenAttacks, rookAttacks } from './attacks.js';\nimport { Position } from './chess.js';\nimport { SquareSet } from './squareSet.js';\nimport { CastlingSide, FILE_NAMES, isDrop, Move, RANK_NAMES, SquareName } from './types.js';\nimport { charToRole, defined, makeSquare, opposite, parseSquare, roleToChar, squareFile, squareRank } from './util.js';\n\nconst makeSanWithoutSuffix = (pos: Position, move: Move): string => {\n  let san = '';\n  if (isDrop(move)) {\n    if (move.role !== 'pawn') san = roleToChar(move.role).toUpperCase();\n    san += '@' + makeSquare(move.to);\n  } else {\n    const role = pos.board.getRole(move.from);\n    if (!role) return '--';\n    if (role === 'king' && (pos.board[pos.turn].has(move.to) || Math.abs(move.to - move.from) === 2)) {\n      san = move.to > move.from ? 'O-O' : 'O-O-O';\n    } else {\n      const capture = pos.board.occupied.has(move.to)\n        || (role === 'pawn' && squareFile(move.from) !== squareFile(move.to));\n      if (role !== 'pawn') {\n        san = roleToChar(role).toUpperCase();\n\n        // Disambiguation\n        let others;\n        if (role === 'king') others = kingAttacks(move.to).intersect(pos.board.king);\n        else if (role === 'queen') others = queenAttacks(move.to, pos.board.occupied).intersect(pos.board.queen);\n        else if (role === 'rook') others = rookAttacks(move.to, pos.board.occupied).intersect(pos.board.rook);\n        else if (role === 'bishop') others = bishopAttacks(move.to, pos.board.occupied).intersect(pos.board.bishop);\n        else others = knightAttacks(move.to).intersect(pos.board.knight);\n        others = others.intersect(pos.board[pos.turn]).without(move.from);\n        if (others.nonEmpty()) {\n          const ctx = pos.ctx();\n          for (const from of others) {\n            if (!pos.dests(from, ctx).has(move.to)) others = others.without(from);\n          }\n          if (others.nonEmpty()) {\n            let row = false;\n            let column = others.intersects(SquareSet.fromRank(squareRank(move.from)));\n            if (others.intersects(SquareSet.fromFile(squareFile(move.from)))) row = true;\n            else column = true;\n            if (column) san += FILE_NAMES[squareFile(move.from)];\n            if (row) san += RANK_NAMES[squareRank(move.from)];\n          }\n        }\n      } else if (capture) san = FILE_NAMES[squareFile(move.from)];\n\n      if (capture) san += 'x';\n      san += makeSquare(move.to);\n      if (move.promotion) san += '=' + roleToChar(move.promotion).toUpperCase();\n    }\n  }\n  return san;\n};\n\nexport const makeSanAndPlay = (pos: Position, move: Move): string => {\n  const san = makeSanWithoutSuffix(pos, move);\n  pos.play(move);\n  if (pos.outcome()?.winner) return san + '#';\n  if (pos.isCheck()) return san + '+';\n  return san;\n};\n\nexport const makeSanVariation = (pos: Position, variation: Move[]): string => {\n  pos = pos.clone();\n  const line = [];\n  for (let i = 0; i < variation.length; i++) {\n    if (i !== 0) line.push(' ');\n    if (pos.turn === 'white') line.push(pos.fullmoves, '. ');\n    else if (i === 0) line.push(pos.fullmoves, '... ');\n    const san = makeSanWithoutSuffix(pos, variation[i]);\n    pos.play(variation[i]);\n    line.push(san);\n    if (san === '--') return line.join('');\n    if (i === variation.length - 1 && pos.outcome()?.winner) line.push('#');\n    else if (pos.isCheck()) line.push('+');\n  }\n  return line.join('');\n};\n\nexport const makeSan = (pos: Position, move: Move): string => makeSanAndPlay(pos.clone(), move);\n\nexport const parseSan = (pos: Position, san: string): Move | undefined => {\n  const ctx = pos.ctx();\n\n  // Normal move\n  const match = san.match(/^([NBRQK])?([a-h])?([1-8])?[-x]?([a-h][1-8])(?:=?([nbrqkNBRQK]))?[+#]?$/) as\n    | [\n      string,\n      'N' | 'B' | 'R' | 'Q' | 'K' | undefined,\n      string | undefined,\n      string | undefined,\n      SquareName,\n      'n' | 'b' | 'r' | 'q' | 'k' | 'N' | 'B' | 'R' | 'Q' | 'K' | undefined,\n    ]\n    | null;\n  if (!match) {\n    // Castling\n    let castlingSide: CastlingSide | undefined;\n    if (san === 'O-O' || san === 'O-O+' || san === 'O-O#') castlingSide = 'h';\n    else if (san === 'O-O-O' || san === 'O-O-O+' || san === 'O-O-O#') castlingSide = 'a';\n    if (castlingSide) {\n      const rook = pos.castles.rook[pos.turn][castlingSide];\n      if (!defined(ctx.king) || !defined(rook) || !pos.dests(ctx.king, ctx).has(rook)) return;\n      return {\n        from: ctx.king,\n        to: rook,\n      };\n    }\n\n    // Drop\n    const match = san.match(/^([pnbrqkPNBRQK])?@([a-h][1-8])[+#]?$/) as\n      | [string, 'p' | 'n' | 'b' | 'r' | 'q' | 'k' | 'P' | 'N' | 'B' | 'R' | 'Q' | 'K' | undefined, SquareName]\n      | null;\n    if (!match) return;\n    const move = {\n      role: match[1] ? charToRole(match[1]) : 'pawn',\n      to: parseSquare(match[2]),\n    };\n    return pos.isLegal(move, ctx) ? move : undefined;\n  }\n  const role = match[1] ? charToRole(match[1]) : 'pawn';\n  const to = parseSquare(match[4]);\n\n  const promotion = match[5] ? charToRole(match[5]) : undefined;\n  if (!!promotion !== (role === 'pawn' && SquareSet.backranks().has(to))) return;\n  if (promotion === 'king' && pos.rules !== 'antichess') return;\n\n  let candidates = pos.board.pieces(pos.turn, role);\n  if (role === 'pawn' && !match[2]) candidates = candidates.intersect(SquareSet.fromFile(squareFile(to)));\n  else if (match[2]) candidates = candidates.intersect(SquareSet.fromFile(match[2].charCodeAt(0) - 'a'.charCodeAt(0)));\n  if (match[3]) candidates = candidates.intersect(SquareSet.fromRank(match[3].charCodeAt(0) - '1'.charCodeAt(0)));\n\n  // Optimization: Reduce set of candidates\n  const pawnAdvance = role === 'pawn' ? SquareSet.fromFile(squareFile(to)) : SquareSet.empty();\n  candidates = candidates.intersect(\n    pawnAdvance.union(attacks({ color: opposite(pos.turn), role }, to, pos.board.occupied)),\n  );\n\n  // Check uniqueness and legality\n  let from;\n  for (const candidate of candidates) {\n    if (pos.dests(candidate, ctx).has(to)) {\n      if (defined(from)) return; // Ambiguous\n      from = candidate;\n    }\n  }\n  if (!defined(from)) return; // Illegal\n\n  return {\n    from,\n    to,\n    promotion,\n  };\n};\n", "import { Result } from '@badrap/result';\nimport { between, kingAttacks, pawnAttacks } from './attacks.js';\nimport { Board } from './board.js';\nimport {\n  Castles,\n  castlingSide,\n  Chess,\n  Context,\n  equalsIgnoreMoves,\n  IllegalSetup,\n  isImpossibleCheck,\n  isStandardMaterialSide,\n  normalizeMove,\n  Position,\n  PositionError,\n  pseudoDests,\n} from './chess.js';\nimport { Material, MaterialSide, RemainingChecks, Setup } from './setup.js';\nimport { SquareSet } from './squareSet.js';\nimport { Color, COLORS, Outcome, Piece, Rules, Square } from './types.js';\nimport { defined, opposite } from './util.js';\n\nexport {\n  Castles,\n  castlingSide,\n  Chess,\n  Context,\n  equalsIgnoreMoves,\n  IllegalSetup,\n  isImpossibleCheck,\n  normalizeMove,\n  Position,\n  PositionError,\n};\n\nexport class Crazyhouse extends Position {\n  private constructor() {\n    super('crazyhouse');\n  }\n\n  reset() {\n    super.reset();\n    this.pockets = Material.empty();\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.board.promoted = setup.board.promoted\n      .intersect(setup.board.occupied)\n      .diff(setup.board.king)\n      .diff(setup.board.pawn);\n    this.pockets = setup.pockets ? setup.pockets.clone() : Material.empty();\n  }\n\n  static default(): Crazyhouse {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Crazyhouse, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Crazyhouse {\n    return super.clone() as Crazyhouse;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    return super.validate().chain(_ => {\n      if (this.pockets?.count('king')) {\n        return Result.err(new PositionError(IllegalSetup.Kings));\n      }\n      if ((this.pockets?.size() || 0) + this.board.occupied.size() > 64) {\n        return Result.err(new PositionError(IllegalSetup.Variant));\n      }\n      return Result.ok(undefined);\n    });\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    // No material can leave the game, but we can easily check this for\n    // custom positions.\n    if (!this.pockets) return super.hasInsufficientMaterial(color);\n    return (\n      this.board.occupied.size() + this.pockets.size() <= 3\n      && this.board.pawn.isEmpty()\n      && this.board.promoted.isEmpty()\n      && this.board.rooksAndQueens().isEmpty()\n      && this.pockets.count('pawn') <= 0\n      && this.pockets.count('rook') <= 0\n      && this.pockets.count('queen') <= 0\n    );\n  }\n\n  dropDests(ctx?: Context): SquareSet {\n    const mask = this.board.occupied\n      .complement()\n      .intersect(\n        this.pockets?.[this.turn].hasNonPawns()\n          ? SquareSet.full()\n          : this.pockets?.[this.turn].hasPawns()\n          ? SquareSet.backranks().complement()\n          : SquareSet.empty(),\n      );\n\n    ctx = ctx || this.ctx();\n    if (defined(ctx.king) && ctx.checkers.nonEmpty()) {\n      const checker = ctx.checkers.singleSquare();\n      if (!defined(checker)) return SquareSet.empty();\n      return mask.intersect(between(checker, ctx.king));\n    } else return mask;\n  }\n}\n\nexport class Atomic extends Position {\n  private constructor() {\n    super('atomic');\n  }\n\n  static default(): Atomic {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Atomic, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Atomic {\n    return super.clone() as Atomic;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    // Like chess, but allow our king to be missing.\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (this.board.king.size() > 2) return Result.err(new PositionError(IllegalSetup.Kings));\n    const otherKing = this.board.kingOf(opposite(this.turn));\n    if (!defined(otherKing)) return Result.err(new PositionError(IllegalSetup.Kings));\n    if (this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty()) {\n      return Result.err(new PositionError(IllegalSetup.OppositeCheck));\n    }\n    if (SquareSet.backranks().intersects(this.board.pawn)) {\n      return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n    }\n    return Result.ok(undefined);\n  }\n\n  kingAttackers(square: Square, attacker: Color, occupied: SquareSet): SquareSet {\n    const attackerKings = this.board.pieces(attacker, 'king');\n    if (attackerKings.isEmpty() || kingAttacks(square).intersects(attackerKings)) {\n      return SquareSet.empty();\n    }\n    return super.kingAttackers(square, attacker, occupied);\n  }\n\n  protected playCaptureAt(square: Square, captured: Piece): void {\n    super.playCaptureAt(square, captured);\n    this.board.take(square);\n    for (const explode of kingAttacks(square).intersect(this.board.occupied).diff(this.board.pawn)) {\n      const piece = this.board.take(explode);\n      if (piece?.role === 'rook') this.castles.discardRook(explode);\n      if (piece?.role === 'king') this.castles.discardColor(piece.color);\n    }\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    // Remaining material does not matter if the enemy king is already\n    // exploded.\n    if (this.board.pieces(opposite(color), 'king').isEmpty()) return false;\n\n    // Bare king cannot mate.\n    if (this.board[color].diff(this.board.king).isEmpty()) return true;\n\n    // As long as the enemy king is not alone, there is always a chance their\n    // own pieces explode next to it.\n    if (this.board[opposite(color)].diff(this.board.king).nonEmpty()) {\n      // Unless there are only bishops that cannot explode each other.\n      if (this.board.occupied.equals(this.board.bishop.union(this.board.king))) {\n        if (!this.board.bishop.intersect(this.board.white).intersects(SquareSet.darkSquares())) {\n          return !this.board.bishop.intersect(this.board.black).intersects(SquareSet.lightSquares());\n        }\n        if (!this.board.bishop.intersect(this.board.white).intersects(SquareSet.lightSquares())) {\n          return !this.board.bishop.intersect(this.board.black).intersects(SquareSet.darkSquares());\n        }\n      }\n      return false;\n    }\n\n    // Queen or pawn (future queen) can give mate against bare king.\n    if (this.board.queen.nonEmpty() || this.board.pawn.nonEmpty()) return false;\n\n    // Single knight, bishop or rook cannot mate against bare king.\n    if (this.board.knight.union(this.board.bishop).union(this.board.rook).size() === 1) return true;\n\n    // If only knights, more than two are required to mate bare king.\n    if (this.board.occupied.equals(this.board.knight.union(this.board.king))) {\n      return this.board.knight.size() <= 2;\n    }\n\n    return false;\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n    let dests = SquareSet.empty();\n    for (const to of pseudoDests(this, square, ctx)) {\n      const after = this.clone();\n      after.play({ from: square, to });\n      const ourKing = after.board.kingOf(this.turn);\n      if (\n        defined(ourKing)\n        && (!defined(after.board.kingOf(after.turn))\n          || after.kingAttackers(ourKing, after.turn, after.board.occupied).isEmpty())\n      ) {\n        dests = dests.with(to);\n      }\n    }\n    return dests;\n  }\n\n  isVariantEnd(): boolean {\n    return !!this.variantOutcome();\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    for (const color of COLORS) {\n      if (this.board.pieces(color, 'king').isEmpty()) return { winner: opposite(color) };\n    }\n    return;\n  }\n}\n\nexport class Antichess extends Position {\n  private constructor() {\n    super('antichess');\n  }\n\n  reset() {\n    super.reset();\n    this.castles = Castles.empty();\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.castles = Castles.empty();\n  }\n\n  static default(): Antichess {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Antichess, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Antichess {\n    return super.clone() as Antichess;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (SquareSet.backranks().intersects(this.board.pawn)) {\n      return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n    }\n    return Result.ok(undefined);\n  }\n\n  kingAttackers(_square: Square, _attacker: Color, _occupied: SquareSet): SquareSet {\n    return SquareSet.empty();\n  }\n\n  ctx(): Context {\n    const ctx = super.ctx();\n    if (\n      defined(this.epSquare)\n      && pawnAttacks(opposite(this.turn), this.epSquare).intersects(this.board.pieces(this.turn, 'pawn'))\n    ) {\n      ctx.mustCapture = true;\n      return ctx;\n    }\n    const enemy = this.board[opposite(this.turn)];\n    for (const from of this.board[this.turn]) {\n      if (pseudoDests(this, from, ctx).intersects(enemy)) {\n        ctx.mustCapture = true;\n        return ctx;\n      }\n    }\n    return ctx;\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n    const dests = pseudoDests(this, square, ctx);\n    const enemy = this.board[opposite(this.turn)];\n    return dests.intersect(\n      ctx.mustCapture\n        ? defined(this.epSquare) && this.board.getRole(square) === 'pawn'\n          ? enemy.with(this.epSquare)\n          : enemy\n        : SquareSet.full(),\n    );\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    if (this.board[color].isEmpty()) return false;\n    if (this.board[opposite(color)].isEmpty()) return true;\n    if (this.board.occupied.equals(this.board.bishop)) {\n      const weSomeOnLight = this.board[color].intersects(SquareSet.lightSquares());\n      const weSomeOnDark = this.board[color].intersects(SquareSet.darkSquares());\n      const theyAllOnDark = this.board[opposite(color)].isDisjoint(SquareSet.lightSquares());\n      const theyAllOnLight = this.board[opposite(color)].isDisjoint(SquareSet.darkSquares());\n      return (weSomeOnLight && theyAllOnDark) || (weSomeOnDark && theyAllOnLight);\n    }\n    if (this.board.occupied.equals(this.board.knight) && this.board.occupied.size() === 2) {\n      return (\n        (this.board.white.intersects(SquareSet.lightSquares())\n          !== this.board.black.intersects(SquareSet.darkSquares()))\n          !== (this.turn === color)\n      );\n    }\n    return false;\n  }\n\n  isVariantEnd(): boolean {\n    return this.board[this.turn].isEmpty();\n  }\n\n  variantOutcome(ctx?: Context): Outcome | undefined {\n    ctx = ctx || this.ctx();\n    if (ctx.variantEnd || this.isStalemate(ctx)) {\n      return { winner: this.turn };\n    }\n    return;\n  }\n}\n\nexport class KingOfTheHill extends Position {\n  private constructor() {\n    super('kingofthehill');\n  }\n\n  static default(): KingOfTheHill {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<KingOfTheHill, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): KingOfTheHill {\n    return super.clone() as KingOfTheHill;\n  }\n\n  hasInsufficientMaterial(_color: Color): boolean {\n    return false;\n  }\n\n  isVariantEnd(): boolean {\n    return this.board.king.intersects(SquareSet.center());\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    for (const color of COLORS) {\n      if (this.board.pieces(color, 'king').intersects(SquareSet.center())) return { winner: color };\n    }\n    return;\n  }\n}\n\nexport class ThreeCheck extends Position {\n  private constructor() {\n    super('3check');\n  }\n\n  reset() {\n    super.reset();\n    this.remainingChecks = RemainingChecks.default();\n  }\n\n  protected setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.remainingChecks = setup.remainingChecks?.clone() || RemainingChecks.default();\n  }\n\n  static default(): ThreeCheck {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<ThreeCheck, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): ThreeCheck {\n    return super.clone() as ThreeCheck;\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    return this.board.pieces(color, 'king').equals(this.board[color]);\n  }\n\n  isVariantEnd(): boolean {\n    return !!this.remainingChecks && (this.remainingChecks.white <= 0 || this.remainingChecks.black <= 0);\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    if (this.remainingChecks) {\n      for (const color of COLORS) {\n        if (this.remainingChecks[color] <= 0) return { winner: color };\n      }\n    }\n    return;\n  }\n}\n\nconst racingKingsBoard = (): Board => {\n  const board = Board.empty();\n  board.occupied = new SquareSet(0xffff, 0);\n  board.promoted = SquareSet.empty();\n  board.white = new SquareSet(0xf0f0, 0);\n  board.black = new SquareSet(0x0f0f, 0);\n  board.pawn = SquareSet.empty();\n  board.knight = new SquareSet(0x1818, 0);\n  board.bishop = new SquareSet(0x2424, 0);\n  board.rook = new SquareSet(0x4242, 0);\n  board.queen = new SquareSet(0x0081, 0);\n  board.king = new SquareSet(0x8100, 0);\n  return board;\n};\n\nexport class RacingKings extends Position {\n  private constructor() {\n    super('racingkings');\n  }\n\n  reset() {\n    this.board = racingKingsBoard();\n    this.pockets = undefined;\n    this.turn = 'white';\n    this.castles = Castles.empty();\n    this.epSquare = undefined;\n    this.remainingChecks = undefined;\n    this.halfmoves = 0;\n    this.fullmoves = 1;\n  }\n\n  setupUnchecked(setup: Setup) {\n    super.setupUnchecked(setup);\n    this.castles = Castles.empty();\n  }\n\n  static default(): RacingKings {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<RacingKings, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): RacingKings {\n    return super.clone() as RacingKings;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.isCheck() || this.board.pawn.nonEmpty()) return Result.err(new PositionError(IllegalSetup.Variant));\n    return super.validate();\n  }\n\n  dests(square: Square, ctx?: Context): SquareSet {\n    ctx = ctx || this.ctx();\n\n    // Kings cannot give check.\n    if (square === ctx.king) return super.dests(square, ctx);\n\n    // Do not allow giving check.\n    let dests = SquareSet.empty();\n    for (const to of super.dests(square, ctx)) {\n      // Valid, because there are no promotions (or even pawns).\n      const move = { from: square, to };\n      const after = this.clone();\n      after.play(move);\n      if (!after.isCheck()) dests = dests.with(to);\n    }\n    return dests;\n  }\n\n  hasInsufficientMaterial(_color: Color): boolean {\n    return false;\n  }\n\n  isVariantEnd(): boolean {\n    const goal = SquareSet.fromRank(7);\n    const inGoal = this.board.king.intersect(goal);\n    if (inGoal.isEmpty()) return false;\n    if (this.turn === 'white' || inGoal.intersects(this.board.black)) return true;\n\n    // White has reached the backrank. Check if black can catch up.\n    const blackKing = this.board.kingOf('black');\n    if (defined(blackKing)) {\n      const occ = this.board.occupied.without(blackKing);\n      for (const target of kingAttacks(blackKing).intersect(goal).diff(this.board.black)) {\n        if (this.kingAttackers(target, 'white', occ).isEmpty()) return false;\n      }\n    }\n    return true;\n  }\n\n  variantOutcome(ctx?: Context): Outcome | undefined {\n    if (ctx ? !ctx.variantEnd : !this.isVariantEnd()) return;\n    const goal = SquareSet.fromRank(7);\n    const blackInGoal = this.board.pieces('black', 'king').intersects(goal);\n    const whiteInGoal = this.board.pieces('white', 'king').intersects(goal);\n    if (blackInGoal && !whiteInGoal) return { winner: 'black' };\n    if (whiteInGoal && !blackInGoal) return { winner: 'white' };\n    return { winner: undefined };\n  }\n}\n\nconst hordeBoard = (): Board => {\n  const board = Board.empty();\n  board.occupied = new SquareSet(0xffff_ffff, 0xffff_0066);\n  board.promoted = SquareSet.empty();\n  board.white = new SquareSet(0xffff_ffff, 0x0000_0066);\n  board.black = new SquareSet(0, 0xffff_0000);\n  board.pawn = new SquareSet(0xffff_ffff, 0x00ff_0066);\n  board.knight = new SquareSet(0, 0x4200_0000);\n  board.bishop = new SquareSet(0, 0x2400_0000);\n  board.rook = new SquareSet(0, 0x8100_0000);\n  board.queen = new SquareSet(0, 0x0800_0000);\n  board.king = new SquareSet(0, 0x1000_0000);\n  return board;\n};\n\nexport class Horde extends Position {\n  private constructor() {\n    super('horde');\n  }\n\n  reset() {\n    this.board = hordeBoard();\n    this.pockets = undefined;\n    this.turn = 'white';\n    this.castles = Castles.default();\n    this.castles.discardColor('white');\n    this.epSquare = undefined;\n    this.remainingChecks = undefined;\n    this.halfmoves = 0;\n    this.fullmoves = 1;\n  }\n\n  static default(): Horde {\n    const pos = new this();\n    pos.reset();\n    return pos;\n  }\n\n  static fromSetup(setup: Setup): Result<Horde, PositionError> {\n    const pos = new this();\n    pos.setupUnchecked(setup);\n    return pos.validate().map(_ => pos);\n  }\n\n  clone(): Horde {\n    return super.clone() as Horde;\n  }\n\n  protected validate(): Result<undefined, PositionError> {\n    if (this.board.occupied.isEmpty()) return Result.err(new PositionError(IllegalSetup.Empty));\n    if (this.board.king.size() !== 1) return Result.err(new PositionError(IllegalSetup.Kings));\n\n    const otherKing = this.board.kingOf(opposite(this.turn));\n    if (defined(otherKing) && this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty()) {\n      return Result.err(new PositionError(IllegalSetup.OppositeCheck));\n    }\n    for (const color of COLORS) {\n      const backranks = this.board.pieces(color, 'king').isEmpty()\n        ? SquareSet.backrank(opposite(color))\n        : SquareSet.backranks();\n      if (this.board.pieces(color, 'pawn').intersects(backranks)) {\n        return Result.err(new PositionError(IllegalSetup.PawnsOnBackrank));\n      }\n    }\n    return Result.ok(undefined);\n  }\n\n  hasInsufficientMaterial(color: Color): boolean {\n    // The side with the king can always win by capturing the horde.\n    if (this.board.pieces(color, 'king').nonEmpty()) return false;\n\n    type SquareColor = 'light' | 'dark';\n    const oppositeSquareColor = (squareColor: SquareColor): SquareColor => (squareColor === 'light' ? 'dark' : 'light');\n    const coloredSquares = (squareColor: SquareColor): SquareSet =>\n      squareColor === 'light' ? SquareSet.lightSquares() : SquareSet.darkSquares();\n\n    const hasBishopPair = (side: Color) => {\n      const bishops = this.board.pieces(side, 'bishop');\n      return bishops.intersects(SquareSet.darkSquares()) && bishops.intersects(SquareSet.lightSquares());\n    };\n\n    // By this point: color is the horde.\n    // Based on\n    // https://github.com/stevepapazis/horde-insufficient-material-tests.\n    const horde = MaterialSide.fromBoard(this.board, color);\n    const hordeBishops = (squareColor: SquareColor) =>\n      coloredSquares(squareColor).intersect(this.board.pieces(color, 'bishop')).size();\n    const hordeBishopColor: SquareColor = hordeBishops('light') >= 1 ? 'light' : 'dark';\n    const hordeNum = horde.pawn\n      + horde.knight\n      + horde.rook\n      + horde.queen\n      + Math.min(hordeBishops('dark'), 2)\n      + Math.min(hordeBishops('light'), 2);\n\n    const pieces = MaterialSide.fromBoard(this.board, opposite(color));\n    const piecesBishops = (squareColor: SquareColor) =>\n      coloredSquares(squareColor)\n        .intersect(this.board.pieces(opposite(color), 'bishop'))\n        .size();\n    const piecesNum = pieces.size();\n    const piecesOfRoleNot = (piece: number) => piecesNum - piece;\n\n    if (hordeNum === 0) return true;\n    if (hordeNum >= 4) {\n      // Four or more pieces can always deliver mate.\n      return false;\n    }\n    if ((horde.pawn >= 1 || horde.queen >= 1) && hordeNum >= 2) {\n      // Pawns/queens are never insufficient material when paired with any other\n      // piece (a pawn promotes to a queen and delivers mate).\n      return false;\n    }\n    if (horde.rook >= 1 && hordeNum >= 2) {\n      // A rook is insufficient material only when it is paired with a bishop\n      // against a lone king. The horde can mate in any other case.\n      // A rook on A1 and a bishop on C3 mate a king on B1 when there is a\n      // friendly pawn/opposite-color-bishop/rook/queen on C2.\n      // A rook on B8 and a bishop C3 mate a king on A1 when there is a friendly\n      // knight on A2.\n      if (\n        !(\n          hordeNum === 2\n          && horde.rook === 1\n          && horde.bishop === 1\n          && piecesOfRoleNot(piecesBishops(hordeBishopColor)) === 1\n        )\n      ) {\n        return false;\n      }\n    }\n\n    if (hordeNum === 1) {\n      if (piecesNum === 1) {\n        // A lone piece cannot mate a lone king.\n        return true;\n      } else if (horde.queen === 1) {\n        // The horde has a lone queen.\n        // A lone queen mates a king on A1 bounded by:\n        //  -- a pawn/rook on A2\n        //  -- two same color bishops on A2, B1\n        // We ignore every other mating case, since it can be reduced to\n        // the two previous cases (e.g. a black pawn on A2 and a black\n        // bishop on B1).\n        return !(pieces.pawn >= 1 || pieces.rook >= 1 || piecesBishops('light') >= 2 || piecesBishops('dark') >= 2);\n      } else if (horde.pawn === 1) {\n        // Promote the pawn to a queen or a knight and check whether white\n        // can mate.\n        const pawnSquare = this.board.pieces(color, 'pawn').last()!;\n        const promoteToQueen = this.clone();\n        promoteToQueen.board.set(pawnSquare, { color, role: 'queen' });\n        const promoteToKnight = this.clone();\n        promoteToKnight.board.set(pawnSquare, { color, role: 'knight' });\n        return promoteToQueen.hasInsufficientMaterial(color) && promoteToKnight.hasInsufficientMaterial(color);\n      } else if (horde.rook === 1) {\n        // A lone rook mates a king on A8 bounded by a pawn/rook on A7 and a\n        // pawn/knight on B7. We ignore every other case, since it can be\n        // reduced to the two previous cases.\n        // (e.g. three pawns on A7, B7, C7)\n        return !(\n          pieces.pawn >= 2\n          || (pieces.rook >= 1 && pieces.pawn >= 1)\n          || (pieces.rook >= 1 && pieces.knight >= 1)\n          || (pieces.pawn >= 1 && pieces.knight >= 1)\n        );\n      } else if (horde.bishop === 1) {\n        // The horde has a lone bishop.\n        return !(\n          // The king can be mated on A1 if there is a pawn/opposite-color-bishop\n          // on A2 and an opposite-color-bishop on B1.\n          // If black has two or more pawns, white gets the benefit of the doubt;\n          // there is an outside chance that white promotes its pawns to\n          // opposite-color-bishops and selfmates theirself.\n          // Every other case that the king is mated by the bishop requires that\n          // black has two pawns or two opposite-color-bishop or a pawn and an\n          // opposite-color-bishop.\n          // For example a king on A3 can be mated if there is\n          // a pawn/opposite-color-bishop on A4, a pawn/opposite-color-bishop on\n          // B3, a pawn/bishop/rook/queen on A2 and any other piece on B2.\n          piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 2\n          || (piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1 && pieces.pawn >= 1)\n          || pieces.pawn >= 2\n        );\n      } else if (horde.knight === 1) {\n        // The horde has a lone knight.\n        return !(\n          // The king on A1 can be smother mated by a knight on C2 if there is\n          // a pawn/knight/bishop on B2, a knight/rook on B1 and any other piece\n          // on A2.\n          // Moreover, when black has four or more pieces and two of them are\n          // pawns, black can promote their pawns and selfmate theirself.\n          piecesNum >= 4\n          && (pieces.knight >= 2\n            || pieces.pawn >= 2\n            || (pieces.rook >= 1 && pieces.knight >= 1)\n            || (pieces.rook >= 1 && pieces.bishop >= 1)\n            || (pieces.knight >= 1 && pieces.bishop >= 1)\n            || (pieces.rook >= 1 && pieces.pawn >= 1)\n            || (pieces.knight >= 1 && pieces.pawn >= 1)\n            || (pieces.bishop >= 1 && pieces.pawn >= 1)\n            || (hasBishopPair(opposite(color)) && pieces.pawn >= 1))\n          && (piecesBishops('dark') < 2 || piecesOfRoleNot(piecesBishops('dark')) >= 3)\n          && (piecesBishops('light') < 2 || piecesOfRoleNot(piecesBishops('light')) >= 3)\n        );\n      }\n\n      // By this point, we only need to deal with white's minor pieces.\n    } else if (hordeNum === 2) {\n      if (piecesNum === 1) {\n        // Two minor pieces cannot mate a lone king.\n        return true;\n      } else if (horde.knight === 2) {\n        // A king on A1 is mated by two knights, if it is obstructed by a\n        // pawn/bishop/knight on B2. On the other hand, if black only has\n        // major pieces it is a draw.\n        return pieces.pawn + pieces.bishop + pieces.knight < 1;\n      } else if (hasBishopPair(color)) {\n        return !(\n          // A king on A1 obstructed by a pawn/bishop on A2 is mated\n          // by the bishop pair.\n          pieces.pawn >= 1\n          || pieces.bishop >= 1\n          // A pawn/bishop/knight on B4, a pawn/bishop/rook/queen on\n          // A4 and the king on A3 enable Boden's mate by the bishop\n          // pair. In every other case white cannot win.\n          || (pieces.knight >= 1 && pieces.rook + pieces.queen >= 1)\n        );\n      } else if (horde.bishop >= 1 && horde.knight >= 1) {\n        // The horde has a bishop and a knight.\n        return !(\n          // A king on A1 obstructed by a pawn/opposite-color-bishop on\n          // A2 is mated by a knight on D2 and a bishop on C3.\n          pieces.pawn >= 1\n          || piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1\n          // A king on A1 bounded by two friendly pieces on A2 and B1 is\n          // mated when the knight moves from D4 to C2 so that both the\n          // knight and the bishop deliver check.\n          || piecesOfRoleNot(piecesBishops(hordeBishopColor)) >= 3\n        );\n      } else {\n        // The horde has two or more bishops on the same color.\n        // White can only win if black has enough material to obstruct\n        // the squares of the opposite color around the king.\n        return !(\n          // A king on A1 obstructed by a pawn/opposite-bishop/knight\n          // on A2 and a opposite-bishop/knight on B1 is mated by two\n          // bishops on B2 and C3. This position is theoretically\n          // achievable even when black has two pawns or when they\n          // have a pawn and an opposite color bishop.\n          (pieces.pawn >= 1 && piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1)\n          || (pieces.pawn >= 1 && pieces.knight >= 1)\n          || (piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 1 && pieces.knight >= 1)\n          || piecesBishops(oppositeSquareColor(hordeBishopColor)) >= 2\n          || pieces.knight >= 2\n          || pieces.pawn >= 2\n          // In every other case, white can only draw.\n        );\n      }\n    } else if (hordeNum === 3) {\n      // A king in the corner is mated by two knights and a bishop or three\n      // knights or the bishop pair and a knight/bishop.\n      if ((horde.knight === 2 && horde.bishop === 1) || horde.knight === 3 || hasBishopPair(color)) {\n        return false;\n      } else {\n        // White has two same color bishops and a knight.\n        // A king on A1 is mated by a bishop on B2, a bishop on C1 and a\n        // knight on C3, as long as there is another black piece to waste\n        // a tempo.\n        return piecesNum === 1;\n      }\n    }\n\n    return true;\n  }\n\n  isVariantEnd(): boolean {\n    return this.board.white.isEmpty() || this.board.black.isEmpty();\n  }\n\n  variantOutcome(_ctx?: Context): Outcome | undefined {\n    if (this.board.white.isEmpty()) return { winner: 'black' };\n    if (this.board.black.isEmpty()) return { winner: 'white' };\n    return;\n  }\n}\n\nexport const defaultPosition = (rules: Rules): Position => {\n  switch (rules) {\n    case 'chess':\n      return Chess.default();\n    case 'antichess':\n      return Antichess.default();\n    case 'atomic':\n      return Atomic.default();\n    case 'horde':\n      return Horde.default();\n    case 'racingkings':\n      return RacingKings.default();\n    case 'kingofthehill':\n      return KingOfTheHill.default();\n    case '3check':\n      return ThreeCheck.default();\n    case 'crazyhouse':\n      return Crazyhouse.default();\n  }\n};\n\nexport const setupPosition = (rules: Rules, setup: Setup): Result<Position, PositionError> => {\n  switch (rules) {\n    case 'chess':\n      return Chess.fromSetup(setup);\n    case 'antichess':\n      return Antichess.fromSetup(setup);\n    case 'atomic':\n      return Atomic.fromSetup(setup);\n    case 'horde':\n      return Horde.fromSetup(setup);\n    case 'racingkings':\n      return RacingKings.fromSetup(setup);\n    case 'kingofthehill':\n      return KingOfTheHill.fromSetup(setup);\n    case '3check':\n      return ThreeCheck.fromSetup(setup);\n    case 'crazyhouse':\n      return Crazyhouse.fromSetup(setup);\n  }\n};\n\nexport const isStandardMaterial = (pos: Position): boolean => {\n  switch (pos.rules) {\n    case 'chess':\n    case 'antichess':\n    case 'atomic':\n    case 'kingofthehill':\n    case '3check':\n      return COLORS.every(color => isStandardMaterialSide(pos.board, color));\n    case 'crazyhouse': {\n      const promoted = pos.board.promoted;\n      return (\n        promoted.size() + pos.board.pawn.size() + (pos.pockets?.count('pawn') || 0) <= 16\n        && pos.board.knight.diff(promoted).size() + (pos.pockets?.count('knight') || 0) <= 4\n        && pos.board.bishop.diff(promoted).size() + (pos.pockets?.count('bishop') || 0) <= 4\n        && pos.board.rook.diff(promoted).size() + (pos.pockets?.count('rook') || 0) <= 4\n        && pos.board.queen.diff(promoted).size() + (pos.pockets?.count('queen') || 0) <= 2\n      );\n    }\n    case 'horde':\n      return COLORS.every(color =>\n        pos.board.pieces(color, 'king').nonEmpty()\n          ? isStandardMaterialSide(pos.board, color)\n          : pos.board[color].size() <= 36\n      );\n    case 'racingkings':\n      return COLORS.every(\n        color =>\n          pos.board.pieces(color, 'knight').size() <= 2\n          && pos.board.pieces(color, 'bishop').size() <= 2\n          && pos.board.pieces(color, 'rook').size() <= 2\n          && pos.board.pieces(color, 'queen').size() <= 1,\n      );\n  }\n};\n", "/**\n * Parse, transform and write PGN.\n *\n * ## Parser\n *\n * The parser will interpret any input as a PGN, creating a tree of\n * syntactically valid (but not necessarily legal) moves, skipping any invalid\n * tokens.\n *\n * ```ts\n * import { parsePgn, startingPosition } from 'chessops/pgn';\n * import { parseSan } from 'chessops/san';\n *\n * const pgn = '1. d4 d5 *';\n * const games = parsePgn(pgn);\n * for (const game of games) {\n *   const pos = startingPosition(game.headers).unwrap();\n *   for (const node of game.moves.mainline()) {\n *     const move = parseSan(pos, node.san);\n *     if (!move) break; // Illegal move\n *     pos.play(move);\n *   }\n * }\n * ```\n *\n * ## Streaming parser\n *\n * The module also provides a denial-of-service resistant streaming parser.\n * It can be configured with a budget for reasonable complexity of a single\n * game, fed with chunks of text, and will yield parsed games as they are\n * completed.\n *\n * ```ts\n *\n * import { createReadStream } from 'fs';\n * import { PgnParser } from 'chessops/pgn';\n *\n * const stream = createReadStream('games.pgn', { encoding: 'utf-8' });\n *\n * const parser = new PgnParser((game, err) => {\n *   if (err) {\n *     // Budget exceeded.\n *     stream.destroy(err);\n *   }\n *\n *   // Use game ...\n * });\n *\n * await new Promise<void>(resolve =>\n *   stream\n *     .on('data', (chunk: string) => parser.parse(chunk, { stream: true }))\n *     .on('close', () => {\n *       parser.parse('');\n *       resolve();\n *     })\n * );\n * ```\n *\n * ## Augmenting the game tree\n *\n * You can use `walk` to visit all nodes in the game tree, or `transform`\n * to augment it with user data.\n *\n * Both allow you to provide context. You update the context inside the\n * callback, and it is automatically `clone()`-ed at each fork.\n * In the example below, the current position `pos` is provided as context.\n *\n * ```ts\n * import { transform } from 'chessops/pgn';\n * import { makeFen } from 'chessops/fen';\n * import { parseSan, makeSanAndPlay } from 'chessops/san';\n *\n * const pos = startingPosition(game.headers).unwrap();\n * game.moves = transform(game.moves, pos, (pos, node) => {\n *   const move = parseSan(pos, node.san);\n *   if (!move) {\n *     // Illegal move. Returning undefined cuts off the tree here.\n *     return;\n *   }\n *\n *   const san = makeSanAndPlay(pos, move); // Mutating pos!\n *\n *   return {\n *     ...node, // Keep comments and annotation glyphs\n *     san, // Normalized SAN\n *     fen: makeFen(pos.toSetup()), // Add arbitrary user data to node\n *   };\n * });\n * ```\n *\n * ## Writing\n *\n * Requires each node to at least have a `san` property.\n *\n * ```\n * import { makePgn } from 'chessops/pgn';\n *\n * const rewrittenPgn = makePgn(game);\n * ```\n *\n * @packageDocumentation\n */\nimport { Result } from '@badrap/result';\nimport { IllegalSetup, Position, PositionError } from './chess.js';\nimport { FenError, makeFen, parseFen } from './fen.js';\nimport { Outcome, Rules, Square } from './types.js';\nimport { defined, makeSquare, parseSquare } from './util.js';\nimport { defaultPosition, setupPosition } from './variant.js';\n\nexport interface Game<T> {\n  headers: Map<string, string>;\n  comments?: string[];\n  moves: Node<T>;\n}\n\nexport const defaultGame = <T>(initHeaders: () => Map<string, string> = defaultHeaders): Game<T> => ({\n  headers: initHeaders(),\n  moves: new Node(),\n});\n\nexport class Node<T> {\n  children: ChildNode<T>[] = [];\n\n  *mainlineNodes(): Iterable<ChildNode<T>> {\n    let node: Node<T> = this;\n    while (node.children.length) {\n      const child = node.children[0];\n      yield child;\n      node = child;\n    }\n  }\n\n  *mainline(): Iterable<T> {\n    for (const child of this.mainlineNodes()) yield child.data;\n  }\n\n  end(): Node<T> {\n    let node: Node<T> = this;\n    while (node.children.length) node = node.children[0];\n    return node;\n  }\n}\n\nexport class ChildNode<T> extends Node<T> {\n  constructor(public data: T) {\n    super();\n  }\n}\n\nexport const isChildNode = <T>(node: Node<T>): node is ChildNode<T> => node instanceof ChildNode;\n\nexport const extend = <T>(node: Node<T>, data: T[]): Node<T> => {\n  for (const d of data) {\n    const child = new ChildNode(d);\n    node.children.push(child);\n    node = child;\n  }\n  return node;\n};\n\nexport class Box<T> {\n  constructor(public value: T) {}\n\n  clone(): Box<T> {\n    return new Box(this.value);\n  }\n}\n\nexport const transform = <T, U, C extends { clone(): C }>(\n  node: Node<T>,\n  ctx: C,\n  f: (ctx: C, data: T, childIndex: number) => U | undefined,\n): Node<U> => {\n  const root = new Node<U>();\n  const stack = [\n    {\n      before: node,\n      after: root,\n      ctx,\n    },\n  ];\n  let frame;\n  while ((frame = stack.pop())) {\n    for (let childIndex = 0; childIndex < frame.before.children.length; childIndex++) {\n      const ctx = childIndex < frame.before.children.length - 1 ? frame.ctx.clone() : frame.ctx;\n      const childBefore = frame.before.children[childIndex];\n      const data = f(ctx, childBefore.data, childIndex);\n      if (defined(data)) {\n        const childAfter = new ChildNode(data);\n        frame.after.children.push(childAfter);\n        stack.push({\n          before: childBefore,\n          after: childAfter,\n          ctx,\n        });\n      }\n    }\n  }\n  return root;\n};\n\nexport const walk = <T, C extends { clone(): C }>(\n  node: Node<T>,\n  ctx: C,\n  f: (ctx: C, data: T, childIndex: number) => boolean | void,\n) => {\n  const stack = [{ node, ctx }];\n  let frame;\n  while ((frame = stack.pop())) {\n    for (let childIndex = 0; childIndex < frame.node.children.length; childIndex++) {\n      const ctx = childIndex < frame.node.children.length - 1 ? frame.ctx.clone() : frame.ctx;\n      const child = frame.node.children[childIndex];\n      if (f(ctx, child.data, childIndex) !== false) stack.push({ node: child, ctx });\n    }\n  }\n};\n\nexport interface PgnNodeData {\n  san: string;\n  startingComments?: string[];\n  comments?: string[];\n  nags?: number[];\n}\n\nexport const makeOutcome = (outcome: Outcome | undefined): string => {\n  if (!outcome) return '*';\n  else if (outcome.winner === 'white') return '1-0';\n  else if (outcome.winner === 'black') return '0-1';\n  else return '1/2-1/2';\n};\n\nexport const parseOutcome = (s: string | undefined): Outcome | undefined => {\n  if (s === '1-0' || s === '1–0' || s === '1—0') return { winner: 'white' };\n  else if (s === '0-1' || s === '0–1' || s === '0—1') return { winner: 'black' };\n  else if (s === '1/2-1/2' || s === '1/2–1/2' || s === '1/2—1/2') return { winner: undefined };\n  else return;\n};\n\nconst escapeHeader = (value: string): string => value.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n\nconst safeComment = (comment: string): string => comment.replace(/\\}/g, '');\n\nconst enum MakePgnState {\n  Pre = 0,\n  Sidelines = 1,\n  End = 2,\n}\n\ninterface MakePgnFrame {\n  state: MakePgnState;\n  ply: number;\n  node: ChildNode<PgnNodeData>;\n  sidelines: Iterator<ChildNode<PgnNodeData>>;\n  startsVariation: boolean;\n  inVariation: boolean;\n}\n\nexport const makePgn = (game: Game<PgnNodeData>): string => {\n  const builder = [],\n    tokens = [];\n\n  if (game.headers.size) {\n    for (const [key, value] of game.headers.entries()) {\n      builder.push('[', key, ' \"', escapeHeader(value), '\"]\\n');\n    }\n    builder.push('\\n');\n  }\n\n  for (const comment of game.comments || []) tokens.push('{', safeComment(comment), '}');\n\n  const fen = game.headers.get('FEN');\n  const initialPly = fen\n    ? parseFen(fen).unwrap(\n      setup => (setup.fullmoves - 1) * 2 + (setup.turn === 'white' ? 0 : 1),\n      _ => 0,\n    )\n    : 0;\n\n  const stack: MakePgnFrame[] = [];\n\n  const variations = game.moves.children[Symbol.iterator]();\n  const firstVariation = variations.next();\n  if (!firstVariation.done) {\n    stack.push({\n      state: MakePgnState.Pre,\n      ply: initialPly,\n      node: firstVariation.value,\n      sidelines: variations,\n      startsVariation: false,\n      inVariation: false,\n    });\n  }\n\n  let forceMoveNumber = true;\n  while (stack.length) {\n    const frame = stack[stack.length - 1];\n\n    if (frame.inVariation) {\n      tokens.push(')');\n      frame.inVariation = false;\n      forceMoveNumber = true;\n    }\n\n    switch (frame.state) {\n      case MakePgnState.Pre:\n        for (const comment of frame.node.data.startingComments || []) {\n          tokens.push('{', safeComment(comment), '}');\n          forceMoveNumber = true;\n        }\n        if (forceMoveNumber || frame.ply % 2 === 0) {\n          tokens.push(Math.floor(frame.ply / 2) + 1 + (frame.ply % 2 ? '...' : '.'));\n          forceMoveNumber = false;\n        }\n        tokens.push(frame.node.data.san);\n        for (const nag of frame.node.data.nags || []) {\n          tokens.push('$' + nag);\n          forceMoveNumber = true;\n        }\n        for (const comment of frame.node.data.comments || []) {\n          tokens.push('{', safeComment(comment), '}');\n        }\n        frame.state = MakePgnState.Sidelines; // fall through\n      case MakePgnState.Sidelines: {\n        const child = frame.sidelines.next();\n        if (child.done) {\n          const variations = frame.node.children[Symbol.iterator]();\n          const firstVariation = variations.next();\n          if (!firstVariation.done) {\n            stack.push({\n              state: MakePgnState.Pre,\n              ply: frame.ply + 1,\n              node: firstVariation.value,\n              sidelines: variations,\n              startsVariation: false,\n              inVariation: false,\n            });\n          }\n          frame.state = MakePgnState.End;\n        } else {\n          tokens.push('(');\n          forceMoveNumber = true;\n          stack.push({\n            state: MakePgnState.Pre,\n            ply: frame.ply,\n            node: child.value,\n            sidelines: [][Symbol.iterator](),\n            startsVariation: true,\n            inVariation: false,\n          });\n          frame.inVariation = true;\n        }\n        break;\n      }\n      case MakePgnState.End:\n        stack.pop();\n    }\n  }\n\n  tokens.push(makeOutcome(parseOutcome(game.headers.get('Result'))));\n\n  builder.push(tokens.join(' '), '\\n');\n  return builder.join('');\n};\n\nexport const defaultHeaders = (): Map<string, string> =>\n  new Map([\n    ['Event', '?'],\n    ['Site', '?'],\n    ['Date', '????.??.??'],\n    ['Round', '?'],\n    ['White', '?'],\n    ['Black', '?'],\n    ['Result', '*'],\n  ]);\n\nexport const emptyHeaders = (): Map<string, string> => new Map();\n\nconst BOM = '\\ufeff';\n\nconst isWhitespace = (line: string): boolean => /^\\s*$/.test(line);\n\nconst isCommentLine = (line: string): boolean => line.startsWith('%');\n\nexport interface ParseOptions {\n  stream: boolean;\n}\n\ninterface ParserFrame {\n  parent: Node<PgnNodeData>;\n  root: boolean;\n  node?: ChildNode<PgnNodeData>;\n  startingComments?: string[];\n}\n\nconst enum ParserState {\n  Bom = 0,\n  Pre = 1,\n  Headers = 2,\n  Moves = 3,\n  Comment = 4,\n}\n\nexport class PgnError extends Error {}\n\nexport class PgnParser {\n  private lineBuf: string[] = [];\n\n  private budget: number;\n  private found: boolean;\n  private state: ParserState;\n  private game: Game<PgnNodeData>;\n  private stack: ParserFrame[];\n  private commentBuf: string[];\n\n  constructor(\n    private emitGame: (game: Game<PgnNodeData>, err: PgnError | undefined) => void,\n    private initHeaders: () => Map<string, string> = defaultHeaders,\n    private maxBudget = 1_000_000,\n  ) {\n    this.resetGame();\n    this.state = ParserState.Bom;\n  }\n\n  private resetGame() {\n    this.budget = this.maxBudget;\n    this.found = false;\n    this.state = ParserState.Pre;\n    this.game = defaultGame(this.initHeaders);\n    this.stack = [{ parent: this.game.moves, root: true }];\n    this.commentBuf = [];\n  }\n\n  private consumeBudget(cost: number) {\n    this.budget -= cost;\n    if (this.budget < 0) throw new PgnError('ERR_PGN_BUDGET');\n  }\n\n  parse(data: string, options?: ParseOptions): void {\n    if (this.budget < 0) return;\n    try {\n      let idx = 0;\n      for (;;) {\n        const nlIdx = data.indexOf('\\n', idx);\n        if (nlIdx === -1) {\n          break;\n        }\n        const crIdx = nlIdx > idx && data[nlIdx - 1] === '\\r' ? nlIdx - 1 : nlIdx;\n        this.consumeBudget(nlIdx - idx);\n        this.lineBuf.push(data.slice(idx, crIdx));\n        idx = nlIdx + 1;\n        this.handleLine();\n      }\n      this.consumeBudget(data.length - idx);\n      this.lineBuf.push(data.slice(idx));\n\n      if (!options?.stream) {\n        this.handleLine();\n        this.emit(undefined);\n      }\n    } catch (err: unknown) {\n      this.emit(err as PgnError);\n    }\n  }\n\n  private handleLine() {\n    let freshLine = true;\n    let line = this.lineBuf.join('');\n    this.lineBuf = [];\n\n    continuedLine: for (;;) {\n      switch (this.state) {\n        case ParserState.Bom:\n          if (line.startsWith(BOM)) line = line.slice(BOM.length);\n          this.state = ParserState.Pre; // fall through\n        case ParserState.Pre:\n          if (isWhitespace(line) || isCommentLine(line)) return;\n          this.found = true;\n          this.state = ParserState.Headers; // fall through\n        case ParserState.Headers: {\n          if (isCommentLine(line)) return;\n          let moreHeaders = true;\n          while (moreHeaders) {\n            moreHeaders = false;\n            line = line.replace(\n              /^\\s*\\[([A-Za-z0-9][A-Za-z0-9_+#=:-]*)\\s+\"((?:[^\"\\\\]|\\\\\"|\\\\\\\\)*)\"\\]/,\n              (_match, headerName, headerValue) => {\n                this.consumeBudget(200);\n                this.handleHeader(headerName, headerValue.replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\'));\n                moreHeaders = true;\n                freshLine = false;\n                return '';\n              },\n            );\n          }\n          if (isWhitespace(line)) return;\n          this.state = ParserState.Moves; // fall through\n        }\n        case ParserState.Moves: {\n          if (freshLine) {\n            if (isCommentLine(line)) return;\n            if (isWhitespace(line)) return this.emit(undefined);\n          }\n          const tokenRegex =\n            /(?:[NBKRQ]?[a-h]?[1-8]?[-x]?[a-h][1-8](?:=?[nbrqkNBRQK])?|[pnbrqkPNBRQK]?@[a-h][1-8]|[O0o][-–—][O0o](?:[-–—][O0o])?)[+#]?|--|Z0|0000|@@@@|{|;|\\$\\d{1,4}|[?!]{1,2}|\\(|\\)|\\*|1[-–—]0|0[-–—]1|1\\/2[-–—]1\\/2/g;\n          let match;\n          while ((match = tokenRegex.exec(line))) {\n            const frame = this.stack[this.stack.length - 1];\n            let token = match[0];\n            if (token === ';') return;\n            else if (token.startsWith('$')) this.handleNag(parseInt(token.slice(1), 10));\n            else if (token === '!') this.handleNag(1);\n            else if (token === '?') this.handleNag(2);\n            else if (token === '!!') this.handleNag(3);\n            else if (token === '??') this.handleNag(4);\n            else if (token === '!?') this.handleNag(5);\n            else if (token === '?!') this.handleNag(6);\n            else if (\n              token === '1-0' || token === '1–0' || token === '1—0'\n              || token === '0-1' || token === '0–1' || token === '0—1'\n              || token === '1/2-1/2' || token === '1/2–1/2' || token === '1/2—1/2'\n              || token === '*'\n            ) {\n              if (this.stack.length === 1 && token !== '*') this.handleHeader('Result', token);\n            } else if (token === '(') {\n              this.consumeBudget(100);\n              this.stack.push({ parent: frame.parent, root: false });\n            } else if (token === ')') {\n              if (this.stack.length > 1) this.stack.pop();\n            } else if (token === '{') {\n              const openIndex = tokenRegex.lastIndex;\n              const beginIndex = line[openIndex] === ' ' ? openIndex + 1 : openIndex;\n              line = line.slice(beginIndex);\n              this.state = ParserState.Comment;\n              continue continuedLine;\n            } else {\n              this.consumeBudget(100);\n              if (token.startsWith('O') || token.startsWith('0') || token.startsWith('o')) {\n                token = token.replace(/[0o]/g, 'O').replace(/[–—]/g, '-');\n              } else if (token === 'Z0' || token === '0000' || token === '@@@@') token = '--';\n\n              if (frame.node) frame.parent = frame.node;\n              frame.node = new ChildNode({\n                san: token,\n                startingComments: frame.startingComments,\n              });\n              frame.startingComments = undefined;\n              frame.root = false;\n              frame.parent.children.push(frame.node);\n            }\n          }\n          return;\n        }\n        case ParserState.Comment: {\n          const closeIndex = line.indexOf('}');\n          if (closeIndex === -1) {\n            this.commentBuf.push(line);\n            return;\n          } else {\n            const endIndex = closeIndex > 0 && line[closeIndex - 1] === ' ' ? closeIndex - 1 : closeIndex;\n            this.commentBuf.push(line.slice(0, endIndex));\n            this.handleComment();\n            line = line.slice(closeIndex);\n            this.state = ParserState.Moves;\n            freshLine = false;\n          }\n        }\n      }\n    }\n  }\n\n  private handleHeader(name: string, value: string) {\n    this.game.headers.set(name, name === 'Result' ? makeOutcome(parseOutcome(value)) : value);\n  }\n\n  private handleNag(nag: number) {\n    this.consumeBudget(50);\n    const frame = this.stack[this.stack.length - 1];\n    if (frame.node) {\n      frame.node.data.nags ||= [];\n      frame.node.data.nags.push(nag);\n    }\n  }\n\n  private handleComment() {\n    this.consumeBudget(100);\n    const frame = this.stack[this.stack.length - 1];\n    const comment = this.commentBuf.join('\\n');\n    this.commentBuf = [];\n    if (frame.node) {\n      frame.node.data.comments ||= [];\n      frame.node.data.comments.push(comment);\n    } else if (frame.root) {\n      this.game.comments ||= [];\n      this.game.comments.push(comment);\n    } else {\n      frame.startingComments ||= [];\n      frame.startingComments.push(comment);\n    }\n  }\n\n  private emit(err: PgnError | undefined) {\n    if (this.state === ParserState.Comment) this.handleComment();\n    if (err) return this.emitGame(this.game, err);\n    if (this.found) this.emitGame(this.game, undefined);\n    this.resetGame();\n  }\n}\n\nexport const parsePgn = (pgn: string, initHeaders: () => Map<string, string> = defaultHeaders): Game<PgnNodeData>[] => {\n  const games: Game<PgnNodeData>[] = [];\n  new PgnParser(game => games.push(game), initHeaders, NaN).parse(pgn);\n  return games;\n};\n\nexport const parseVariant = (variant: string | undefined): Rules | undefined => {\n  switch ((variant || 'chess').toLowerCase()) {\n    case 'chess':\n    case 'chess960':\n    case 'chess 960':\n    case 'standard':\n    case 'from position':\n    case 'classical':\n    case 'normal':\n    case 'fischerandom': // Cute Chess\n    case 'fischerrandom':\n    case 'fischer random':\n    case 'wild/0':\n    case 'wild/1':\n    case 'wild/2':\n    case 'wild/3':\n    case 'wild/4':\n    case 'wild/5':\n    case 'wild/6':\n    case 'wild/7':\n    case 'wild/8':\n    case 'wild/8a':\n      return 'chess';\n    case 'crazyhouse':\n    case 'crazy house':\n    case 'house':\n    case 'zh':\n      return 'crazyhouse';\n    case 'king of the hill':\n    case 'koth':\n    case 'kingofthehill':\n      return 'kingofthehill';\n    case 'three-check':\n    case 'three check':\n    case 'threecheck':\n    case 'three check chess':\n    case '3-check':\n    case '3 check':\n    case '3check':\n      return '3check';\n    case 'antichess':\n    case 'anti chess':\n    case 'anti':\n      return 'antichess';\n    case 'atomic':\n    case 'atom':\n    case 'atomic chess':\n      return 'atomic';\n    case 'horde':\n    case 'horde chess':\n      return 'horde';\n    case 'racing kings':\n    case 'racingkings':\n    case 'racing':\n    case 'race':\n      return 'racingkings';\n    default:\n      return;\n  }\n};\n\nexport const makeVariant = (rules: Rules): string | undefined => {\n  switch (rules) {\n    case 'chess':\n      return;\n    case 'crazyhouse':\n      return 'Crazyhouse';\n    case 'racingkings':\n      return 'Racing Kings';\n    case 'horde':\n      return 'Horde';\n    case 'atomic':\n      return 'Atomic';\n    case 'antichess':\n      return 'Antichess';\n    case '3check':\n      return 'Three-check';\n    case 'kingofthehill':\n      return 'King of the Hill';\n  }\n};\n\nexport const startingPosition = (headers: Map<string, string>): Result<Position, FenError | PositionError> => {\n  const rules = parseVariant(headers.get('Variant'));\n  if (!rules) return Result.err(new PositionError(IllegalSetup.Variant));\n  const fen = headers.get('FEN');\n  if (fen) return parseFen(fen).chain(setup => setupPosition(rules, setup));\n  else return Result.ok(defaultPosition(rules));\n};\n\nexport const setStartingPosition = (headers: Map<string, string>, pos: Position) => {\n  const variant = makeVariant(pos.rules);\n  if (variant) headers.set('Variant', variant);\n  else headers.delete('Variant');\n\n  const fen = makeFen(pos.toSetup());\n  const defaultFen = makeFen(defaultPosition(pos.rules).toSetup());\n  if (fen !== defaultFen) headers.set('FEN', fen);\n  else headers.delete('FEN');\n};\n\nexport type CommentShapeColor = 'green' | 'red' | 'yellow' | 'blue';\n\nexport interface CommentShape {\n  color: CommentShapeColor;\n  from: Square;\n  to: Square;\n}\n\nexport type EvaluationPawns = { pawns: number; depth?: number };\nexport type EvaluationMate = { mate: number; depth?: number };\nexport type Evaluation = EvaluationPawns | EvaluationMate;\n\nexport const isPawns = (ev: Evaluation): ev is EvaluationPawns => 'pawns' in ev;\nexport const isMate = (ev: Evaluation): ev is EvaluationMate => 'mate' in ev;\n\nexport interface Comment {\n  text: string;\n  shapes: CommentShape[];\n  clock?: number;\n  emt?: number;\n  evaluation?: Evaluation;\n}\n\nconst makeClk = (seconds: number): string => {\n  seconds = Math.max(0, seconds);\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  seconds = (seconds % 3600) % 60;\n  return `${hours}:${minutes.toString().padStart(2, '0')}:${\n    seconds.toLocaleString('en', {\n      minimumIntegerDigits: 2,\n      maximumFractionDigits: 3,\n    })\n  }`;\n};\n\nconst makeCommentShapeColor = (color: CommentShapeColor): 'G' | 'R' | 'Y' | 'B' => {\n  switch (color) {\n    case 'green':\n      return 'G';\n    case 'red':\n      return 'R';\n    case 'yellow':\n      return 'Y';\n    case 'blue':\n      return 'B';\n  }\n};\n\nfunction parseCommentShapeColor(str: 'G' | 'R' | 'Y' | 'B'): CommentShapeColor;\nfunction parseCommentShapeColor(str: string): CommentShapeColor | undefined;\nfunction parseCommentShapeColor(str: string): CommentShapeColor | undefined {\n  switch (str) {\n    case 'G':\n      return 'green';\n    case 'R':\n      return 'red';\n    case 'Y':\n      return 'yellow';\n    case 'B':\n      return 'blue';\n    default:\n      return;\n  }\n}\n\nconst makeCommentShape = (shape: CommentShape): string =>\n  shape.to === shape.from\n    ? `${makeCommentShapeColor(shape.color)}${makeSquare(shape.to)}`\n    : `${makeCommentShapeColor(shape.color)}${makeSquare(shape.from)}${makeSquare(shape.to)}`;\n\nconst parseCommentShape = (str: string): CommentShape | undefined => {\n  const color = parseCommentShapeColor(str.slice(0, 1));\n  const from = parseSquare(str.slice(1, 3));\n  const to = parseSquare(str.slice(3, 5));\n  if (!color || !defined(from)) return;\n  if (str.length === 3) return { color, from, to: from };\n  if (str.length === 5 && defined(to)) return { color, from, to };\n  return;\n};\n\nconst makeEval = (ev: Evaluation): string => {\n  const str = isMate(ev) ? '#' + ev.mate : ev.pawns.toFixed(2);\n  return defined(ev.depth) ? str + ',' + ev.depth : str;\n};\n\nexport const makeComment = (comment: Partial<Comment>): string => {\n  const builder = [];\n  if (defined(comment.text)) builder.push(comment.text);\n  const circles = (comment.shapes || []).filter(shape => shape.to === shape.from).map(makeCommentShape);\n  if (circles.length) builder.push(`[%csl ${circles.join(',')}]`);\n  const arrows = (comment.shapes || []).filter(shape => shape.to !== shape.from).map(makeCommentShape);\n  if (arrows.length) builder.push(`[%cal ${arrows.join(',')}]`);\n  if (comment.evaluation) builder.push(`[%eval ${makeEval(comment.evaluation)}]`);\n  if (defined(comment.emt)) builder.push(`[%emt ${makeClk(comment.emt)}]`);\n  if (defined(comment.clock)) builder.push(`[%clk ${makeClk(comment.clock)}]`);\n  return builder.join(' ');\n};\n\nexport const parseComment = (comment: string): Comment => {\n  let emt, clock, evaluation;\n  const shapes: CommentShape[] = [];\n  const text = comment\n    .replace(\n      /\\s?\\[%(emt|clk)\\s(\\d{1,5}):(\\d{1,2}):(\\d{1,2}(?:\\.\\d{0,3})?)\\]\\s?/g,\n      (_, annotation, hours, minutes, seconds) => {\n        const value = parseInt(hours, 10) * 3600 + parseInt(minutes, 10) * 60 + parseFloat(seconds);\n        if (annotation === 'emt') emt = value;\n        else if (annotation === 'clk') clock = value;\n        return '  ';\n      },\n    )\n    .replace(\n      /\\s?\\[%(?:csl|cal)\\s([RGYB][a-h][1-8](?:[a-h][1-8])?(?:,[RGYB][a-h][1-8](?:[a-h][1-8])?)*)\\]\\s?/g,\n      (_, arrows) => {\n        for (const arrow of arrows.split(',')) {\n          shapes.push(parseCommentShape(arrow)!);\n        }\n        return '  ';\n      },\n    )\n    .replace(\n      /\\s?\\[%eval\\s(?:#([+-]?\\d{1,5})|([+-]?(?:\\d{1,5}|\\d{0,5}\\.\\d{1,2})))(?:,(\\d{1,5}))?\\]\\s?/g,\n      (_, mate, pawns, d) => {\n        const depth = d && parseInt(d, 10);\n        evaluation = mate ? { mate: parseInt(mate, 10), depth } : { pawns: parseFloat(pawns), depth };\n        return '  ';\n      },\n    )\n    .trim();\n  return {\n    text,\n    shapes,\n    emt,\n    clock,\n    evaluation,\n  };\n};\n", "export {\n  ByCastlingSide,\n  ByColor,\n  ByRole,\n  BySquare,\n  CASTLING_SIDES,\n  CastlingSide,\n  Color,\n  COLORS,\n  DropMove,\n  FILE_NAMES,\n  FileName,\n  isDrop,\n  isNormal,\n  Move,\n  NormalMove,\n  Outcome,\n  Piece,\n  RANK_NAMES,\n  RankName,\n  Role,\n  ROLES,\n  RULES,\n  Rules,\n  Square,\n  SquareName,\n} from './types.js';\n\nexport {\n  charToRole,\n  defined,\n  kingCastlesTo,\n  makeSquare,\n  makeUci,\n  opposite,\n  parseSquare,\n  parseUci,\n  roleToChar,\n  squareFile,\n  squareRank,\n} from './util.js';\n\nexport { SquareSet } from './squareSet.js';\n\nexport {\n  attacks,\n  between,\n  bishopAttacks,\n  kingAttacks,\n  knightAttacks,\n  pawnAttacks,\n  queenAttacks,\n  ray,\n  rookAttacks,\n} from './attacks.js';\n\nexport { Board } from './board.js';\n\nexport { defaultSetup, Material, MaterialSide, RemainingChecks, Setup } from './setup.js';\n\nexport { Castles, Chess, Context, IllegalSetup, Position, PositionError } from './chess.js';\n\nexport * as compat from './compat.js';\n\nexport * as debug from './debug.js';\n\nexport * as fen from './fen.js';\n\nexport * as san from './san.js';\n\nexport * as transform from './transform.js';\n\nexport * as variant from './variant.js';\n\nexport * as pgn from './pgn.js';\n", "import { Chess, fen, pgn, san } from \"chessops/index\"\n\nnamespace LichessShowCommonMove {\n    type ChessMove = {\n        opening: string,\n        moves: string\n    }\n\n    let previousMoves = \"\"\n    let observerCnt = 0\n\n    const observerOptions = {\n        childList: true,\n        subtree: true,\n    };\n\n    const createMoveBlock = () => {\n        const moveBlock = document.getElementById(\"common-move-block\")\n        if (moveBlock) {\n            return moveBlock\n        }\n        const parent = document.querySelector(\"div.material.material-bottom\")\n        if (parent) {\n            const moveBlock = document.createElement(\"div\")\n            moveBlock.id = \"common-move-block\"\n            parent.parentElement?.insertBefore(moveBlock, parent.nextSibling);\n            return moveBlock\n        }\n        console.error(\"Could not find parent element\")\n        return null\n    }\n    \n    const pgnToFen = (pgnString: string) => {\n        try {\n            // Parse the PGN string\n            const parsedPgn = pgn.parsePgn(pgnString);\n            \n            // Get the first game from the parsed PGN\n            // parsePgn returns an array of games\n            const game = parsedPgn[0];\n            \n            // Initialize a new chess position\n            const pos = Chess.default();\n            \n            // Play through all the moves in the mainline\n            Array.from(game.moves.mainline()).forEach((move) => {\n                const parsed = san.parseSan(pos, move.san);\n                if (!parsed) {\n                    throw new Error(`Invalid move: ${move.san}`);\n                }\n                pos.play(parsed);\n            })\n            \n            // Return the final position as FEN\n            return fen.makeFen(pos.toSetup());\n        } catch (error) {\n            throw new Error(`Error processing PGN: ${error}`);\n        }\n    }\n\n    const handleResponse = (response: ChessMove, observer: MutationObserver) => {\n        const moveBlock = createMoveBlock()\n        if (response.moves) {\n            if (moveBlock) {\n                moveBlock.innerHTML = `<div>Opening: ${response.opening}</div><div>Move: ${response.moves}</div>`\n            }\n        } else {\n            observer.disconnect()\n            if (moveBlock) {\n                moveBlock.innerHTML = `<div>No more known moves</div>`\n            }\n        }\n    }\n\n    const getMoveList = async (node: Element, observer: MutationObserver) => {\n        // We need to get the full move list so go to parent element\n        const parentElement = node.parentElement\n        if (!parentElement) {\n            console.log(\"Could not find parent element. Unexpected error\")\n            return\n        }\n        let currentMoves = \"\"\n        for (const item of Array.from(parentElement.children)) {\n            if (item.nodeName == \"I5Z\") {\n                currentMoves += `${item.textContent}.`\n            }\n            else if (item.nodeName == \"KWDB\") {\n                currentMoves += `${item.textContent} `\n            }\n        }\n        if (currentMoves === \"\") {\n            console.log(\"No moves found\")\n            return\n        }\n        if (currentMoves === previousMoves) {\n            console.log(\"No new moves\")\n            return\n        }\n        console.log(`Moves: ${currentMoves}`)\n        const parsedToFen = pgnToFen(currentMoves.trim())\n        console.log(`Parsed Moves: ${parsedToFen}`)\n\n        // check the cache first\n        let cachedMoves = window.localStorage.getItem(parsedToFen)\n        if (!cachedMoves) {\n            // populate the cache\n            // Now make the call\n            const response = await GM.xmlHttpRequest({\n                method: \"GET\",\n                url: `https://explorer.lichess.ovh/masters?fen=${parsedToFen}`,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (response.status === 200) {\n                const parsedResponse = JSON.parse(response.responseText)\n                const storedObject: ChessMove = {\n                    opening: parsedResponse.opening?.name ?? \"Unknown\",\n                    moves: parsedResponse.moves.length > 0 ? parsedResponse.moves[0].uci : \"\"\n                }\n                const value = JSON.stringify(storedObject)\n                console.log(`Stored Key-Value pair: Key:${parsedToFen}; Value:${value}`)\n                window.localStorage.setItem(parsedToFen, value)\n                cachedMoves = value\n            } else {\n                console.error(`Error fetching moves: ${response.statusText}`)\n            }\n        }\n        if (cachedMoves) {\n            const movesObject = JSON.parse(cachedMoves)\n            handleResponse(movesObject, observer)\n        } else {\n            console.error('No moves to handle')\n        }\n        previousMoves = currentMoves\n    }\n\n    const getMoves: MutationCallback = (records, observer): void => {\n        // this observer is used to get the latest moves\n        for (const record of records) {\n            for (const item of Array.from(record.addedNodes)) {\n                if (item.nodeType === Node.ELEMENT_NODE) {\n                    getMoveList(item as Element, observer)\n                }\n            }\n        }\n    }\n\n    const findNode: MutationCallback = (records, observer): void => {\n        // this observer is used to narrow down to the node we care about\n        for (const record of records) {\n            // filter down to the node we care about\n            for (const item of Array.from(record.addedNodes)) {\n                if (item.nodeType == Node.ELEMENT_NODE) {\n                    // see if our node has been added\n                    const rm6 = document.querySelector(\"rm6\")\n                    if (rm6) {\n                        observer.disconnect()\n                        const movesObserver = new MutationObserver(getMoves);\n                        movesObserver.observe(rm6, observerOptions)\n                        getMoveList(rm6, movesObserver)\n                        break\n                    }\n                }\n            }\n        }\n    }\n    \n    export const main = (): void => {\n        const observer = new MutationObserver(findNode);\n        observer.observe(document.body, observerOptions);\n    };\n}\nLichessShowCommonMove.main();\n"],
  "mappings": "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",
>>>>>>> 1f8f0b4 (Latest lichess)
  "names": ["n", "_Result", "_Ok", "_Err", "Result", "unwrap", "ok", "err", "r", "this", "_chain", "value", "error", "isErr", "e", "map", "chain", "constructor", "super", "isOk", "_err", "_ok", "Error", "all", "obj", "Array", "isArray", "res", "i", "length", "item", "push", "keys", "Object", "IllegalSetup", "InvalidFen", "n", "board", "pockets", "castlingRights", "remainingChecks", "r", "castlingSide", "match", "Node", "ctx", "variations", "firstVariation", "LichessShowCommonMove", "moveBlock"]
}
