{
  "version": 3,
  "sources": ["../../src/main/base64-auto-decoder/base64-auto-decoder.user.ts"],
  "sourcesContent": ["namespace Base64AutoDecoder {\n  // Regular expression to match base64-encoded strings\n  const base64Regex = /^[A-Za-z0-9+/]+={0,2}$/\n\n  // Function to decode base64 string\n  const decodeBase64 = (encodedString: string) => {\n    return atob(encodedString)\n  }\n\n  // Function to check if a string is a URL\n  const isURL = (str: string) => {\n    const pattern = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i\n    return pattern.test(str)\n  }\n\n  const pasteBinReplace = () => {\n    const elements = document.querySelectorAll('.de1')\n    elements.forEach(element => {\n      const text = element.textContent.trim()\n      if (text.startsWith('aHR0')) {\n        const decodedText = decodeBase64(text)\n        const url = new URL(decodedText)\n\n        // Get the color of the original text\n        const originalColor = window.getComputedStyle(element).color\n\n        // Create a clickable link\n        const link = document.createElement('a')\n        link.href = url.href\n        link.textContent = url.href\n        link.style.color = originalColor // Apply the original color\n\n        // Replace the original text with the clickable link\n        element.textContent = ''\n        element.appendChild(link)\n      }\n    })\n  }\n\n  const rentryReplace = () => {\n    // Select appropriate tags based on the URL matching\n    const elementsToCheck = FMHYmainBase64PageRegex.test(currentUrl)\n      ? document.querySelectorAll('code')\n      : document.querySelectorAll('code, p')\n\n    // Loop through each selected element\n    elementsToCheck.forEach(element => {\n      // Get the content of the element\n      const content = element.textContent.trim()\n\n      // Check if the content matches the base64 regex\n      if (base64Regex.test(content)) {\n        // Decode the base64-encoded string\n        const decodedString = decodeBase64(content).trim()\n\n        // If the decoded string has URLs, decode it and linkify when possible\n        if (isURL(decodedString) || (decodedString.includes('http') && decodedString.includes('\\n'))) {\n          // One line\n          if (!decodedString.includes('\\n')) {\n            const link = document.createElement('a')\n            link.href = decodedString\n            link.textContent = decodedString\n            link.target = '_self' // Open link in the same tab\n            element.textContent = '' // Clear the content of the element\n            element.appendChild(link) // Append the link to the element\n          }\n          //Multiple lines\n          else {\n            const lines = decodedString.split('\\n')\n            const links = lines.map(line => (isURL(line.trim()) ? `<a href='${line.trim()}'>${line.trim()}</a>` : line.trim()))\n            element.innerHTML = links.join('<br>')\n          }\n        }\n      }\n    })\n  }\n\n  const rawRentryReplace = () => {\n    // Find all lines starting with \"* `\"\n    const lines = document.body.innerText.split('\\n')\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i]\n      if (line.includes('`')) {\n        const startIndex = line.indexOf('`')\n        const endIndex = line.lastIndexOf('`')\n        const encodedText = line.substring(startIndex + 1, endIndex).trim()\n        const decodedText = atob(encodedText)\n        const newLine = line.substring(0, startIndex) + decodedText + line.substring(endIndex + 1)\n        lines[i] = newLine\n      }\n    }\n\n    // Update the page content with decoded lines\n    document.body.innerText = lines.join('\\n')\n  }\n\n  const privateBinReplace = () => {\n    // Wait for the decryption process to finish\n    const waitForDecryption = () => {\n      const prettyPrintElement = document.getElementById('prettyprint')\n      if (prettyPrintElement && prettyPrintElement.textContent.trim() !== '') {\n        let decryptedText = prettyPrintElement.innerHTML.trim()\n        const lines = decryptedText.split('\\n')\n\n        // Flag to track if any modifications were made\n        let modified = false\n\n        // Iterate through each line\n        lines.forEach(line => {\n          // Check if the line contains a potential Base64 encoded string\n          if (base64Regex.test(line)) {\n            // Attempt to decode the potential Base64 encoded string\n            try {\n              const decodedText = decodeBase64(line)\n              // Trim the decoded text before checking if it's a URL\n              const trimmedText = decodedText.trim()\n              // If trimmed decoded string is a URL, make it clickable\n              if (isURL(trimmedText)) {\n                // Replace the line with the decoded and linked text\n                decryptedText = decryptedText.replace(line, `<a href=\"${trimmedText}\">${trimmedText}</a>`)\n                modified = true\n              }\n            } catch (_error) {\n              // If an error occurs during decoding, show it in an alert message\n              alert(`Unable to decode the string: ${line}`)\n            }\n          } else if (line.startsWith('`') && line.endsWith('`')) {\n            // Check if the line starts and ends with backticks\n            const textInsideBackticks = line.slice(1, -1)\n            // Check if textInsideBackticks is a Base64 encoded string\n            if (base64Regex.test(textInsideBackticks)) {\n              // Attempt to decode the text inside backticks\n              try {\n                const decodedText = decodeBase64(textInsideBackticks)\n                // Trim the decoded text before checking if it's a URL\n                const trimmedText = decodedText.trim()\n                // If trimmed decoded string is a URL, make it clickable\n                if (isURL(trimmedText)) {\n                  // Replace the line with the decoded and linked text\n                  decryptedText = decryptedText.replace(line, `<a href=\"${trimmedText}\">${trimmedText}</a>`)\n                  modified = true\n                }\n              } catch (_error) {\n                // If an error occurs during decoding, show it in an alert message\n                alert(`Unable to decode the string: ${textInsideBackticks}`)\n              }\n            }\n          }\n        })\n\n        // If modifications were made, show modified text in the page\n        if (modified) {\n          prettyPrintElement.innerHTML = decryptedText\n        }\n      } else {\n        setTimeout(waitForDecryption, 500) // Check again in 500ms\n      }\n    }\n\n    // Start waiting for decryption\n    waitForDecryption()\n  }\n\n  // Different script for different pastebins\n  const currentUrl = window.location.href\n  const rentryOrSnowbinRegex = /^(https?:\\/\\/(?:rentry\\.co|rentry\\.org|pastes\\.fmhy\\.net)\\/[\\w\\W]+)/\n  const FMHYmainBase64PageRegex = /^https:\\/\\/rentry\\.(?:co|org)\\/fmhybase64(?:#.*)?/i\n  const fmhyBase64RawRentryPageRegex = /^https:\\/\\/rentry\\.(co|org)\\/FMHYBase64\\/raw$/i\n  const privatebinDomainsRegex =\n    /^(https?:\\/\\/(?:bin\\.disroot\\.org|privatebin\\.net|textbin\\.xyz|bin\\.idrix\\.fr|privatebin\\.rinuploads\\.org)\\/[\\w\\W]+)/\n  const pastebinComRegex = /^https:\\/\\/pastebin\\.com\\/.*/\n\n  export const main = () => {\n    if (pastebinComRegex.test(currentUrl)) {\n      // PASTEBIN.COM\n      pasteBinReplace()\n    } else if (rentryOrSnowbinRegex.test(currentUrl) && !fmhyBase64RawRentryPageRegex.test(currentUrl)) {\n      //RENTRY OR PASTES.FMHY\n      rentryReplace()\n    } else if (fmhyBase64RawRentryPageRegex.test(currentUrl)) {\n      //FMHY-BASE64 RAW RENTRY PAGE\n      rawRentryReplace()\n    } else if (privatebinDomainsRegex.test(currentUrl)) {\n      // PRIVATEBIN\n      privateBinReplace()\n    }\n  }\n}\nBase64AutoDecoder.main()\n"],
  "mappings": "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",
  "names": ["Base64AutoDecoder"]
}
