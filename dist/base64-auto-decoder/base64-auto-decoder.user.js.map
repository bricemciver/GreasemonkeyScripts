{
  "version": 3,
  "sources": ["../../src/main/base64-auto-decoder/base64-auto-decoder.user.ts"],
  "sourcesContent": ["namespace Base64AutoDecoder {\n\t// Regular expression to match base64-encoded strings\n\tconst base64Regex = /^[A-Za-z0-9+/]+={0,2}$/;\n\n\t// Function to decode base64 string\n\tconst decodeBase64 = (encodedString: string) => {\n\t\treturn atob(encodedString);\n\t};\n\n\t// Function to check if a string is a URL\n\tconst isURL = (str: string) => {\n\t\tconst pattern = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n\t\treturn pattern.test(str);\n\t};\n\n\tconst pasteBinReplace = () => {\n\t\tconst elements = document.querySelectorAll(\".de1\");\n\t\telements.forEach((element) => {\n\t\t\tconst text = element.textContent.trim();\n\t\t\tif (text.startsWith(\"aHR0\")) {\n\t\t\t\tconst decodedText = decodeBase64(text);\n\t\t\t\tconst url = new URL(decodedText);\n\n\t\t\t\t// Get the color of the original text\n\t\t\t\tconst originalColor = window.getComputedStyle(element).color;\n\n\t\t\t\t// Create a clickable link\n\t\t\t\tconst link = document.createElement(\"a\");\n\t\t\t\tlink.href = url.href;\n\t\t\t\tlink.textContent = url.href;\n\t\t\t\tlink.style.color = originalColor; // Apply the original color\n\n\t\t\t\t// Replace the original text with the clickable link\n\t\t\t\telement.textContent = \"\";\n\t\t\t\telement.appendChild(link);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst rentryReplace = () => {\n\t\t// Select appropriate tags based on the URL matching\n\t\tconst elementsToCheck = FMHYmainBase64PageRegex.test(currentUrl)\n\t\t\t? document.querySelectorAll(\"code\")\n\t\t\t: document.querySelectorAll(\"code, p\");\n\n\t\t// Loop through each selected element\n\t\telementsToCheck.forEach((element) => {\n\t\t\t// Get the content of the element\n\t\t\tconst content = element.textContent.trim();\n\n\t\t\t// Check if the content matches the base64 regex\n\t\t\tif (base64Regex.test(content)) {\n\t\t\t\t// Decode the base64-encoded string\n\t\t\t\tconst decodedString = decodeBase64(content).trim();\n\n\t\t\t\t// If the decoded string has URLs, decode it and linkify when possible\n\t\t\t\tif (\n\t\t\t\t\tisURL(decodedString) ||\n\t\t\t\t\t(decodedString.includes(\"http\") && decodedString.includes(\"\\n\"))\n\t\t\t\t) {\n\t\t\t\t\t// One line\n\t\t\t\t\tif (!decodedString.includes(\"\\n\")) {\n\t\t\t\t\t\tconst link = document.createElement(\"a\");\n\t\t\t\t\t\tlink.href = decodedString;\n\t\t\t\t\t\tlink.textContent = decodedString;\n\t\t\t\t\t\tlink.target = \"_self\"; // Open link in the same tab\n\t\t\t\t\t\telement.textContent = \"\"; // Clear the content of the element\n\t\t\t\t\t\telement.appendChild(link); // Append the link to the element\n\t\t\t\t\t}\n\t\t\t\t\t//Multiple lines\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst lines = decodedString.split(\"\\n\");\n\t\t\t\t\t\tconst links = lines.map((line) =>\n\t\t\t\t\t\t\tisURL(line.trim())\n\t\t\t\t\t\t\t\t? `<a href='${line.trim()}'>${line.trim()}</a>`\n\t\t\t\t\t\t\t\t: line.trim(),\n\t\t\t\t\t\t);\n\t\t\t\t\t\telement.innerHTML = links.join(\"<br>\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tconst rawRentryReplace = () => {\n\t\t// Find all lines starting with \"* `\"\n\t\tconst lines = document.body.innerText.split(\"\\n\");\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tconst line = lines[i];\n\t\t\tif (line.includes(\"`\")) {\n\t\t\t\tconst startIndex = line.indexOf(\"`\");\n\t\t\t\tconst endIndex = line.lastIndexOf(\"`\");\n\t\t\t\tconst encodedText = line.substring(startIndex + 1, endIndex).trim();\n\t\t\t\tconst decodedText = atob(encodedText);\n\t\t\t\tconst newLine =\n\t\t\t\t\tline.substring(0, startIndex) +\n\t\t\t\t\tdecodedText +\n\t\t\t\t\tline.substring(endIndex + 1);\n\t\t\t\tlines[i] = newLine;\n\t\t\t}\n\t\t}\n\n\t\t// Update the page content with decoded lines\n\t\tdocument.body.innerText = lines.join(\"\\n\");\n\t};\n\n\tconst privateBinReplace = () => {\n\t\t// Wait for the decryption process to finish\n\t\tconst waitForDecryption = () => {\n\t\t\tconst prettyPrintElement = document.getElementById(\"prettyprint\");\n\t\t\tif (prettyPrintElement && prettyPrintElement.textContent.trim() !== \"\") {\n\t\t\t\tlet decryptedText = prettyPrintElement.innerHTML.trim();\n\t\t\t\tconst lines = decryptedText.split(\"\\n\");\n\n\t\t\t\t// Flag to track if any modifications were made\n\t\t\t\tlet modified = false;\n\n\t\t\t\t// Iterate through each line\n\t\t\t\tlines.forEach((line) => {\n\t\t\t\t\t// Check if the line contains a potential Base64 encoded string\n\t\t\t\t\tif (base64Regex.test(line)) {\n\t\t\t\t\t\t// Attempt to decode the potential Base64 encoded string\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst decodedText = decodeBase64(line);\n\t\t\t\t\t\t\t// Trim the decoded text before checking if it's a URL\n\t\t\t\t\t\t\tconst trimmedText = decodedText.trim();\n\t\t\t\t\t\t\t// If trimmed decoded string is a URL, make it clickable\n\t\t\t\t\t\t\tif (isURL(trimmedText)) {\n\t\t\t\t\t\t\t\t// Replace the line with the decoded and linked text\n\t\t\t\t\t\t\t\tdecryptedText = decryptedText.replace(\n\t\t\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t\t\t\t`<a href=\"${trimmedText}\">${trimmedText}</a>`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (_error) {\n\t\t\t\t\t\t\t// If an error occurs during decoding, show it in an alert message\n\t\t\t\t\t\t\talert(`Unable to decode the string: ${line}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (line.startsWith(\"`\") && line.endsWith(\"`\")) {\n\t\t\t\t\t\t// Check if the line starts and ends with backticks\n\t\t\t\t\t\tconst textInsideBackticks = line.slice(1, -1);\n\t\t\t\t\t\t// Check if textInsideBackticks is a Base64 encoded string\n\t\t\t\t\t\tif (base64Regex.test(textInsideBackticks)) {\n\t\t\t\t\t\t\t// Attempt to decode the text inside backticks\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst decodedText = decodeBase64(textInsideBackticks);\n\t\t\t\t\t\t\t\t// Trim the decoded text before checking if it's a URL\n\t\t\t\t\t\t\t\tconst trimmedText = decodedText.trim();\n\t\t\t\t\t\t\t\t// If trimmed decoded string is a URL, make it clickable\n\t\t\t\t\t\t\t\tif (isURL(trimmedText)) {\n\t\t\t\t\t\t\t\t\t// Replace the line with the decoded and linked text\n\t\t\t\t\t\t\t\t\tdecryptedText = decryptedText.replace(\n\t\t\t\t\t\t\t\t\t\tline,\n\t\t\t\t\t\t\t\t\t\t`<a href=\"${trimmedText}\">${trimmedText}</a>`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (_error) {\n\t\t\t\t\t\t\t\t// If an error occurs during decoding, show it in an alert message\n\t\t\t\t\t\t\t\talert(`Unable to decode the string: ${textInsideBackticks}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// If modifications were made, show modified text in the page\n\t\t\t\tif (modified) {\n\t\t\t\t\tprettyPrintElement.innerHTML = decryptedText;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetTimeout(waitForDecryption, 500); // Check again in 500ms\n\t\t\t}\n\t\t};\n\n\t\t// Start waiting for decryption\n\t\twaitForDecryption();\n\t};\n\n\t// Different script for different pastebins\n\tconst currentUrl = window.location.href;\n\tconst rentryOrSnowbinRegex =\n\t\t/^(https?:\\/\\/(?:rentry\\.co|rentry\\.org|pastes\\.fmhy\\.net)\\/[\\w\\W]+)/;\n\tconst FMHYmainBase64PageRegex =\n\t\t/^https:\\/\\/rentry\\.(?:co|org)\\/fmhybase64(?:#.*)?/i;\n\tconst fmhyBase64RawRentryPageRegex =\n\t\t/^https:\\/\\/rentry\\.(co|org)\\/FMHYBase64\\/raw$/i;\n\tconst privatebinDomainsRegex =\n\t\t/^(https?:\\/\\/(?:bin\\.disroot\\.org|privatebin\\.net|textbin\\.xyz|bin\\.idrix\\.fr|privatebin\\.rinuploads\\.org)\\/[\\w\\W]+)/;\n\tconst pastebinComRegex = /^https:\\/\\/pastebin\\.com\\/.*/;\n\n\texport const main = () => {\n\t\tif (pastebinComRegex.test(currentUrl)) {\n\t\t\t// PASTEBIN.COM\n\t\t\tpasteBinReplace();\n\t\t} else if (\n\t\t\trentryOrSnowbinRegex.test(currentUrl) &&\n\t\t\t!fmhyBase64RawRentryPageRegex.test(currentUrl)\n\t\t) {\n\t\t\t//RENTRY OR PASTES.FMHY\n\t\t\trentryReplace();\n\t\t} else if (fmhyBase64RawRentryPageRegex.test(currentUrl)) {\n\t\t\t//FMHY-BASE64 RAW RENTRY PAGE\n\t\t\trawRentryReplace();\n\t\t} else if (privatebinDomainsRegex.test(currentUrl)) {\n\t\t\t// PRIVATEBIN\n\t\t\tprivateBinReplace();\n\t\t}\n\t};\n}\nBase64AutoDecoder.main();"],
  "mappings": "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",
  "names": ["Base64AutoDecoder"]
}
