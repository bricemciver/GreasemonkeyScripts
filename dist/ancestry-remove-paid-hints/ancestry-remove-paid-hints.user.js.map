{
  "version": 3,
  "sources": ["../../src/main/ancestry-remove-paid-hints/ancestry-remove-paid-hints.user.ts"],
  "sourcesContent": ["(() => {\n  const familyTreeSources = [62476, 9289, 1030, 1006];\n\n  const handleOfferPage = (db: IDBDatabase, link: Location) => {\n    // extract dbid\n    const dbidRegex = /[?&]dbid=(\\d+)/;\n    const dbidMatch = RegExp(dbidRegex).exec(link.href);\n    if (dbidMatch) {\n      const dbid = parseInt(dbidMatch[1], 10);\n      // since we're on the offer page, we know it's paid\n      const getRequest = db.transaction('collections_os', 'readonly').objectStore('collections_os').get(dbid);\n      getRequest.onsuccess = event => {\n        const target = event.target;\n        if (target) {\n          const result = (target as any).result;\n          const putOS = db.transaction('collections_os', 'readwrite').objectStore('collections_os');\n          if (result) {\n            putOS.put({ dbid, name: result.name, tree: result.tree, paid: true, visible: false });\n          } else {\n            putOS.put({ dbid, name: '', tree: false, paid: true, visible: false });\n          }\n        }\n      };\n    }\n  };\n\n  const initDB = (): Promise<IDBDatabase | Event> =>\n    new Promise((resolve, reject) => {\n      const openRequest = window.indexedDB.open('collections_db', 1);\n\n      // error handler signifies that the database didn't open successfully\n      openRequest.onerror = event => {\n        console.error('Database failed to open');\n        reject(event);\n      };\n\n      // success handler signifies that the database opened successfully\n      openRequest.onsuccess = _event => {\n        // Store the opened database object in the db variable. This is used a lot below\n        resolve(openRequest.result);\n      };\n\n      // Set up the database tables if this has not already been done\n      openRequest.onupgradeneeded = event => {\n        // Grab a reference to the opened database\n        const eventTarget = event.target;\n        if (eventTarget) {\n          const tmpDb: IDBDatabase = (eventTarget as any).result;\n\n          // Create an objectStore in our database to store notes and an auto-incrementing key\n          // An objectStore is similar to a 'table' in a relational database\n          const objectStore = tmpDb.createObjectStore('collections_os', {\n            keyPath: 'dbid',\n          });\n\n          // Define what data items the objectStore will contain\n          objectStore.createIndex('name', 'name', { unique: true });\n          objectStore.createIndex('paid', 'paid', { unique: false });\n          objectStore.createIndex('tree', 'tree', { unique: false });\n          objectStore.createIndex('visible', 'visible', { unique: false });\n\n          // eslint-disable-next-line no-console\n          console.log('Database setup complete');\n          resolve(tmpDb);\n        }\n      };\n    });\n\n  const evalLink = (db: IDBDatabase, link: HTMLAnchorElement): void => {\n    // Make sure link has test\n    const linkText = link.textContent;\n    if (linkText) {\n      // Skip review button links\n      if (linkText !== 'Review' && linkText.indexOf('\\t') === -1 && linkText.indexOf('\\n') === -1) {\n        // extract dbid\n        const dbidRegex = /[?&]dbid=(\\d+)/;\n        const dbidMatch = RegExp(dbidRegex).exec(link.href);\n        if (dbidMatch) {\n          const dbid = parseInt(dbidMatch[1], 10);\n\n          // see if database has info\n          // start db transaction\n          const getRequest = db.transaction('collections_os', 'readonly').objectStore('collections_os').get(dbid);\n          getRequest.onsuccess = event => {\n            const target = event.target;\n            if (target) {\n              const result = (target as any).result;\n              let hide = false;\n              // if no result, query link and add data to the database\n              if (!result) {\n                GM.xmlHttpRequest({\n                  method: 'GET',\n                  url: link.href,\n                  onreadystatechange(response) {\n                    if (response.readyState === Tampermonkey.ReadyState.HeadersReceived) {\n                      // HeadersReceived\n                      const location = response.finalUrl;\n                      if (location) {\n                        // find out if this is a paid link\n                        const denyRegex = /offers\\/join/;\n                        const denyMatch = RegExp(denyRegex).exec(location);\n                        const putOS = db.transaction('collections_os', 'readwrite').objectStore('collections_os');\n                        const isTree = familyTreeSources.indexOf(dbid) !== -1;\n                        if (denyMatch) {\n                          // if match, add to paid collection database\n                          putOS.add({ dbid, name: link.textContent, paid: true, visible: false, tree: isTree });\n                          hide = true;\n                        } else if (isTree) {\n                          // by default, hide tree results\n                          putOS.add({ dbid, name: link.textContent, paid: false, visible: false, tree: true });\n                          hide = true;\n                        } else {\n                          // add to database as a free link so we don't re-query\n                          putOS.add({ dbid, name: link.textContent, paid: false, visible: true, tree: false });\n                        }\n                      }\n                    }\n                  },\n                });\n              } else {\n                hide = !result.visible;\n              }\n              if (hide) {\n                // remove hint from view\n                const li = link.closest(\"li[role='group']\");\n                const section = link.closest('section');\n                if (li) {\n                  li.remove();\n                  if (section && section.querySelectorAll(\"li[role='group']\").length === 1) {\n                    section.remove();\n                  }\n                }\n              }\n            }\n          };\n        }\n      }\n    }\n  };\n\n  const scanHints = (db: IDBDatabase, element: Element): void => {\n    // get links\n    const sseLinks = element.querySelectorAll<HTMLAnchorElement>(\"a[href*='sse.dll']\");\n    sseLinks.forEach(link => evalLink(db, link));\n\n    // remove family tree\n    const familyTreeLinks = element.querySelectorAll<HTMLAnchorElement>(\"a[href*='/family-tree/tree/']\");\n    familyTreeLinks.forEach(link => {\n      // remove hint from view\n      const li = link.closest(\"li[role='group']\");\n      const section = link.closest('section');\n      if (li) {\n        li.remove();\n        if (section && section.querySelectorAll(\"li[role='group']\").length === 1) {\n          section.remove();\n        }\n      }\n    });\n  };\n\n  const mutationObserverSetup = (db: IDBDatabase): void => {\n    // Options for the observer (which mutations to observe)\n    const config = { childList: true, subtree: true };\n\n    // Callback function to execute when mutations are observed\n    const callback: MutationCallback = (mutationList, _observer) => {\n      for (const mutation of mutationList) {\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach(node => {\n            const element = node as Element;\n            if (\n              element.innerHTML &&\n              (element.innerHTML.indexOf('sse.dll') !== -1 || element.innerHTML.indexOf('/family-tree/tree/') !== -1)\n            ) {\n              scanHints(db, element);\n            }\n          });\n        }\n      }\n    };\n\n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(callback);\n\n    // Start observing the target node for configured mutations\n    observer.observe(document, config);\n  };\n\n  const main = async (): Promise<void> => {\n    const db = await initDB();\n    if (db instanceof IDBDatabase) {\n      // see if we're on offer page and handle it\n      if (window.location.href.indexOf('offers/join') !== -1) {\n        handleOfferPage(db, window.location);\n      } else {\n        mutationObserverSetup(db);\n      }\n    }\n  };\n\n  main().catch(_error => ({}));\n})();\n"],
  "mappings": "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",
  "names": []
}
