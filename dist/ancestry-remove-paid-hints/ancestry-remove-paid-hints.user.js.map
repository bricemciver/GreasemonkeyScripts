{
  "version": 3,
  "sources": ["../../src/main/ancestry-remove-paid-hints/ancestry-remove-paid-hints.user.ts"],
  "sourcesContent": ["const familyTreeSources = [62476, 9289, 1030, 1006];\n\nconst handleOfferPage = (db: IDBDatabase, link: Location) => {\n  // extract dbid\n  const dbidRegex = /[?&]dbid=(\\d+)/;\n  const dbidMatch = RegExp(dbidRegex).exec(link.href);\n  if (dbidMatch) {\n    const dbid = parseInt(dbidMatch[1], 10);\n    // since we're on the offer page, we know it's paid\n    const getRequest = db.transaction('collections_os', 'readonly').objectStore('collections_os').get(dbid);\n    getRequest.onsuccess = event => {\n      const target = event.target;\n      if (target) {\n        const result = (target as any).result;\n        const putOS = db.transaction('collections_os', 'readwrite').objectStore('collections_os');\n        if (result) {\n          putOS.put({ dbid, name: result.name, tree: result.tree, paid: true, visible: false });\n        } else {\n          putOS.put({ dbid, name: '', tree: false, paid: true, visible: false });\n        }\n      }\n    };\n  }\n};\n\nconst initDB = (): Promise<IDBDatabase | Event> =>\n  new Promise((resolve, reject) => {\n    const openRequest = window.indexedDB.open('collections_db', 1);\n\n    // error handler signifies that the database didn't open successfully\n    openRequest.onerror = event => {\n      console.error('Database failed to open');\n      reject(event);\n    };\n\n    // success handler signifies that the database opened successfully\n    openRequest.onsuccess = _event => {\n      // Store the opened database object in the db variable. This is used a lot below\n      resolve(openRequest.result);\n    };\n\n    // Set up the database tables if this has not already been done\n    openRequest.onupgradeneeded = event => {\n      // Grab a reference to the opened database\n      const eventTarget = event.target;\n      if (eventTarget) {\n        const tmpDb: IDBDatabase = (eventTarget as any).result;\n\n        // Create an objectStore in our database to store notes and an auto-incrementing key\n        // An objectStore is similar to a 'table' in a relational database\n        const objectStore = tmpDb.createObjectStore('collections_os', {\n          keyPath: 'dbid',\n        });\n\n        // Define what data items the objectStore will contain\n        objectStore.createIndex('name', 'name', { unique: true });\n        objectStore.createIndex('paid', 'paid', { unique: false });\n        objectStore.createIndex('tree', 'tree', { unique: false });\n        objectStore.createIndex('visible', 'visible', { unique: false });\n\n        // eslint-disable-next-line no-console\n        console.log('Database setup complete');\n        resolve(tmpDb);\n      }\n    };\n  });\n\nconst evalLink = (db: IDBDatabase, link: HTMLAnchorElement): void => {\n  // Make sure link has test\n  const linkText = link.textContent;\n  if (linkText) {\n    // Skip review button links\n    if (linkText !== 'Review' && linkText.indexOf('\\t') === -1 && linkText.indexOf('\\n') === -1) {\n      // extract dbid\n      const dbidRegex = /[?&]dbid=(\\d+)/;\n      const dbidMatch = RegExp(dbidRegex).exec(link.href);\n      if (dbidMatch) {\n        const dbid = parseInt(dbidMatch[1], 10);\n\n        // see if database has info\n        // start db transaction\n        const getRequest = db.transaction('collections_os', 'readonly').objectStore('collections_os').get(dbid);\n        getRequest.onsuccess = event => {\n          const target = event.target;\n          if (target) {\n            const result = (target as any).result;\n            let hide = false;\n            // if no result, query link and add data to the database\n            if (!result) {\n              GM.xmlHttpRequest({\n                method: 'GET',\n                url: link.href,\n                onreadystatechange(response) {\n                  if (response.readyState === Tampermonkey.ReadyState.HeadersReceived) {\n                    // HeadersReceived\n                    const location = response.finalUrl;\n                    if (location) {\n                      // find out if this is a paid link\n                      const denyRegex = /offers\\/join/;\n                      const denyMatch = RegExp(denyRegex).exec(location);\n                      const putOS = db.transaction('collections_os', 'readwrite').objectStore('collections_os');\n                      const isTree = familyTreeSources.indexOf(dbid) !== -1;\n                      if (denyMatch) {\n                        // if match, add to paid collection database\n                        putOS.add({ dbid, name: link.textContent, paid: true, visible: false, tree: isTree });\n                        hide = true;\n                      } else if (isTree) {\n                        // by default, hide tree results\n                        putOS.add({ dbid, name: link.textContent, paid: false, visible: false, tree: true });\n                        hide = true;\n                      } else {\n                        // add to database as a free link so we don't re-query\n                        putOS.add({ dbid, name: link.textContent, paid: false, visible: true, tree: false });\n                      }\n                    }\n                  }\n                },\n              });\n            } else {\n              hide = !result.visible;\n            }\n            if (hide) {\n              // remove hint from view\n              const li = link.closest(\"li[role='group']\");\n              const section = link.closest('section');\n              if (li) {\n                li.remove();\n                if (section && section.querySelectorAll(\"li[role='group']\").length === 1) {\n                  section.remove();\n                }\n              }\n            }\n          }\n        };\n      }\n    }\n  }\n};\n\nconst scanHints = (db: IDBDatabase, element: Element): void => {\n  // get links\n  const sseLinks = element.querySelectorAll<HTMLAnchorElement>(\"a[href*='sse.dll']\");\n  sseLinks.forEach(link => evalLink(db, link));\n\n  // remove family tree\n  const familyTreeLinks = element.querySelectorAll<HTMLAnchorElement>(\"a[href*='/family-tree/tree/']\");\n  familyTreeLinks.forEach(link => {\n    // remove hint from view\n    const li = link.closest(\"li[role='group']\");\n    const section = link.closest('section');\n    if (li) {\n      li.remove();\n      if (section && section.querySelectorAll(\"li[role='group']\").length === 1) {\n        section.remove();\n      }\n    }\n  });\n};\n\nconst mutationObserverSetup = (db: IDBDatabase): void => {\n  // Options for the observer (which mutations to observe)\n  const config = { childList: true, subtree: true };\n\n  // Callback function to execute when mutations are observed\n  const callback: MutationCallback = (mutationList, _observer) => {\n    for (const mutation of mutationList) {\n      if (mutation.type === 'childList') {\n        mutation.addedNodes.forEach(node => {\n          const element = node as Element;\n          if (\n            element.innerHTML &&\n            (element.innerHTML.indexOf('sse.dll') !== -1 || element.innerHTML.indexOf('/family-tree/tree/') !== -1)\n          ) {\n            scanHints(db, element);\n          }\n        });\n      }\n    }\n  };\n\n  // Create an observer instance linked to the callback function\n  const observer = new MutationObserver(callback);\n\n  // Start observing the target node for configured mutations\n  observer.observe(document, config);\n};\n\nconst main = async (): Promise<void> => {\n  const db = await initDB();\n  if (db instanceof IDBDatabase) {\n    // see if we're on offer page and handle it\n    if (window.location.href.indexOf('offers/join') !== -1) {\n      handleOfferPage(db, window.location);\n    } else {\n      mutationObserverSetup(db);\n    }\n  }\n};\n\nmain().catch(_error => ({}));\n"],
  "mappings": "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",
  "names": []
}
