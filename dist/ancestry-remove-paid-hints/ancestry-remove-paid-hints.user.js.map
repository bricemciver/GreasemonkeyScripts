{
  "version": 3,
  "sources": ["../../src/main/ancestry-remove-paid-hints/ancestry-remove-paid-hints.user.ts"],
  "sourcesContent": ["namespace AncestryRemovePaidHints {\n  const familyTreeSources = [62476, 9289, 1030, 1006];\n\n  const handleOfferPage = (db: IDBDatabase, link: Location) => {\n    // extract dbid\n    const dbidRegex = /[?&]dbid=(\\d+)/;\n    const dbidMatch = RegExp(dbidRegex).exec(link.href);\n    if (dbidMatch) {\n      const dbid = Number.parseInt(dbidMatch[1], 10);\n      // since we're on the offer page, we know it's paid\n      const getRequest = db.transaction('collections_os', 'readonly').objectStore('collections_os').get(dbid);\n      getRequest.onsuccess = () => {\n        const result = getRequest.result;\n        const putOS = db.transaction('collections_os', 'readwrite').objectStore('collections_os');\n        if (result) {\n          putOS.put({\n            dbid,\n            name: result.name,\n            tree: result.tree,\n            paid: true,\n            visible: false,\n          });\n        } else {\n          putOS.put({\n            dbid,\n            name: '',\n            tree: false,\n            paid: true,\n            visible: false,\n          });\n        }\n      };\n    }\n  };\n\n  const initDB = (): Promise<IDBDatabase | Event> =>\n    new Promise((resolve, reject) => {\n      const openRequest = window.indexedDB.open('collections_db', 1);\n\n      // error handler signifies that the database didn't open successfully\n      openRequest.onerror = () => {\n        const errorMessage = `Database failed to open: ${openRequest?.error?.message ?? 'Unknown error'}`;\n        console.error(errorMessage);\n        reject(new Error(errorMessage));\n      };\n\n      // success handler signifies that the database opened successfully\n      openRequest.onsuccess = () => {\n        // Store the opened database object in the db variable. This is used a lot below\n        resolve(openRequest.result);\n      };\n\n      // Set up the database tables if this has not already been done\n      openRequest.onupgradeneeded = () => {\n        // Grab a reference to the opened database\n        const tmpDb: IDBDatabase = openRequest.result;\n\n        // Create an objectStore in our database to store notes and an auto-incrementing key\n        // An objectStore is similar to a 'table' in a relational database\n        const objectStore = tmpDb.createObjectStore('collections_os', {\n          keyPath: 'dbid',\n        });\n\n        // Define what data items the objectStore will contain\n        objectStore.createIndex('name', 'name', { unique: true });\n        objectStore.createIndex('paid', 'paid', { unique: false });\n        objectStore.createIndex('tree', 'tree', { unique: false });\n        objectStore.createIndex('visible', 'visible', { unique: false });\n\n        console.log('Database setup complete');\n        resolve(tmpDb);\n      };\n    });\n\n  const evalLink = (db: IDBDatabase, link: HTMLAnchorElement): void => {\n    // Make sure link has test\n    const linkText = link.textContent;\n    if (linkText) {\n      // Skip review button links\n      if (linkText !== 'Review' && linkText.indexOf('\\t') === -1 && linkText.indexOf('\\n') === -1) {\n        // extract dbid\n        const dbidRegex = /[?&]dbid=(\\d+)/;\n        const dbidMatch = RegExp(dbidRegex).exec(link.href);\n        if (dbidMatch) {\n          const dbid = Number.parseInt(dbidMatch[1], 10);\n\n          // see if database has info\n          // start db transaction\n          const getRequest = db.transaction('collections_os', 'readonly').objectStore('collections_os').get(dbid);\n          getRequest.onsuccess = () => {\n            const result = getRequest.result;\n            let hide = false;\n            // if no result, query link and add data to the database\n            if (!result) {\n              GM.xmlHttpRequest({\n                method: 'GET',\n                url: link.href,\n                onreadystatechange(response) {\n                  if (response.readyState === Tampermonkey.ReadyState.HeadersReceived) {\n                    // HeadersReceived\n                    const location = response.finalUrl;\n                    if (location) {\n                      // find out if this is a paid link\n                      const denyRegex = /offers\\/join/;\n                      const denyMatch = RegExp(denyRegex).exec(location);\n                      const putOS = db.transaction('collections_os', 'readwrite').objectStore('collections_os');\n                      const isTree = familyTreeSources.indexOf(dbid) !== -1;\n                      if (denyMatch) {\n                        // if match, add to paid collection database\n                        putOS.add({\n                          dbid,\n                          name: link.textContent,\n                          paid: true,\n                          visible: false,\n                          tree: isTree,\n                        });\n                        hide = true;\n                      } else if (isTree) {\n                        // by default, hide tree results\n                        putOS.add({\n                          dbid,\n                          name: link.textContent,\n                          paid: false,\n                          visible: false,\n                          tree: true,\n                        });\n                        hide = true;\n                      } else {\n                        // add to database as a free link so we don't re-query\n                        putOS.add({\n                          dbid,\n                          name: link.textContent,\n                          paid: false,\n                          visible: true,\n                          tree: false,\n                        });\n                      }\n                    }\n                  }\n                },\n              });\n            } else {\n              hide = !result.visible;\n            }\n            if (hide) {\n              // remove hint from view\n              const li = link.closest(\"li[role='group']\");\n              const section = link.closest('section');\n              if (li) {\n                li.remove();\n                if (section && section.querySelectorAll(\"li[role='group']\").length === 1) {\n                  section.remove();\n                }\n              }\n            }\n          };\n        }\n      }\n    }\n  };\n\n  const scanHints = (db: IDBDatabase, element: Element): void => {\n    // get links\n    const sseLinks = element.querySelectorAll<HTMLAnchorElement>(\"a[href*='sse.dll']\");\n    for (const link of sseLinks) {\n      evalLink(db, link);\n    }\n\n    // remove family tree\n    const familyTreeLinks = element.querySelectorAll<HTMLAnchorElement>(\"a[href*='/family-tree/tree/']\");\n    for (const link of familyTreeLinks) {\n      // remove hint from view\n      const li = link.closest(\"li[role='group']\");\n      const section = link.closest('section');\n      if (li) {\n        li.remove();\n        if (section && section.querySelectorAll(\"li[role='group']\").length === 1) {\n          section.remove();\n        }\n      }\n    }\n  };\n\n  const mutationObserverSetup = (db: IDBDatabase): void => {\n    // Options for the observer (which mutations to observe)\n    const config = { childList: true, subtree: true };\n\n    // Callback function to execute when mutations are observed\n    const callback: MutationCallback = mutationList => {\n      for (const mutation of mutationList) {\n        if (mutation.type === 'childList') {\n          for (const addedNode of mutation.addedNodes) {\n            const element = addedNode as Element;\n            if (\n              element.innerHTML &&\n              (element.innerHTML.indexOf('sse.dll') !== -1 || element.innerHTML.indexOf('/family-tree/tree/') !== -1)\n            ) {\n              scanHints(db, element);\n            }\n          }\n        }\n      }\n    };\n\n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(callback);\n\n    // Start observing the target node for configured mutations\n    observer.observe(document, config);\n  };\n\n  export const main = async (): Promise<void> => {\n    const db = await initDB();\n    if (db instanceof IDBDatabase) {\n      // see if we're on offer page and handle it\n      if (window.location.href.indexOf('offers/join') !== -1) {\n        handleOfferPage(db, window.location);\n      } else {\n        mutationObserverSetup(db);\n      }\n    }\n  };\n}\nAncestryRemovePaidHints.main();\n"],
  "mappings": "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",
  "names": ["AncestryRemovePaidHints"]
}
